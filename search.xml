<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>1-1、CSS中hover时出现抖动的原因和解决方法</title>
      <link href="/article/16495/"/>
      <url>/article/16495/</url>
      
        <content type="html"><![CDATA[<h2 id="1-出现的原因"><a href="#1-出现的原因" class="headerlink" title="1. 出现的原因"></a>1. 出现的原因</h2><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">CSS hover时出现抖动的原因通常与盒模型和布局有关，可能是由于元素在hover状态下增加了一些样式，导致元素的尺寸或位置发生了变化，从而引发抖动。</span><br></pre></td></tr></table></figure><h2 id="2-解决方式"><a href="#2-解决方式" class="headerlink" title="2. 解决方式"></a>2. 解决方式</h2><h3 id="2-1边框的影响"><a href="#2-1边框的影响" class="headerlink" title="2.1边框的影响"></a>2.1边框的影响</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 如果在hover状态下添加了边框，而没有在非hover状态下考虑到边框的宽度，可能导致抖动。确保在非hover状态下也为元素预留足够的空间。 */</span></span><br><span class="line"><span class="comment">/* 不好的例子 */</span></span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid transparent;</span><br><span class="line">  <span class="attribute">transition</span>: border-color <span class="number">0.3s</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">border-color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 好的例子 */</span></span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid transparent;</span><br><span class="line">  <span class="attribute">transition</span>: border-color <span class="number">0.3s</span>;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">border-color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-宽度和高度的变化"><a href="#2-2-宽度和高度的变化" class="headerlink" title="2.2 宽度和高度的变化"></a>2.2 宽度和高度的变化</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 如果在hover状态下改变了元素的宽度或高度，而在非hover状态下没有合适地设置，也可能导致抖动。 */</span></span><br><span class="line"><span class="comment">/* 不好的例子 */</span></span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">transition</span>: width <span class="number">0.3s</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">120px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 好的例子 */</span></span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">transition</span>: width <span class="number">0.3s</span>;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">120px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-改变透明度"><a href="#2-3-改变透明度" class="headerlink" title="2.3 改变透明度"></a>2.3 改变透明度</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 在某些情况下，改变元素透明度可能导致抖动。确保在非hover状态下也设置透明度。 */</span></span><br><span class="line"><span class="comment">/* 不好的例子 */</span></span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">transition</span>: opacity <span class="number">0.3s</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0.8</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 好的例子 */</span></span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">transition</span>: opacity <span class="number">0.3s</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0.8</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-4-使用-transform-属性"><a href="#2-4-使用-transform-属性" class="headerlink" title="2.4 使用 transform 属性"></a>2.4 使用 transform 属性</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 在一些情况下，使用 transform 属性可能更有效，因为它不会影响文档流，避免了一些布局引起的抖动。 */</span></span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">transition</span>: transform <span class="number">0.3s</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">1.1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3-7、高级篇：声明合并</title>
      <link href="/article/43000/"/>
      <url>/article/43000/</url>
      
        <content type="html"><![CDATA[<h1 id="十六、声明合并"><a href="#十六、声明合并" class="headerlink" title="十六、声明合并"></a>十六、声明合并</h1><h2 id="16-1-简介"><a href="#16-1-简介" class="headerlink" title="16.1 简介"></a>16.1 简介</h2><p>TypeScript中的一些独特概念在类型层面上描述了JavaScript对象的形状。一个对TypeScript来说特别独特的例子是 “声明合并 “的概念。理解这个概念会让你在处理现有的JavaScript时有一个优势。它还打开了通往更高级抽象概念的大门。</p><p>就本文而言，”声明合并 “意味着编译器将两个以相同名称声明的独立声明合并为一个定义。这个合并的定义具有两个原始声明的特征。任何数量的声明都可以被合并；它并不局限于两个声明。</p><h2 id="16-2-基本概念"><a href="#16-2-基本概念" class="headerlink" title="16.2 基本概念"></a>16.2 基本概念</h2><p>在TypeScript中，声明至少在三组中的一组创建实体：命名空间、类型或值。创建命名空间的声明创建了一个命名空间，其中包含使用点阵符号访问的名称。创建类型的声明就是这样做的：它们创建了一个类型，这个类型在声明的形状下是可见的，并与给定的名称绑定。最后，创建值的声明会创建在输出的JavaScript中可见的值。</p><table><thead><tr><th align="left">Declaration Type</th><th align="left">Namespace</th><th align="left">Type</th><th align="left">Value</th></tr></thead><tbody><tr><td align="left">Namespace</td><td align="left">X</td><td align="left"></td><td align="left">X</td></tr><tr><td align="left">Class</td><td align="left"></td><td align="left">X</td><td align="left">X</td></tr><tr><td align="left">Enum</td><td align="left"></td><td align="left">X</td><td align="left">X</td></tr><tr><td align="left">Interface</td><td align="left"></td><td align="left">X</td><td align="left"></td></tr><tr><td align="left">Type Alias</td><td align="left"></td><td align="left">X</td><td align="left"></td></tr><tr><td align="left">Function</td><td align="left"></td><td align="left"></td><td align="left">X</td></tr><tr><td align="left">Variable</td><td align="left"></td><td align="left"></td><td align="left">X</td></tr></tbody></table><p>了解每个声明所创建的内容将有助于你理解当你执行声明合并时被合并的内容。</p><h2 id="16-3-合并接口"><a href="#16-3-合并接口" class="headerlink" title="16.3 合并接口"></a>16.3 合并接口</h2><p>最简单的，也许也是最常见的声明合并类型是接口合并。在最基本的层面上，合并是将两个声明中的成员机械地连接到一个具有相同名称的单一接口中。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Box</span> &#123;</span><br><span class="line">  <span class="attr">height</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">width</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Box</span> &#123;</span><br><span class="line">  <span class="attr">scale</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">box</span>: <span class="title class_">Box</span> = &#123; <span class="attr">height</span>: <span class="number">5</span>, <span class="attr">width</span>: <span class="number">6</span>, <span class="attr">scale</span>: <span class="number">10</span> &#125;;</span><br></pre></td></tr></table></figure><p>接口的非功能成员应该是唯一的。如果它们不是唯一的，它们必须是同一类型的。如果接口都声明了同名的非功能成员，但类型不同，编译器会发出错误。</p><p>对于函数成员，每个同名的函数成员都被视为描述同一个函数的重载。同样值得注意的是，在接口 <code>A</code> 与后来的接口 <code>A</code> 合并的情况下，第二个接口将比第一个接口有更高的优先权。</p><p>就是说，在这个例子中：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Cloner</span> &#123;</span><br><span class="line">  <span class="title function_">clone</span>(<span class="attr">animal</span>: <span class="title class_">Animal</span>): <span class="title class_">Animal</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Cloner</span> &#123;</span><br><span class="line">  <span class="title function_">clone</span>(<span class="attr">animal</span>: <span class="title class_">Sheep</span>): <span class="title class_">Sheep</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Cloner</span> &#123;</span><br><span class="line">  <span class="title function_">clone</span>(<span class="attr">animal</span>: <span class="title class_">Dog</span>): <span class="title class_">Dog</span>;</span><br><span class="line">  <span class="title function_">clone</span>(<span class="attr">animal</span>: <span class="title class_">Cat</span>): <span class="title class_">Cat</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这三个接口将合并成一个单一的声明，如下：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Cloner</span> &#123;</span><br><span class="line">  <span class="title function_">clone</span>(<span class="attr">animal</span>: <span class="title class_">Dog</span>): <span class="title class_">Dog</span>;</span><br><span class="line">  <span class="title function_">clone</span>(<span class="attr">animal</span>: <span class="title class_">Cat</span>): <span class="title class_">Cat</span>;</span><br><span class="line">  <span class="title function_">clone</span>(<span class="attr">animal</span>: <span class="title class_">Sheep</span>): <span class="title class_">Sheep</span>;</span><br><span class="line">  <span class="title function_">clone</span>(<span class="attr">animal</span>: <span class="title class_">Animal</span>): <span class="title class_">Animal</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>请注意，每个组的元素保持相同的顺序，但组本身是合并的，后来的重载组先排序。</p><p>这一规则的一个例外是专门的签名。如果一个签名有一个参数的类型是单一的字符串字面类型（例如，不是字符串字面的联合），那么它将被泡在其合并的重载列表的顶部。</p><p>例如，以下接口将合并在一起：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Document</span> &#123;</span><br><span class="line">  <span class="title function_">createElement</span>(<span class="attr">tagName</span>: <span class="built_in">any</span>): <span class="title class_">Element</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Document</span> &#123;</span><br><span class="line">  <span class="title function_">createElement</span>(<span class="attr">tagName</span>: <span class="string">&quot;div&quot;</span>): <span class="title class_">HTMLDivElement</span>;</span><br><span class="line">  <span class="title function_">createElement</span>(<span class="attr">tagName</span>: <span class="string">&quot;span&quot;</span>): <span class="title class_">HTMLSpanElement</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Document</span> &#123;</span><br><span class="line">  <span class="title function_">createElement</span>(<span class="attr">tagName</span>: <span class="built_in">string</span>): <span class="title class_">HTMLElement</span>;</span><br><span class="line">  <span class="title function_">createElement</span>(<span class="attr">tagName</span>: <span class="string">&quot;canvas&quot;</span>): <span class="title class_">HTMLCanvasElement</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>合并后的 <code>document</code> 声明将如下：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Document</span> &#123;</span><br><span class="line">  <span class="title function_">createElement</span>(<span class="attr">tagName</span>: <span class="string">&quot;canvas&quot;</span>): <span class="title class_">HTMLCanvasElement</span>;</span><br><span class="line">  <span class="title function_">createElement</span>(<span class="attr">tagName</span>: <span class="string">&quot;div&quot;</span>): <span class="title class_">HTMLDivElement</span>;</span><br><span class="line">  <span class="title function_">createElement</span>(<span class="attr">tagName</span>: <span class="string">&quot;span&quot;</span>): <span class="title class_">HTMLSpanElement</span>;</span><br><span class="line">  <span class="title function_">createElement</span>(<span class="attr">tagName</span>: <span class="built_in">string</span>): <span class="title class_">HTMLElement</span>;</span><br><span class="line">  <span class="title function_">createElement</span>(<span class="attr">tagName</span>: <span class="built_in">any</span>): <span class="title class_">Element</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="16-4-合并命名空间"><a href="#16-4-合并命名空间" class="headerlink" title="16.4 合并命名空间"></a>16.4 合并命名空间</h2><p>与接口类似，同名的命名空间也会合并其成员。由于命名空间同时创建了一个命名空间和一个值，我们需要了解两者是如何合并的。</p><p>为了合并命名空间，每个命名空间中声明的导出接口的类型定义本身也被合并，形成一个单一的命名空间，里面有合并的接口定义。</p><p>为了合并名字空间的值，在每个声明地点，如果已经存在一个给定名字的名字空间，那么它将被进一步扩展，方法是利用现有的名字空间，将第二个名字空间的导出成员添加到第一个名字空间中。</p><p>在这个例子中，<code>Animals</code> 的声明合并：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title class_">Animals</span> &#123;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">Zebra</span> &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">Animals</span> &#123;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">Legged</span> &#123;</span><br><span class="line">    <span class="attr">numberOfLegs</span>: <span class="built_in">number</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">Dog</span> &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>相当于：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title class_">Animals</span> &#123;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">Legged</span> &#123;</span><br><span class="line">    <span class="attr">numberOfLegs</span>: <span class="built_in">number</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">Zebra</span> &#123;&#125;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">Dog</span> &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种命名空间合并的模式是一个有用的起点，但是我们还需要了解非导出成员的情况。非导出的成员只在原始（未合并的）命名空间中可见。这意味着在合并后，来自其他声明的合并成员不能看到非导出成员。</p><p>我们可以在这个例子中更清楚地看到这一点：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> haveMuscles = <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">animalsHaveMuscles</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> haveMuscles;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">doAnimalsHaveMuscles</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> haveMuscles; <span class="comment">// 错误，因为这里无法访问haveMuscles。</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为 <code>haveMuscles</code> 没有被导出，所以只有共享同一未合并命名空间的 <code>animalsHaveMuscles</code> 函数可以看到这个符号。<code>doAnimalsHaveMuscles</code> 函数，即使它是合并后的 <code>Animal</code> 命名空间的一部分，也不能看到这个未输出的成员。</p><h3 id="16-4-1-将命名空间与类、函数和枚举合并起来"><a href="#16-4-1-将命名空间与类、函数和枚举合并起来" class="headerlink" title="16.4.1 将命名空间与类、函数和枚举合并起来"></a>16.4.1 将命名空间与类、函数和枚举合并起来</h3><p>命名空间足够灵活，也可以与其他类型的声明合并。要做到这一点，命名空间声明必须跟在它要合并的声明后面。由此产生的声明具有两种声明类型的属性。TypeScript使用这种能力来模拟JavaScript以及其他编程语言中的一些模式。</p><h3 id="16-4-2-将命名空间与类合并"><a href="#16-4-2-将命名空间与类合并" class="headerlink" title="16.4.2 将命名空间与类合并"></a>16.4.2 将命名空间与类合并</h3><p>这给了用户一种描述内部类的方法。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Album</span> &#123;</span><br><span class="line">  <span class="attr">label</span>: <span class="title class_">Album</span>.<span class="property">AlbumLabel</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">Album</span> &#123;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AlbumLabel</span> &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>合并成员的可见性规则与<a href="https://www.typescriptlang.org/docs/handbook/declaration-merging.html#merging-namespaces">合并命名空间 </a>一节中描述的相同，所以我们必须导出 <code>AlbumLabel</code> 类，以便合并后的类能看到它。最终的结果是一个类在另一个类里面管理。你也可以使用命名空间来为现有的类添加更多的静态成员。</p><p>除了内部类的模式外，你可能也熟悉JavaScript的做法，即创建一个函数，然后通过在函数上添加属性来进一步扩展该函数。TypeScript使用声明合并，以类型安全的方式建立这样的定义。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">buildLabel</span>(<span class="params">name: <span class="built_in">string</span></span>): <span class="built_in">string</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> buildLabel.<span class="property">prefix</span> + name + buildLabel.<span class="property">suffix</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> buildLabel &#123;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">let</span> suffix = <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">let</span> prefix = <span class="string">&quot;Hello, &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">buildLabel</span>(<span class="string">&quot;Sam Smith&quot;</span>));</span><br></pre></td></tr></table></figure><p>同样地，命名空间可以用来扩展具有静态成员的枚举。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Color</span> &#123;</span><br><span class="line">  red = <span class="number">1</span>,</span><br><span class="line">  green = <span class="number">2</span>,</span><br><span class="line">  blue = <span class="number">4</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">Color</span> &#123;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">mixColor</span>(<span class="params">colorName: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (colorName == <span class="string">&quot;yellow&quot;</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="title class_">Color</span>.<span class="property">red</span> + <span class="title class_">Color</span>.<span class="property">green</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (colorName == <span class="string">&quot;white&quot;</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="title class_">Color</span>.<span class="property">red</span> + <span class="title class_">Color</span>.<span class="property">green</span> + <span class="title class_">Color</span>.<span class="property">blue</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (colorName == <span class="string">&quot;magenta&quot;</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="title class_">Color</span>.<span class="property">red</span> + <span class="title class_">Color</span>.<span class="property">blue</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (colorName == <span class="string">&quot;cyan&quot;</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="title class_">Color</span>.<span class="property">green</span> + <span class="title class_">Color</span>.<span class="property">blue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="16-4-3-不被允许的合并"><a href="#16-4-3-不被允许的合并" class="headerlink" title="16.4.3 不被允许的合并"></a>16.4.3 不被允许的合并</h3><p>不是所有的合并在TypeScript中都是允许的。目前，类不能与其他类或变量合并。关于模仿类合并的信息，请参阅 <a href="https://www.typescriptlang.org/docs/handbook/mixins.html">Mixins in TypeScript</a> 部分。</p><h2 id="16-5-模块增强"><a href="#16-5-模块增强" class="headerlink" title="16.5 模块增强"></a>16.5 模块增强</h2><p>虽然JavaScript模块不支持合并，但你可以通过导入然后更新现有对象来打补丁。让我们来看看一个玩具<code>Observable</code>的例子：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// observable.ts</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">Observable</span>&lt;T&gt; &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// map.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Observable</span> &#125; <span class="keyword">from</span> <span class="string">&quot;./observable&quot;</span>;</span><br><span class="line"><span class="title class_">Observable</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">map</span> = <span class="keyword">function</span> (<span class="params">f</span>) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这在TypeScript中也能正常工作，但编译器不知道 <code>Observable.prototype.map</code>。你可以使用模块增强来告诉编译器它的存在。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// observable.ts</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">Observable</span>&lt;T&gt; &#123;</span><br><span class="line">  <span class="comment">// ... implementation left as an exercise for the reader ...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// map.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Observable</span> &#125; <span class="keyword">from</span> <span class="string">&quot;./observable&quot;</span>;</span><br><span class="line"><span class="keyword">declare</span> <span class="variable language_">module</span> <span class="string">&quot;./observable&quot;</span> &#123;</span><br><span class="line">  <span class="keyword">interface</span> <span class="title class_">Observable</span>&lt;T&gt; &#123;</span><br><span class="line">    map&lt;U&gt;(<span class="attr">f</span>: <span class="function">(<span class="params">x: T</span>) =&gt;</span> U): <span class="title class_">Observable</span>&lt;U&gt;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Observable</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">map</span> = <span class="keyword">function</span> (<span class="params">f</span>) &#123;</span><br><span class="line">  <span class="comment">// ... another exercise for the reader</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// consumer.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Observable</span> &#125; <span class="keyword">from</span> <span class="string">&quot;./observable&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;./map&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">o</span>: <span class="title class_">Observable</span>&lt;<span class="built_in">number</span>&gt;;</span><br><span class="line">o.<span class="title function_">map</span>(<span class="function">(<span class="params">x</span>) =&gt;</span> x.<span class="title function_">toFixed</span>());</span><br></pre></td></tr></table></figure><p>模块名称的解析方式与 <code>import</code>&#x2F;<code>export</code> 中的模块指定器相同。更多信息请参见 <a href="https://www.typescriptlang.org/docs/handbook/modules.html">Modules</a> 。然后，增量中的声明被合并，就像它们与原始文件在同一个文件中声明一样。</p><p>然而，有两个限制需要记住：</p><ol><li>你不能在扩增中声明新的顶层声明–只是对现有声明的补丁。</li><li>默认出口也不能被增强，只能是命名的出口（因为你需要用出口的名字来增强出口，而 <code>default</code> 是一个保留词–详见 <a href="https://github.com/Microsoft/TypeScript/issues/14080">#14080</a> )</li></ol><h2 id="16-6-全局增强"><a href="#16-6-全局增强" class="headerlink" title="16.6 全局增强"></a>16.6 全局增强</h2><p>你也可以从一个模块内部向全局范围添加声明。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// observable.ts</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">Observable</span>&lt;T&gt; &#123;</span><br><span class="line">  <span class="comment">// ... still no implementation ...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">declare</span> <span class="variable language_">global</span> &#123;</span><br><span class="line">  <span class="keyword">interface</span> <span class="title class_">Array</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="title function_">toObservable</span>(): <span class="title class_">Observable</span>&lt;T&gt;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toObservable</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>全局增强的行为和限制与模块增强相同。</p><p>——高级篇完——</p><h3 id="特别声明-本文转自-古艺散人老师-，如有需要可前往原文预览查看。"><a href="#特别声明-本文转自-古艺散人老师-，如有需要可前往原文预览查看。" class="headerlink" title="特别声明: 本文转自  古艺散人老师 ，如有需要可前往原文预览查看。"></a>特别声明: 本文转自 <a href="https://github.com/lurongtao/TypeScript"> 古艺散人老师 </a>，如有需要可前往原文预览查看。</h3>]]></content>
      
      
      <categories>
          
          <category> TypeScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> TypeScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3-6、高级篇：命名空间与模块</title>
      <link href="/article/19249/"/>
      <url>/article/19249/</url>
      
        <content type="html"><![CDATA[<h1 id="十五、命名空间与模块"><a href="#十五、命名空间与模块" class="headerlink" title="十五、命名空间与模块"></a>十五、命名空间与模块</h1><p>这篇文章概述了在TypeScript中使用模块和命名空间来组织你的代码的各种方法。我们还将讨论一些关于如何使用命名空间和模块的高级话题，并解决在TypeScript中使用它们时的一些常见陷阱。</p><p>关于ES模块的更多信息，请参见 <a href="https://www.typescriptlang.org/docs/handbook/modules.html">Modules</a> 文档。更多关于TypeScript命名空间的信息，请参见 <a href="https://www.typescriptlang.org/docs/handbook/namespaces.html">Namespaces</a> 文档。</p><blockquote><p>注意：在非常老的TypeScript版本中，命名空间被称为 “内部模块”，这比JavaScript模块系统要早。</p></blockquote><h2 id="15-1-使用模块"><a href="#15-1-使用模块" class="headerlink" title="15.1 使用模块"></a>15.1 使用模块</h2><p>模块可以包含代码和声明。</p><p>模块也依赖于模块加载器（如CommonJs&#x2F;Require.js）或支持ES模块的运行时间。模块提供了更好的代码重用，更强的隔离性和更好的捆绑工具支持。</p><p>同样值得注意的是，对于Node.js应用程序，模块是默认的，我们在现代代码中<strong>推荐模块而不是命名空间</strong>。</p><p>从ECMAScript 2015开始，模块是语言的原生部分，所有兼容的引擎实现都应该支持。因此，对于新项目，模块将是推荐的代码组织机制。</p><h2 id="15-2-使用命名空间"><a href="#15-2-使用命名空间" class="headerlink" title="15.2 使用命名空间"></a>15.2 使用命名空间</h2><p>命名空间是一种TypeScript特有的组织代码的方式。</p><p>命名空间是全局命名空间中简单命名的JavaScript对象。这使得命名空间的使用非常简单。与模块不同，它们可以跨越多个文件，并且可以使用 <a href="https://www.typescriptlang.org/tsconfig#outFile"><code>outFile</code></a>串联。命名空间可以成为Web应用程序中结构化代码的一个好方法，所有的依赖关系都包含在HTML页面的<code>&lt;script&gt;</code>标签中。</p><p>就像所有的全局命名空间污染一样，可能很难识别组件的依赖关系，特别是在一个大型应用程序中。</p><h2 id="15-3-命名空间和模块的陷阱"><a href="#15-3-命名空间和模块的陷阱" class="headerlink" title="15.3 命名空间和模块的陷阱"></a>15.3 命名空间和模块的陷阱</h2><p>在本节中，我们将介绍使用命名空间和模块的各种常见陷阱，以及如何避免这些陷阱。</p><h3 id="15-3-1-为模块命名"><a href="#15-3-1-为模块命名" class="headerlink" title="15.3.1 /// &lt;reference&gt; 为模块命名"></a>15.3.1 <code>/// &lt;reference&gt;</code> 为模块命名</h3><p>一个常见的错误是试图使用<code>///&lt;reference ... /&gt;</code>语法来引用一个模块文件，而不是使用 <code>import</code> 语句。为了理解这种区别，我们首先需要理解编译器是如何根据 <code>import</code> 的路径（例如，在 <code>import x from &quot;...&quot;;</code>中的 <code>...</code>, <code>import x = require(&quot;...&quot;);</code>等等）路径来定位模块的类型信息。</p><p>编译器将尝试找到一个 <code>.ts</code>，<code>.tsx</code>，然后是一个具有适当路径的 <code>.d.ts</code>。如果找不到一个特定的文件，那么编译器将寻找一个环境模块声明。回顾一下，这些需要在 <code>.d.ts</code> 文件中声明。</p><ul><li>myModules.d.ts</li></ul><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在一个.d.ts文件或不是模块的.ts文件中</span></span><br><span class="line"><span class="keyword">declare</span> <span class="variable language_">module</span> <span class="string">&quot;SomeModule&quot;</span> &#123;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>): <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>myOtherModule.ts</li></ul><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference path=&quot;myModules.d.ts&quot; /&gt;</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> m <span class="keyword">from</span> <span class="string">&quot;SomeModule&quot;</span>;</span><br></pre></td></tr></table></figure><p>这里的引用标签允许我们找到包含环境模块声明的声明文件。几个TypeScript样本使用的 <code>node.d.ts</code> 文件就是这样被消耗的。</p><h3 id="15-3-2-不必要的命名方式"><a href="#15-3-2-不必要的命名方式" class="headerlink" title="15.3.2 不必要的命名方式"></a>15.3.2 不必要的命名方式</h3><p>如果你要把一个程序从命名空间转换为模块，很容易就会出现一个看起来像这样的文件：</p><ul><li><code>shapes.ts</code></li></ul><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">namespace</span> <span class="title class_">Shapes</span> &#123;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">Triangle</span> &#123;</span><br><span class="line">    <span class="comment">/* ... */</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">Square</span> &#123;</span><br><span class="line">    <span class="comment">/* ... */</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的顶层命名空间 <code>Shapes</code> 毫无理由地将<code>Triangle</code>和<code>Square</code>包裹起来。这让你的模块的使用者感到困惑和厌烦。</p><ul><li><code>shapeConsumer.ts</code></li></ul><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> shapes <span class="keyword">from</span> <span class="string">&quot;./shapes&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> t = <span class="keyword">new</span> shapes.<span class="property">Shapes</span>.<span class="title class_">Triangle</span>(); <span class="comment">// shapes.Shapes?</span></span><br></pre></td></tr></table></figure><p>TypeScript中模块的一个关键特征是，两个不同的模块永远不会将名字贡献给同一个范围。因为模块的消费者决定给它分配什么名字，所以不需要主动将导出的符号包裹在一个命名空间中。</p><p>重申一下为什么你不应该尝试对模块内容进行命名空间，命名空间的一般想法是提供结构体的逻辑分组，并防止名称碰撞。因为模块文件本身已经是一个逻辑分组，它的顶层名称由导入它的代码定义，所以没有必要为导出的对象使用一个额外的模块层。</p><p>下面是一个修改后的例子：</p><ul><li><code>shapes.ts</code></li></ul><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">Triangle</span> &#123;</span><br><span class="line">  <span class="comment">/* ... */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">Square</span> &#123;</span><br><span class="line">  <span class="comment">/* ... */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>shapeConsumer.ts</code></li></ul><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> shapes <span class="keyword">from</span> <span class="string">&quot;./shapes&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> t = <span class="keyword">new</span> shapes.<span class="title class_">Triangle</span>();</span><br></pre></td></tr></table></figure><h3 id="15-3-3-模块的权衡"><a href="#15-3-3-模块的权衡" class="headerlink" title="15.3.3 模块的权衡"></a>15.3.3 模块的权衡</h3><p>就像JS文件和模块之间有一对一的对应关系一样，TypeScript在模块源文件和其发射的JS文件之间有一对一的对应关系。这样做的一个影响是，根据你的目标模块系统，不可能串联多个模块源文件。例如，你不能在针对 <code>commonjs</code> 或 <code>umd</code> 时使用 <a href="https://www.typescriptlang.org/tsconfig#outFile"><code>outFile</code></a> 选项，但在 TypeScript 1.8 及更高版本中，在针对 <code>amd</code> 或 <code>system</code> 时<a href="https://www.typescriptlang.org/docs/handbook/release-notes/typescript-1-8.html#concatenate-amd-and-system-modules-with---outfile">可以 </a>使用 <code>outFile</code>。</p><h3 id="特别声明-本文转自-古艺散人老师-，如有需要可前往原文预览查看。"><a href="#特别声明-本文转自-古艺散人老师-，如有需要可前往原文预览查看。" class="headerlink" title="特别声明: 本文转自  古艺散人老师 ，如有需要可前往原文预览查看。"></a>特别声明: 本文转自 <a href="https://github.com/lurongtao/TypeScript"> 古艺散人老师 </a>，如有需要可前往原文预览查看。</h3>]]></content>
      
      
      <categories>
          
          <category> TypeScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> TypeScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3-5、高级篇：命名空间</title>
      <link href="/article/52849/"/>
      <url>/article/52849/</url>
      
        <content type="html"><![CDATA[<h1 id="十四、命名空间"><a href="#十四、命名空间" class="headerlink" title="十四、命名空间"></a>十四、命名空间</h1><blockquote><p><strong>关于术语的说明：</strong>需要注意的是，在TypeScript 1.5中，术语已经改变。”内部模块 “ 现在是 “命名空间”。”外部模块 “现在只是 “模块”，以便与 <a href="https://www.ecma-international.org/ecma-262/6.0/">ECMAScript 2015</a>的术语保持一致，（即 <code>module X &#123;</code> 等同于现在的 <code>namespace X &#123;</code>）。</p></blockquote><p>这篇文章概述了在TypeScript中使用命名空间（以前的 “内部模块”），用各种方法来组织你的代码。正如我们在术语说明中所暗示的，”内部模块 “现在被称为 “命名空间”。此外，在声明内部模块时，凡是使用 <code>module</code> 关键字的地方，都可以而且应该使用 <code>namespace</code> 关键字来代替。这就避免了新用户因使用类似的术语而感到困惑。</p><h2 id="14-1-第一步"><a href="#14-1-第一步" class="headerlink" title="14.1 第一步"></a>14.1 第一步</h2><p>让我们从本页中我们将使用的程序开始。作为例子，我们写了一小套简单的字符串验证器，用来检查用户在网页中的表单中的输入，或者检查外部提供的数据文件的格式。</p><h2 id="14-2-单一文件中的验证器"><a href="#14-2-单一文件中的验证器" class="headerlink" title="14.2 单一文件中的验证器"></a>14.2 单一文件中的验证器</h2><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">StringValidator</span> &#123;</span><br><span class="line">  <span class="title function_">isAcceptable</span>(<span class="attr">s</span>: <span class="built_in">string</span>): <span class="built_in">boolean</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> lettersRegexp = <span class="regexp">/^[A-Za-z]+$/</span>;</span><br><span class="line"><span class="keyword">let</span> numberRegexp = <span class="regexp">/^[0-9]+$/</span>;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LettersOnlyValidator</span> <span class="keyword">implements</span> <span class="title class_">StringValidator</span> &#123;</span><br><span class="line">  <span class="title function_">isAcceptable</span>(<span class="params">s: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> lettersRegexp.<span class="title function_">test</span>(s);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ZipCodeValidator</span> <span class="keyword">implements</span> <span class="title class_">StringValidator</span> &#123;</span><br><span class="line">  <span class="title function_">isAcceptable</span>(<span class="params">s: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> s.<span class="property">length</span> === <span class="number">5</span> &amp;&amp; numberRegexp.<span class="title function_">test</span>(s);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 一些测试案例</span></span><br><span class="line"><span class="keyword">let</span> strings = [<span class="string">&quot;Hello&quot;</span>, <span class="string">&quot;98052&quot;</span>, <span class="string">&quot;101&quot;</span>];</span><br><span class="line"><span class="comment">// 要使用的验证器</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">validators</span>: &#123; [<span class="attr">s</span>: <span class="built_in">string</span>]: <span class="title class_">StringValidator</span> &#125; = &#123;&#125;;</span><br><span class="line">validators[<span class="string">&quot;ZIP code&quot;</span>] = <span class="keyword">new</span> <span class="title class_">ZipCodeValidator</span>();</span><br><span class="line">validators[<span class="string">&quot;Letters only&quot;</span>] = <span class="keyword">new</span> <span class="title class_">LettersOnlyValidator</span>();</span><br><span class="line"><span class="comment">// 显示每一个字符串是否通过了每个验证器</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> s <span class="keyword">of</span> strings) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> name <span class="keyword">in</span> validators) &#123;</span><br><span class="line">    <span class="keyword">let</span> isMatch = validators[name].<span class="title function_">isAcceptable</span>(s);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`&#x27;<span class="subst">$&#123;s&#125;</span>&#x27; <span class="subst">$&#123;isMatch ? <span class="string">&quot;matches&quot;</span> : <span class="string">&quot;does not match&quot;</span>&#125;</span> &#x27;<span class="subst">$&#123;name&#125;</span>&#x27;.`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="14-2-命名方式"><a href="#14-2-命名方式" class="headerlink" title="14.2 命名方式"></a>14.2 命名方式</h2><p>当我们添加更多的验证器时，我们会希望有某种组织方案，这样我们就可以跟踪我们的类型，而不用担心与其他对象的名称冲突。与其把很多不同的名字放到全局命名空间中，不如把我们的对象包装成一个命名空间。</p><p>在这个例子中，我们将把所有与验证器相关的实体移到一个叫做 <code>Validation</code> 的命名空间中。因为我们希望这里的接口和类在命名空间之外是可见的，所以我们在它们前面加上 <code>export</code>。相反，变量 <code>lettersRegexp</code> 和 <code>numberRegexp</code> 是实现细节，所以它们没有被导出，也不会被命名空间以外的代码看到。在文件底部的测试代码中，我们现在需要限定在名字空间之外使用的类型的名称，例如 <code>Validation.LettersOnlyValidator</code>。</p><h2 id="14-3-命名的验证器"><a href="#14-3-命名的验证器" class="headerlink" title="14.3 命名的验证器"></a>14.3 命名的验证器</h2><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title class_">Validation</span> &#123;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">StringValidator</span> &#123;</span><br><span class="line">    <span class="title function_">isAcceptable</span>(<span class="attr">s</span>: <span class="built_in">string</span>): <span class="built_in">boolean</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> lettersRegexp = <span class="regexp">/^[A-Za-z]+$/</span>;</span><br><span class="line">  <span class="keyword">const</span> numberRegexp = <span class="regexp">/^[0-9]+$/</span>;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">LettersOnlyValidator</span> <span class="keyword">implements</span> <span class="title class_">StringValidator</span> &#123;</span><br><span class="line">    <span class="title function_">isAcceptable</span>(<span class="params">s: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> lettersRegexp.<span class="title function_">test</span>(s);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">ZipCodeValidator</span> <span class="keyword">implements</span> <span class="title class_">StringValidator</span> &#123;</span><br><span class="line">    <span class="title function_">isAcceptable</span>(<span class="params">s: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> s.<span class="property">length</span> === <span class="number">5</span> &amp;&amp; numberRegexp.<span class="title function_">test</span>(s);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 一些测试案例</span></span><br><span class="line"><span class="keyword">let</span> strings = [<span class="string">&quot;Hello&quot;</span>, <span class="string">&quot;98052&quot;</span>, <span class="string">&quot;101&quot;</span>];</span><br><span class="line"><span class="comment">// 要使用的验证器</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">validators</span>: &#123; [<span class="attr">s</span>: <span class="built_in">string</span>]: <span class="title class_">Validation</span>.<span class="property">StringValidator</span> &#125; = &#123;&#125;;</span><br><span class="line">validators[<span class="string">&quot;ZIP code&quot;</span>] = <span class="keyword">new</span> <span class="title class_">Validation</span>.<span class="title class_">ZipCodeValidator</span>();</span><br><span class="line">validators[<span class="string">&quot;Letters only&quot;</span>] = <span class="keyword">new</span> <span class="title class_">Validation</span>.<span class="title class_">LettersOnlyValidator</span>();</span><br><span class="line"><span class="comment">// 显示每一个字符串是否通过了每个验证器</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> s <span class="keyword">of</span> strings) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> name <span class="keyword">in</span> validators) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(</span><br><span class="line">      <span class="string">`&quot;<span class="subst">$&#123;s&#125;</span>&quot; - <span class="subst">$&#123;</span></span></span><br><span class="line"><span class="subst"><span class="string">        validators[name].isAcceptable(s) ? <span class="string">&quot;matches&quot;</span> : <span class="string">&quot;does not match&quot;</span></span></span></span><br><span class="line"><span class="subst"><span class="string">      &#125;</span> <span class="subst">$&#123;name&#125;</span>`</span>,</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="14-4-跨文件分割"><a href="#14-4-跨文件分割" class="headerlink" title="14.4 跨文件分割"></a>14.4 跨文件分割</h2><p>随着我们的应用程序的增长，我们将希望把代码分成多个文件，以使它更容易维护。</p><h2 id="14-5-多文件命名空间"><a href="#14-5-多文件命名空间" class="headerlink" title="14.5 多文件命名空间"></a>14.5 多文件命名空间</h2><p>在这里，我们将把我们的 <code>Validation</code> 命名空间分成许多文件。尽管这些文件是分开的，但它们都可以为同一个命名空间做出贡献，并且可以像在一个地方定义一样被使用。由于文件之间存在依赖关系，我们将添加引用标签来告诉编译器这些文件之间的关系。我们的测试代码在其他方面没有变化。</p><p><strong>Validation.ts</strong></p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title class_">Validation</span> &#123;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">StringValidator</span> &#123;</span><br><span class="line">    <span class="title function_">isAcceptable</span>(<span class="attr">s</span>: <span class="built_in">string</span>): <span class="built_in">boolean</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>LettersOnlyValidator.ts</strong></p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference path=&quot;Validation.ts&quot; /&gt;</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">Validation</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> lettersRegexp = <span class="regexp">/^[A-Za-z]+$/</span>;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">LettersOnlyValidator</span> <span class="keyword">implements</span> <span class="title class_">StringValidator</span> &#123;</span><br><span class="line">    <span class="title function_">isAcceptable</span>(<span class="params">s: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> lettersRegexp.<span class="title function_">test</span>(s);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>ZipCodeValidator.ts</strong></p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference path=&quot;Validation.ts&quot; /&gt;</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">Validation</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> numberRegexp = <span class="regexp">/^[0-9]+$/</span>;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">ZipCodeValidator</span> <span class="keyword">implements</span> <span class="title class_">StringValidator</span> &#123;</span><br><span class="line">    <span class="title function_">isAcceptable</span>(<span class="params">s: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> s.<span class="property">length</span> === <span class="number">5</span> &amp;&amp; numberRegexp.<span class="title function_">test</span>(s);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Test.ts</strong></p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference path=&quot;Validation.ts&quot; /&gt;</span></span><br><span class="line"><span class="comment">/// &lt;reference path=&quot;LettersOnlyValidator.ts&quot; /&gt;</span></span><br><span class="line"><span class="comment">/// &lt;reference path=&quot;ZipCodeValidator.ts&quot; /&gt;</span></span><br><span class="line"><span class="comment">// 一些测试案例</span></span><br><span class="line"><span class="keyword">let</span> strings = [<span class="string">&quot;Hello&quot;</span>, <span class="string">&quot;98052&quot;</span>, <span class="string">&quot;101&quot;</span>];</span><br><span class="line"><span class="comment">// 要使用的验证器</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">validators</span>: &#123; [<span class="attr">s</span>: <span class="built_in">string</span>]: <span class="title class_">Validation</span>.<span class="property">StringValidator</span> &#125; = &#123;&#125;;</span><br><span class="line">validators[<span class="string">&quot;ZIP code&quot;</span>] = <span class="keyword">new</span> <span class="title class_">Validation</span>.<span class="title class_">ZipCodeValidator</span>();</span><br><span class="line">validators[<span class="string">&quot;Letters only&quot;</span>] = <span class="keyword">new</span> <span class="title class_">Validation</span>.<span class="title class_">LettersOnlyValidator</span>();</span><br><span class="line"><span class="comment">// 显示每一个字符串是否通过了每个验证器</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> s <span class="keyword">of</span> strings) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> name <span class="keyword">in</span> validators) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(</span><br><span class="line">      <span class="string">`&quot;<span class="subst">$&#123;s&#125;</span>&quot; - <span class="subst">$&#123;</span></span></span><br><span class="line"><span class="subst"><span class="string">        validators[name].isAcceptable(s) ? <span class="string">&quot;matches&quot;</span> : <span class="string">&quot;does not match&quot;</span></span></span></span><br><span class="line"><span class="subst"><span class="string">      &#125;</span> <span class="subst">$&#123;name&#125;</span>`</span>,</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一旦涉及到多个文件，我们就需要确保所有的编译后的代码都能被加载。有两种方法可以做到这一点。</p><p>首先，我们可以使用 <a href="https://www.typescriptlang.org/tsconfig#outFile"><code>outFile</code></a> 选项进行串联输出，将所有的输入文件编译成一个单一的JavaScript输出文件。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tsc --outFile sample.js Test.ts</span><br></pre></td></tr></table></figure><p>编译器将根据文件中存在的参考标签自动排列输出文件。你也可以单独指定每个文件：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line">tsc --outFile sample.<span class="property">js</span> <span class="title class_">Validation</span>.<span class="property">ts</span> <span class="title class_">LettersOnlyValidator</span>.<span class="property">ts</span> <span class="title class_">ZipCodeValidator</span>.<span class="property">ts</span> <span class="title class_">Test</span>.<span class="property">ts</span></span><br></pre></td></tr></table></figure><p>另外，我们也可以使用按文件编译（默认），为每个输入文件生成一个JavaScript文件。如果产生了多个JS文件，我们就需要在网页上使用 <code>&lt;script&gt;</code> 标签，以适当的顺序加载每个发射的文件，例如：</p><p><strong>MyTestPage.html (部分代码)</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script src=&quot;Validation.js&quot; type=&quot;text/javascript&quot; /&gt;</span><br><span class="line">&lt;script src=&quot;LettersOnlyValidator.js&quot; type=&quot;text/javascript&quot; /&gt;</span><br><span class="line">&lt;script src=&quot;ZipCodeValidator.js&quot; type=&quot;text/javascript&quot; /&gt;</span><br><span class="line">&lt;script src=&quot;Test.js&quot; type=&quot;text/javascript&quot; /&gt;</span><br></pre></td></tr></table></figure><h2 id="14-6-别名"><a href="#14-6-别名" class="headerlink" title="14.6 别名"></a>14.6 别名</h2><p>另一个可以简化命名空间工作的方法是使用 <code>import q = x.y.z</code>来为常用对象创建更短的名称。不要与用于加载模块的 <code>import x = require(&quot;name&quot;) </code> 语法相混淆，这种语法只是为指定的符号创建一个别名。你可以为任何类型的标识符使用这类导入（通常被称为别名），包括从模块导入创建的对象。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title class_">Shapes</span> &#123;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">namespace</span> <span class="title class_">Polygons</span> &#123;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">Triangle</span> &#123;&#125;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">Square</span> &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">import</span> polygons = <span class="title class_">Shapes</span>.<span class="property">Polygons</span>;</span><br><span class="line"><span class="keyword">let</span> sq = <span class="keyword">new</span> polygons.<span class="title class_">Square</span>(); <span class="comment">// 与&#x27;new Shapes.Polygons.Square()&#x27;等价</span></span><br></pre></td></tr></table></figure><p>注意，我们没有使用 <code>require</code>关键字；相反，我们直接从我们要导入的符号的限定名称中分配。这类似于使用<code>var</code>，但也适用于导入符号的类型和命名空间的含义。重要的是，对于数值来说，导入是一个不同于原始符号的引用，所以对别名 <code>var</code> 的改变不会反映在原始变量上。</p><h2 id="14-7-与其他JavaScript库一起工作"><a href="#14-7-与其他JavaScript库一起工作" class="headerlink" title="14.7 与其他JavaScript库一起工作"></a>14.7 与其他JavaScript库一起工作</h2><p>为了描述不是用TypeScript编写的库的形状，我们需要声明库所暴露的API。因为大多数JavaScript库只暴露了几个顶级对象，命名空间是表示它们的一个好方法。</p><p>我们把不定义实现的声明称为 “环境”。通常，这些都是在 <code>.d.ts</code> 文件中定义的。如果你熟悉C&#x2F;C++，你可以把它们看作是 <code>.h</code> 文件。让我们来看看几个例子：</p><p><strong>D3.d.ts (简要摘录)</strong></p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="keyword">namespace</span> D3 &#123;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">Selectors</span> &#123;</span><br><span class="line">    <span class="attr">select</span>: &#123;</span><br><span class="line">      (<span class="attr">selector</span>: <span class="built_in">string</span>): <span class="title class_">Selection</span>;</span><br><span class="line">      (<span class="attr">element</span>: <span class="title class_">EventTarget</span>): <span class="title class_">Selection</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">Event</span> &#123;</span><br><span class="line">    <span class="attr">x</span>: <span class="built_in">number</span>;</span><br><span class="line">    <span class="attr">y</span>: <span class="built_in">number</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">Base</span> <span class="keyword">extends</span> <span class="title class_">Selectors</span> &#123;</span><br><span class="line">    <span class="attr">event</span>: <span class="title class_">Event</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">var</span> <span class="attr">d3</span>: <span class="variable constant_">D3</span>.<span class="property">Base</span>;</span><br></pre></td></tr></table></figure><h3 id="特别声明-本文转自-古艺散人老师-，如有需要可前往原文预览查看。"><a href="#特别声明-本文转自-古艺散人老师-，如有需要可前往原文预览查看。" class="headerlink" title="特别声明: 本文转自  古艺散人老师 ，如有需要可前往原文预览查看。"></a>特别声明: 本文转自 <a href="https://github.com/lurongtao/TypeScript"> 古艺散人老师 </a>，如有需要可前往原文预览查看。</h3>]]></content>
      
      
      <categories>
          
          <category> TypeScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> TypeScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3-4、高级篇：模块解析</title>
      <link href="/article/3652/"/>
      <url>/article/3652/</url>
      
        <content type="html"><![CDATA[<h1 id="十三、模块解析"><a href="#十三、模块解析" class="headerlink" title="十三、模块解析"></a>十三、模块解析</h1><p><em>模块解析</em>是编译器用来分析一个导入什么的过程。考虑一个导入语句，如 <code>import &#123; a &#125; from &quot;moduleA&quot;；</code>为了检查对 <code>a</code> 的任何使用，编译器需要知道它到底代表什么，并需要检查它的定义 <code>moduleA</code>。</p><p>在这一点上，编译器会问 “<code>moduleA</code>的形状是什么？” 虽然这听起来很简单，但 <code>moduleA</code> 可能被定义在你自己的一个<code>.ts</code>&#x2F;<code>.tsx</code>文件中，或者在你的代码所依赖的一个 <code>.d.ts</code> 中。</p><p>首先，编译器将试图找到一个代表导入模块的文件。为了做到这一点，编译器遵循两种不同的策略之一。 <a href="https://www.typescriptlang.org/docs/handbook/module-resolution.html#classic">Classic</a> or <a href="https://www.typescriptlang.org/docs/handbook/module-resolution.html#node">Node</a>。这些策略告诉编译器去哪里寻找模块A。</p><p>如果这没有用，并且如果模块名称是非相对的（在 <code>&quot;moduleA&quot;</code>的情况下，它是相对的），那么编译器将尝试定位一个环境模块的声明。我们接下来会讨论非相对导入。</p><p>最后，如果编译器不能解决该模块，它将记录一个错误。在这种情况下，错误会是这样的：<code>error TS2307: Cannot find module &#39;moduleA&#39;</code>。</p><h2 id="13-1-相对与非相对的模块导入"><a href="#13-1-相对与非相对的模块导入" class="headerlink" title="13.1 相对与非相对的模块导入"></a>13.1 相对与非相对的模块导入</h2><p>模块导入是根据模块引用是相对的还是非相对的来解析的。</p><p>相对导入是以<code>/</code>、<code>./</code>或<code>./</code>开头的导入。一些例子包括：</p><ul><li><code>import Entry from &quot;./components/Entry&quot;;</code></li><li><code>import &#123; DefaultHeaders &#125; from &quot;../constants/http&quot;;</code></li><li><code>import &quot;/mod&quot;;</code></li></ul><p>任何其他的导入都被认为是<strong>不相关</strong>的。一些例子包括：</p><ul><li><code>import * as $ from &quot;jquery&quot;;</code></li><li><code>import &#123; Component &#125; from &quot;@angular/core&quot;;</code></li></ul><p>相对导入是相对于导入文件进行解析的，不能解析为环境模块的声明。你应该为你自己的模块使用相对导入，以保证在运行时保持其相对位置。</p><p>非相对导入可以相对于 <a href="https://www.typescriptlang.org/tsconfig#baseUrl"><code>baseUrl</code></a>来解析，也可以通过路径映射来解析，我们将在下面介绍。它们也可以解析为 <a href="https://www.typescriptlang.org/docs/handbook/modules.html#ambient-modules">环境模块声明</a>。当导入你的任何外部依赖时，使用非相对路径。</p><h2 id="13-2-模块解析策略"><a href="#13-2-模块解析策略" class="headerlink" title="13.2 模块解析策略"></a>13.2 模块解析策略</h2><p>有两种可能的模块解析策略。 <a href="https://www.typescriptlang.org/docs/handbook/module-resolution.html#node">Node</a> 和 <a href="https://www.typescriptlang.org/docs/handbook/module-resolution.html#classic">Classic</a>。你可以使用 <a href="https://www.typescriptlang.org/tsconfig#moduleResolution"><code>moduleResolution</code></a> 选项来指定模块解析策略。如果没有指定，对于<code>--module commonjs</code>，默认为 <a href="https://www.typescriptlang.org/docs/handbook/module-resolution.html#node">Node</a> ，否则为 <a href="https://www.typescriptlang.org/docs/handbook/module-resolution.html#classic">Classic</a>（包括 <a href="https://www.typescriptlang.org/tsconfig#module"><code>module</code></a> 设置为 <code>amd</code>、<code>system</code>、<code>umd</code>、<code>es2015</code>、<code>esnext</code>等时）。</p><blockquote><p>注意： node 模块解析是TypeScript社区中最常用的，并被推荐用于大多数项目。如果你在TypeScript的导入和导出中遇到解析问题，可以尝试设置 <code>moduleResolution：&quot;node&quot;</code>，看看是否能解决这个问题。</p></blockquote><h3 id="13-2-1-Classic"><a href="#13-2-1-Classic" class="headerlink" title="13.2.1 Classic"></a>13.2.1 Classic</h3><p>这曾经是TypeScript的默认解析策略。现在，这个策略主要是为了向后兼容而存在。</p><p>一个相对导入将被解析为相对于导入文件。所以在源文件&#96;&#x2F;root&#x2F;src&#x2F;folder&#x2F;A.ts中从”.&#x2F;moduleB “导入{ b }会导致以下查找。</p><p>所以在源文件 <code>/root/src/folder/A.ts</code> 中的 <code>import &#123; b &#125; from &quot;./moduleB&quot;</code> 查找路径如下：</p><ol><li><code>/root/src/folder/moduleB.ts</code></li><li><code>/root/src/folder/moduleB.d.ts</code></li></ol><p>然而，对于非相对的模块导入，编译器从包含导入文件的目录开始沿着目录树向上走，试图找到一个匹配的定义文件。</p><p>例如：</p><p>在源文件<code>/root/src/folder/A.ts</code>中，对于 <code>import &#123; b &#125; from &quot;moduleB&quot;</code>，会导致尝试在以下位置找到 <code>&quot;moduleB&quot;</code>:</p><ol><li><code>/root/src/folder/moduleB.ts</code></li><li><code>/root/src/folder/moduleB.d.ts</code></li><li><code>/root/src/moduleB.ts</code></li><li><code>/root/src/moduleB.d.ts</code></li><li><code>/root/moduleB.ts</code></li><li><code>/root/moduleB.d.ts</code></li><li><code>/moduleB.ts</code></li><li><code>/moduleB.d.ts</code></li></ol><h3 id="13-2-2-Node"><a href="#13-2-2-Node" class="headerlink" title="13.2.2 Node"></a>13.2.2 Node</h3><p>这种解析策略试图在运行时模仿 <a href="https://nodejs.org/">Node.js</a> 的模块解析机制。完整的Node.js解析算法在<a href="https://nodejs.org/api/modules.html#modules_all_together">Node.js模块文档</a>中概述。</p><ul><li><strong>Node.js如何解析模块</strong></li></ul><p>为了理解TS编译器将遵循哪些步骤，有必要对Node.js模块进行一些说明。传统上，Node.js的导入是通过调用一个名为<code>require</code>的函数来完成的。Node.js采取的行为会有所不同，这取决于require是给出相对路径还是非相对路径。</p><p>相对路径是相当直接的。举个例子，让我们考虑一个位于 <code>/root/src/moduleA.js</code> 的文件，其中包含 <code>import var x = require(&quot;./moduleB&quot;); </code>的模块导入，Node.js 按照以下顺序解析：</p><ol><li>询问名为 <code>/root/src/moduleB.js</code> 的是否存在。</li><li>询问文件夹 <code>/root/src/moduleB</code> 是否包含一个名为 <code>package.json</code> 的文件，其中指定了一个 <code>&quot;main&quot;</code> 模块。在我们的例子中，如果Node.js发现文件 <code>/root/src/moduleB/package.json</code>包含 <code>&#123; &quot;main&quot;: &quot;lib/mainModule.js&quot; &#125;</code>，那么Node.js将引用 <code>/root/src/moduleB/lib/mainModule.js</code>。</li><li>询问文件夹<code>/root/src/moduleB</code>是否包含一个名为<code>index.js</code>的文件。该文件被隐含地视为该文件夹的 “主”模块。</li></ol><p>你可以在Node.js文档中阅读更多关于 <a href="https://nodejs.org/api/modules.html#modules_file_modules">file 模块</a> 模块 <a href="https://nodejs.org/api/modules.html#modules_folders_as_modules">folder 模块</a>的内容。</p><p>然而，非相关模块名称的解析是以不同方式进行的。Node将在名为 <code>node_modules</code> 的特殊文件夹中寻找你的模块。一个 <code>node_modules</code> 文件夹可以和当前文件在同一级别，也可以在目录链中更高的位置。Node将沿着目录链向上走，寻找每个 <code>node_modules</code>，直到找到你试图加载的模块。</p><p>继续我们上面的例子，考虑一下如果 <code>/root/src/moduleA.js</code> 使用了一个非相对路径，并且有导入 <code>var x = require(&quot;moduleB&quot;);</code>。然后，Node会尝试将 <code>moduleB</code> 解析到每一个位置，直到有一个成功：</p><ol><li><p><code>/root/src/node_modules/moduleB.js</code></p></li><li><p><code>/root/src/node_modules/moduleB/package.json</code> (如果 <code>&quot;main&quot;</code> 属性存在)</p></li><li><p><code>/root/src/node_modules/moduleB/index.js</code></p></li><li><p><code>/root/node_modules/moduleB.js</code></p></li><li><p><code>/root/node_modules/moduleB/package.json</code> (如果 <code>&quot;main&quot;</code> 属性存在)</p></li><li><p><code>/root/node_modules/moduleB/index.js</code></p></li><li><p><code>/node_modules/moduleB.js</code></p></li><li><p><code>/node_modules/moduleB/package.json</code> (如果 <code>&quot;main&quot; </code>属性存在)</p></li><li><p><code>/node_modules/moduleB/index.js</code></p></li></ol><p>注意，Node.js在步骤（4）和（7）中跳出了本目录。</p><p>你可以在Node.js文档中阅读更多关于 <a href="https://nodejs.org/api/modules.html#modules_loading_from_node_modules_folders">从<code>node_modules</code>加载模块的过程</a>。</p><ul><li><strong>TypeScript如何解决模块</strong></li></ul><p>TypeScript将模仿Node.js的运行时解析策略，以便在编译时找到模块的定义文件。为了实现这一点，TypeScript在Node的解析逻辑上叠加了TypeScript源文件扩展名（<code>.ts</code>、<code>.tsx</code>和<code>.d.ts</code>）。TypeScript还将使用<code>package.json</code>中一个名为<code>types</code>的字段来达到 <code>&quot;main&quot;</code>的目的——编译器将使用它来找到 “main “定义文件来查阅。</p><p>例如，在 <code>/root/src/moduleA.ts</code> 中的 <code>import &#123; b &#125; from &quot;./moduleB&quot;</code>，这样的导入语句会导致尝试在以下位置定位<code>&quot;./moduleB&quot;</code>。</p><ol><li><code>/root/src/moduleB.ts</code></li><li><code>/root/src/moduleB.tsx</code></li><li><code>/root/src/moduleB.d.ts</code></li><li><code>/root/src/moduleB/package.json</code> (如果 <code>types</code>属性存在)</li><li><code>/root/src/moduleB/index.ts</code></li><li><code>/root/src/moduleB/index.tsx</code></li><li><code>/root/src/moduleB/index.d.ts</code></li></ol><p>回顾一下，Node.js寻找一个名为 <code>moduleB.js</code> 的文件，然后寻找一个适用的 <code>package.json</code>，然后寻找一个<code>index.js</code>。</p><p>同样地，一个非相对的导入将遵循Node.js的解析逻辑，首先查找一个文件，然后查找一个适用的文件夹。因此，在源文件<code>/root/src/moduleA.ts</code>中的 <code>import &#123; b &#125; from &quot;moduleB&quot;</code>导致以下查找：</p><ol><li><p><code>/root/src/node_modules/moduleB.ts</code></p></li><li><p><code>/root/src/node_modules/moduleB.tsx</code></p></li><li><p><code>/root/src/node_modules/moduleB.d.ts</code></p></li><li><p><code>/root/src/node_modules/moduleB/package.json</code> (如果 <code>types</code> 属性存在)</p></li><li><p><code>/root/src/node_modules/@types/moduleB.d.ts</code></p></li><li><p><code>/root/src/node_modules/moduleB/index.ts</code></p></li><li><p><code>/root/src/node_modules/moduleB/index.tsx</code></p></li><li><p><code>/root/src/node_modules/moduleB/index.d.ts</code></p></li><li><p><code>/root/node_modules/moduleB.ts</code></p></li><li><p><code>/root/node_modules/moduleB.tsx</code></p></li><li><p><code>/root/node_modules/moduleB.d.ts</code></p></li><li><p><code>/root/node_modules/moduleB/package.json</code> (如果 <code>types</code> 属性存在)</p></li><li><p><code>/root/node_modules/@types/moduleB.d.ts</code></p></li><li><p><code>/root/node_modules/moduleB/index.ts</code></p></li><li><p><code>/root/node_modules/moduleB/index.tsx</code></p></li><li><p><code>/root/node_modules/moduleB/index.d.ts</code></p></li><li><p><code>/node_modules/moduleB.ts</code></p></li><li><p><code>/node_modules/moduleB.tsx</code></p></li><li><p><code>/node_modules/moduleB.d.ts</code></p></li><li><p><code>/node_modules/moduleB/package.json</code> (如果 <code>types</code> 属性存在)</p></li><li><p><code>/node_modules/@types/moduleB.d.ts</code></p></li><li><p><code>/node_modules/moduleB/index.ts</code></p></li><li><p><code>/node_modules/moduleB/index.tsx</code></p></li><li><p><code>/node_modules/moduleB/index.d.ts</code></p></li></ol><p>不要被这里的步骤数量所吓倒——TypeScript仍然只是在步骤(9)和(17)上跳了两次目录。这其实并不比Node.js本身所做的更复杂。</p><h2 id="13-3-额外的模块解析标志"><a href="#13-3-额外的模块解析标志" class="headerlink" title="13.3 额外的模块解析标志"></a>13.3 额外的模块解析标志</h2><p>一个项目的源代码内容有时与输出的内容不一致。通常情况下，一组构建步骤会产生最终的输出。这些步骤包括将 <code>.ts</code>文件编译成<code>.js</code>，并将不同的源文件位置的依赖关系复制到一个单一的输出位置。最终的结果是，模块在运行时的名称可能与包含其定义的源文件不同。或者最终输出中的模块路径可能与编译时对应的源文件路径不一致。</p><p>TypeScript编译器有一组额外的标志，以<em>告知</em>编译器预计将发生在源文件上的转换，以生成最终的输出。</p><p>值得注意的是，编译器<em>不会</em>执行任何这些转换；它只是使用这些信息来指导解析模块，导入到其定义文件的过程。</p><h3 id="13-3-1-Base-URL"><a href="#13-3-1-Base-URL" class="headerlink" title="13.3.1 Base URL"></a>13.3.1 Base URL</h3><p>在使用AMD模块加载器的应用程序中，使用 <code>baseUrl</code> 是一种常见的做法，模块在运行时被 “部署”到一个文件夹。这些模块的来源可以在不同的目录中，但构建脚本会把它们放在一起。</p><p>设置 <code>baseUrl</code> 会通知编译器在哪里找到模块。所有非相对名称的模块导入都被认为是相对于 <code>baseUr</code>的。</p><p><em>baseUrl</em> 的值由以下两种情况决定：</p><ul><li><em>baseUrl</em> 命令行参数的值（如果给定的路径是相对的，它是基于当前目录计算的）</li><li><code>tsconfig.json</code> 中的 <em>baseUrl</em> 属性值（如果给定的路径是相对的，则根据 <code>&#39;tsconfig.json&#39;</code> 的位置计算）</li></ul><p>请注意，相对模块的导入不受设置 baseUrl 的影响，因为它们总是相对于其导入文件进行解析。</p><p>你可以在 <a href="http://requirejs.org/docs/api.html#config-baseUrl">RequireJS</a> 和 <a href="https://github.com/systemjs/systemjs/blob/main/docs/api.md">SystemJS</a> 文档中找到更多关于 baseUrl 的文档。</p><h3 id="13-3-2-路径映射"><a href="#13-3-2-路径映射" class="headerlink" title="13.3.2 路径映射"></a>13.3.2 路径映射</h3><p>有时模块并不直接位于<em>baseUrl</em>下。例如，对模块 <code>&quot;jquery &quot;</code>的导入会在运行时被翻译成 <code>&quot;node_modules/jquery/dist/jquery.slim.min.js&quot;</code>。装载器使用映射配置在运行时将模块名称映射到文件，见 <a href="http://requirejs.org/docs/api.html#config-paths">RequireJs 文档</a>和 <a href="https://github.com/systemjs/systemjs/blob/main/docs/import-maps.md">SystemJS 文档</a>。</p><p>TypeScript编译器支持使用 <code>tsconfig.json</code> 文件中的 <a href="https://www.typescriptlang.org/tsconfig#paths"><code>paths</code></a> 属性来声明这种映射关系。下面是一个例子，说明如何为<code>jquery</code>指定 <a href="https://www.typescriptlang.org/tsconfig#paths"><code>paths</code></a> 属性。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;compilerOptions&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;baseUrl&quot;</span>: <span class="string">&quot;.&quot;</span>, <span class="comment">// 如果设置 &quot;paths&quot;，这个必须指定。</span></span><br><span class="line">    <span class="string">&quot;paths&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;jquery&quot;</span>: [<span class="string">&quot;node_modules/jquery/dist/jquery&quot;</span>] <span class="comment">// 这种映射是相对于 &quot;baseUrl&quot;而指定的。</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Please notice that <a href="https://www.typescriptlang.org/tsconfig#paths"><code>paths</code></a> are resolved relative to <a href="https://www.typescriptlang.org/tsconfig#baseUrl"><code>baseUrl</code></a>. When setting <a href="https://www.typescriptlang.org/tsconfig#baseUrl"><code>baseUrl</code></a> to another value than <code>&quot;.&quot;</code>, i.e. the directory of <code>tsconfig.json</code>, the mappings must be changed accordingly. Say, you set <code>&quot;baseUrl&quot;: &quot;./src&quot;</code> in the above example, then jquery should be mapped to <code>&quot;../node_modules/jquery/dist/jquery&quot;</code>.</p><p>Using <a href="https://www.typescriptlang.org/tsconfig#paths"><code>paths</code></a> also allows for more sophisticated mappings including multiple fall back locations. Consider a project configuration where only some modules are available in one location, and the rest are in another. A build step would put them all together in one place. The project layout may look like:</p><p>请注意，<code>paths</code> 是相对于 <code>baseUrl</code> 解析的。当设置 <code>baseUrl</code> 为 <code>&quot;.&quot;</code> 以外的其他值时，即 <code>tsconfig.json</code> 的目录，映射必须相应改变。比如，你把 <code>&quot;baseUrl &quot;</code>设置为<code> &quot;./src&quot;</code>，那么jquery应该被映射到<code>&quot;../node_modules/jquery/dist/jquery&quot;</code>。</p><p>使用 <code>paths</code> 还可以实现更复杂的映射，包括多个回退位置。考虑一个项目的配置，其中只有一些模块在一个地方可用，而其他的在另一个地方。一个构建步骤会把它们放在一个地方。项目布局可能看起来像：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">projectRoot</span><br><span class="line">├── folder1</span><br><span class="line">│   ├── file1.ts (imports &#x27;folder1/file2&#x27; and &#x27;folder2/file3&#x27;)</span><br><span class="line">│   └── file2.ts</span><br><span class="line">├── generated</span><br><span class="line">│   ├── folder1</span><br><span class="line">│   └── folder2</span><br><span class="line">│       └── file3.ts</span><br><span class="line">└── tsconfig.json</span><br></pre></td></tr></table></figure><p>相应的 <code>tsconfig.json</code> 将看起来像：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;compilerOptions&quot;: &#123;</span><br><span class="line">    &quot;baseUrl&quot;: &quot;.&quot;,</span><br><span class="line">    &quot;paths&quot;: &#123;</span><br><span class="line">      &quot;*&quot;: [&quot;*&quot;, &quot;generated/*&quot;]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这告诉编译器对于任何符合 <code>&quot;*&quot;</code> 模式的模块导入（即所有值），要在两个地方寻找：</p><ol><li><code>&quot;*&quot;</code>: 意思是相同的名字不变，所以映射 <code>&lt;moduleName&gt;</code> &#x3D;&gt; <code>&lt;baseUrl&gt;/&lt;moduleName&gt;</code>。</li><li><code>&quot;generated/*&quot;</code>：意思是模块名称有一个附加的前缀 “generated”，所以<code> &lt;moduleName&gt;</code> &#x3D;&gt; <code>&lt;baseUrl&gt;/generated/&lt;moduleName&gt;</code>。</li></ol><p>按照这个逻辑，编译器将试图将这两个导入解析为这样：</p><p><code>import ‘folder1/file2’:</code></p><ol><li>模式<code>&#39;*&#39;</code>被匹配，通配符捕获了整个模块的名称</li><li>尝试列表中的第一个替换：<code>&#39;*&#39;</code> -&gt; <code>folder1/file2</code></li><li>替换的结果是非相对名称——与 <em>baseUrl</em> 结合 -&gt; <code>projectRoot/folder1/file2.ts</code>。</li><li>文件存在。完成了。</li></ol><p><code>import ‘folder2/file3’:</code></p><ol><li>模式<code>&#39;*&#39;</code>被匹配，通配符捕获了整个模块的名称</li><li>尝试列表中的第一个替换。<code>&#39;*&#39; </code>-&gt; <code>folder2/file3</code></li><li>替换的结果是非相对名称 - 与 <em>baseUrl</em> 结合 -&gt; <code>projectRoot/folder2/file3.ts</code></li><li>文件不存在，移到第二个替换项</li><li>第二个替换 <code>&#39;generated/*&#39;</code> -&gt; <code>generated/folder2/file3</code></li><li>替换的结果是非相对名称 - 与baseUrl结合 -&gt; projectRoot&#x2F;generated&#x2F;folder2&#x2F;file3.ts</li><li>文件存在。完成了。</li></ol><h3 id="13-3-3-带有rootDirs的虚拟目录"><a href="#13-3-3-带有rootDirs的虚拟目录" class="headerlink" title="13.3.3 带有rootDirs的虚拟目录"></a>13.3.3 带有<code>rootDirs</code>的虚拟目录</h3><p>有时，在编译时来自多个目录的项目源都会被合并，以生成一个单一的输出目录。这可以被看作是一组源目录创建了一个 “虚拟 “目录。</p><p>使用<code>rootDirs</code>，你可以告知编译器构成这个 “虚拟 “目录的根；因此，编译器可以在这些 “虚拟 “目录中解决相对模块的导入，就像它们被合并在一个目录中一样。</p><p>例如，考虑这个项目结构：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">src</span><br><span class="line"> └── views</span><br><span class="line">     └── view1.ts (imports &#x27;./template1&#x27;)</span><br><span class="line">     └── view2.ts</span><br><span class="line"></span><br><span class="line"> generated</span><br><span class="line"> └── templates</span><br><span class="line">         └── views</span><br><span class="line">             └── template1.ts (imports &#x27;./view2&#x27;)</span><br></pre></td></tr></table></figure><p><code>src/views</code>中的文件是一些UI控件的用户代码。<code>generated/templates</code>中的文件是由模板生成器作为构建的一部分，自动生成的UI模板绑定代码。构建步骤会将<code>/src/views</code>和<code>/generated/templates/views</code>中的文件复制到输出的同一个目录中。在运行时，一个视图可以期望它的模板存在于它的旁边，因此应该使用 <code>&quot;./template &quot;</code>这样的相对名称来导入它。</p><p>为了向编译器指定这种关系，可以使用 <code>rootDirs</code>。<code>rootDirs</code>指定了一个根的列表，这些根的内容在运行时被期望合并。所以按照我们的例子，<code>tsconfig.json</code>文件应该看起来像：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;compilerOptions&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;rootDirs&quot;</span>: [<span class="string">&quot;src/views&quot;</span>, <span class="string">&quot;generated/templates/views&quot;</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>每当编译器在其中一个 <code>rootDirs</code> 的子文件夹中看到一个相对的模块导入，它就会尝试在 <code>rootDirs</code> 的每个条目中寻找这个导入。</p><p><code>rootDirs</code>的灵活性并不局限于，指定一个在逻辑上合并的物理源代码目录的列表。提供的数组可以包括任何数量的特别的、任意的目录名称，不管它们是否存在。这允许编译器以类型安全的方式捕获复杂的捆绑和运行时特征，如条件性包含和项目特定的加载器插件。</p><p>考虑一个国际化的场景，构建工具通过插值一个特殊的路径标记，例如<code>#&#123;locale&#125;</code>，作为相对模块路径的一部分，如<code>./#&#123;locale&#125;/messages</code>，自动生成特定地域的捆绑。在这个假设的设置中，工具列举了支持的语言，将抽象的路径映射为<code>./zh/messages</code>，<code>./de/messages</code>，等等。</p><p>假设这些模块中的每一个都导出一个字符串数组。例如，<code>./zh/messages</code>可能包含：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> [<span class="string">&quot;您好吗&quot;</span>, <span class="string">&quot;很高兴认识你&quot;</span>];</span><br></pre></td></tr></table></figure><p>通过利用 <a href="https://www.typescriptlang.org/tsconfig#rootDirs"><code>rootDirs</code></a> ，我们可以告知编译器这种映射，从而允许它安全地解析<code>./#&#123;locale&#125;/messages</code>，即使该目录永远不存在。例如，在下面的<code>tsconfig.json</code>中：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;compilerOptions&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;rootDirs&quot;</span>: [<span class="string">&quot;src/zh&quot;</span>, <span class="string">&quot;src/de&quot;</span>, <span class="string">&quot;src/#&#123;locale&#125;&quot;</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译器现在会将<code>import messages from &#39;./#&#123;locale&#125;/messages&#39;</code> 解析为 <code>import messages from &#39;./zh/messages&#39;</code> ，以便于在不影响设计时间支持的情况下，以与地区无关的方式开发。</p><h2 id="13-4-追踪模块的解析"><a href="#13-4-追踪模块的解析" class="headerlink" title="13.4 追踪模块的解析"></a>13.4 追踪模块的解析</h2><p>如前所述，编译器在解析一个模块时可以访问当前文件夹以外的文件。这在诊断为什么一个模块没有被解析，或者被解析为一个不正确的定义时可能会很困难。使用 <a href="https://www.typescriptlang.org/tsconfig#traceResolution"><code>traceResolution</code></a> 启用编译器模块解析跟踪，可以深入了解模块解析过程中发生了什么。</p><p>假设我们有一个使用 <code>typescript</code> 模块的示例应用程序。<code>app.ts</code> 有一个类似 <code>import * as ts from &quot;typescript &quot;</code>的导入。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line">│   tsconfig.<span class="property">json</span></span><br><span class="line">├───node_modules</span><br><span class="line">│   └───typescript</span><br><span class="line">│       └───lib</span><br><span class="line">│               typescript.<span class="property">d</span>.<span class="property">ts</span></span><br><span class="line">└───src</span><br><span class="line">        app.<span class="property">ts</span></span><br></pre></td></tr></table></figure><p>用 <a href="https://www.typescriptlang.org/tsconfig#traceResolution"><code>traceResolution</code></a>调用编译器</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tsc --traceResolution</span><br></pre></td></tr></table></figure><p>输出结果如下：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line">======== <span class="title class_">Resolving</span> <span class="variable language_">module</span> <span class="string">&#x27;typescript&#x27;</span> <span class="keyword">from</span> <span class="string">&#x27;src/app.ts&#x27;</span>. ========</span><br><span class="line"><span class="title class_">Module</span> resolution kind is not specified, using <span class="string">&#x27;NodeJs&#x27;</span>.</span><br><span class="line"><span class="title class_">Loading</span> <span class="variable language_">module</span> <span class="string">&#x27;typescript&#x27;</span> <span class="keyword">from</span> <span class="string">&#x27;node_modules&#x27;</span> folder.</span><br><span class="line"><span class="title class_">File</span> <span class="string">&#x27;src/node_modules/typescript.ts&#x27;</span> does not exist.</span><br><span class="line"><span class="title class_">File</span> <span class="string">&#x27;src/node_modules/typescript.tsx&#x27;</span> does not exist.</span><br><span class="line"><span class="title class_">File</span> <span class="string">&#x27;src/node_modules/typescript.d.ts&#x27;</span> does not exist.</span><br><span class="line"><span class="title class_">File</span> <span class="string">&#x27;src/node_modules/typescript/package.json&#x27;</span> does not exist.</span><br><span class="line"><span class="title class_">File</span> <span class="string">&#x27;node_modules/typescript.ts&#x27;</span> does not exist.</span><br><span class="line"><span class="title class_">File</span> <span class="string">&#x27;node_modules/typescript.tsx&#x27;</span> does not exist.</span><br><span class="line"><span class="title class_">File</span> <span class="string">&#x27;node_modules/typescript.d.ts&#x27;</span> does not exist.</span><br><span class="line"><span class="title class_">Found</span> <span class="string">&#x27;package.json&#x27;</span> at <span class="string">&#x27;node_modules/typescript/package.json&#x27;</span>.</span><br><span class="line"><span class="string">&#x27;package.json&#x27;</span> has <span class="string">&#x27;types&#x27;</span> field <span class="string">&#x27;./lib/typescript.d.ts&#x27;</span> that references <span class="string">&#x27;node_modules/typescript/lib/typescript.d.ts&#x27;</span>.</span><br><span class="line"><span class="title class_">File</span> <span class="string">&#x27;node_modules/typescript/lib/typescript.d.ts&#x27;</span> exist - use it <span class="keyword">as</span> a <span class="variable language_">module</span> resolution result.</span><br><span class="line">======== <span class="title class_">Module</span> name <span class="string">&#x27;typescript&#x27;</span> was successfully resolved to <span class="string">&#x27;node_modules/typescript/lib/typescript.d.ts&#x27;</span>. ========</span><br></pre></td></tr></table></figure><p>需要注意的事项:</p><ul><li>导入的名称和位置</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">======== 从&#x27;src/app.ts&#x27;中解析模块&#x27;typescript&#x27;。 ========</span><br></pre></td></tr></table></figure><ul><li>编译器所遵循的策略是</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">未指定模块解析种类，使用&#x27;NodeJs&#x27;。</span><br></pre></td></tr></table></figure><ul><li>从npm包中加载类型</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package.json&#x27;有&#x27;typescript&#x27;字段&#x27;./lib/typescript.d.ts&#x27;，引用&#x27;node_modules/typescript/lib/typescript.d.ts&#x27;。</span><br></pre></td></tr></table></figure><ul><li>最终结果</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">======== 模块名称&#x27;typescript&#x27;已成功解析为&#x27;node_modules/typescript/lib/typescript.d.ts&#x27;。========</span><br></pre></td></tr></table></figure><h2 id="13-5-应用-noResolve"><a href="#13-5-应用-noResolve" class="headerlink" title="13.5 应用--noResolve"></a>13.5 应用<code>--noResolve</code></h2><p>通常情况下，编译器在开始编译过程之前会尝试解析所有模块的导入。每当它成功地解析了一个文件的导入，该文件就被添加到编译器以后要处理的文件集合中。</p><p><a href="https://www.typescriptlang.org/tsconfig#noResolve"><code>noResolve</code></a> 编译器选项指示编译器不要 “添加 “任何未在命令行中传递的文件到编译中。它仍然会尝试将模块解析为文件，但如果没有指定文件，它将不会被包括在内。</p><p>举个例子：</p><p><strong>app.ts</strong></p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> A <span class="keyword">from</span> <span class="string">&quot;moduleA&quot;</span>; <span class="comment">// 正确，&#x27;moduleA&#x27;在命令行上通过了</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> B <span class="keyword">from</span> <span class="string">&quot;moduleB&quot;</span>; <span class="comment">// 错误 TS2307: 无法找到模块&#x27;moduleB&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tsc app.ts moduleA.ts --noResolve</span><br></pre></td></tr></table></figure><p>使用 <code>noResolve</code> 编译<code> app.t</code> 将导致：</p><ul><li>正确地找到模块A，因为它是在命令行上传递的。</li><li>没有找到模块B，因为它没有被传递，所以出现错误。</li></ul><h2 id="13-6-常见问题"><a href="#13-6-常见问题" class="headerlink" title="13.6 常见问题"></a>13.6 常见问题</h2><p><strong>为什么排除列表中的模块仍然会被编译器选中？</strong></p><p><code>tsconfig.json</code>将一个文件夹变成一个 “项目”。如果不指定任何<code> &quot;exclude &quot;</code>或 <code>&quot;files &quot;</code>条目，包含<code>tsconfig.json</code>的文件夹及其所有子目录中的所有文件都会包括在你的编译中。如果你想排除某些文件，使用 <code>&quot;exclude&quot;</code>，如果你想指定所有的文件，而不是让编译器去查找它们，使用 <code>&quot;files&quot;</code>。</p><p>那是<code>tsconfig.json</code>的自动包含。这并没有嵌入上面讨论的模块解析。如果编译器将一个文件识别为模块导入的目标，它将被包含在编译中，不管它是否在前面的步骤中被排除。</p><p>所以要从编译中排除一个文件，你需要排除它和所有有<code>import</code>或<code>/// &lt;reference path=&quot;...&quot; /&gt;</code>指令的文件。</p><h3 id="特别声明-本文转自-古艺散人老师-，如有需要可前往原文预览查看。"><a href="#特别声明-本文转自-古艺散人老师-，如有需要可前往原文预览查看。" class="headerlink" title="特别声明: 本文转自  古艺散人老师 ，如有需要可前往原文预览查看。"></a>特别声明: 本文转自 <a href="https://github.com/lurongtao/TypeScript"> 古艺散人老师 </a>，如有需要可前往原文预览查看。</h3>]]></content>
      
      
      <categories>
          
          <category> TypeScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> TypeScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3-3、高级篇：模块</title>
      <link href="/article/36877/"/>
      <url>/article/36877/</url>
      
        <content type="html"><![CDATA[<h1 id="十二、模块"><a href="#十二、模块" class="headerlink" title="十二、模块"></a>十二、模块</h1><p>从ECMAScript 2015开始，JavaScript有一个模块的概念。TypeScript也有这个概念。</p><p>模块在自己的范围内执行，而不是在全局范围内；这意味着在模块中声明的变量、函数、类等在模块外是不可见的，除非它们被明确地使用其中一种 <a href="https://www.typescriptlang.org/docs/handbook/modules.html#export">导出形式</a>导出。相反，要使用从不同模块导出的变量、函数、类、接口等，必须使用<a href="https://www.typescriptlang.org/docs/handbook/modules.html#import">导入的形式</a>将其导入。</p><p>模块是声明性的；模块之间的关系是在文件级别上以导入和导出的方式指定的。</p><p>模块使用模块加载器相互导入。在运行时，模块加载器负责在执行一个模块之前定位和执行该模块的所有依赖关系。在JavaScript中使用的著名的模块加载器是Node.js的<a href="https://wikipedia.org/wiki/CommonJS">CommonJS</a> 模块的加载器和Web应用程序中<a href="https://github.com/amdjs/amdjs-api/blob/master/AMD.md">AMD</a>模块的 <a href="http://requirejs.org/">RequireJS</a> 加载器。</p><p>在TypeScript中，就像在ECMAScript 2015中一样，任何包含顶级 <code>import</code> 或 <code>export</code> 的文件都被认为是一个模块。相反，一个没有任何顶级 <code>import</code> 或 <code>export</code> 声明的文件被视为一个脚本，其内容可在全局范围内使用（因此也可用于模块）。</p><h2 id="12-1-导出"><a href="#12-1-导出" class="headerlink" title="12.1 导出"></a>12.1 导出</h2><h3 id="12-1-1-导出声明"><a href="#12-1-1-导出声明" class="headerlink" title="12.1.1 导出声明"></a>12.1.1 导出声明</h3><p>任何声明（如变量、函数、类、类型别名或接口）都可以通过添加 <code>export</code> 关键字而被导出。</p><p><strong>StringValidator.ts</strong></p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">StringValidator</span> &#123;</span><br><span class="line">  <span class="title function_">isAcceptable</span>(<span class="attr">s</span>: <span class="built_in">string</span>): <span class="built_in">boolean</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>ZipCodeValidator.ts</strong></p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">StringValidator</span> &#125; <span class="keyword">from</span> <span class="string">&quot;./StringValidator&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> numberRegexp = <span class="regexp">/^[0-9]+$/</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">ZipCodeValidator</span> <span class="keyword">implements</span> <span class="title class_">StringValidator</span> &#123;</span><br><span class="line">  <span class="title function_">isAcceptable</span>(<span class="params">s: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> s.<span class="property">length</span> === <span class="number">5</span> &amp;&amp; numberRegexp.<span class="title function_">test</span>(s);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="12-1-2-导出别名"><a href="#12-1-2-导出别名" class="headerlink" title="12.1.2 导出别名"></a>12.1.2 导出别名</h3><p>当导出需要为调用者重新命名时，导出语句很方便，所以上面的例子可以写成：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ZipCodeValidator</span> <span class="keyword">implements</span> <span class="title class_">StringValidator</span> &#123;</span><br><span class="line">  <span class="title function_">isAcceptable</span>(<span class="params">s: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> s.<span class="property">length</span> === <span class="number">5</span> &amp;&amp; numberRegexp.<span class="title function_">test</span>(s);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> &#123; <span class="title class_">ZipCodeValidator</span> &#125;;</span><br><span class="line"><span class="keyword">export</span> &#123; <span class="title class_">ZipCodeValidator</span> <span class="keyword">as</span> mainValidator &#125;;</span><br></pre></td></tr></table></figure><h3 id="12-1-3-二次导出"><a href="#12-1-3-二次导出" class="headerlink" title="12.1.3 二次导出"></a>12.1.3 二次导出</h3><p>通常情况下，模块会扩展其他模块，并部分地暴露出它们的一些特性。一个二次导出并不在本地导入，也不引入本地变量。</p><p><strong>ParseIntBasedZipCodeValidator.ts</strong></p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">ParseIntBasedZipCodeValidator</span> &#123;</span><br><span class="line">  <span class="title function_">isAcceptable</span>(<span class="params">s: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> s.<span class="property">length</span> === <span class="number">5</span> &amp;&amp; <span class="built_in">parseInt</span>(s).<span class="title function_">toString</span>() === s;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 导出原始验证器但重新命名</span></span><br><span class="line"><span class="keyword">export</span> &#123; <span class="title class_">ZipCodeValidator</span> <span class="keyword">as</span> <span class="title class_">RegExpBasedZipCodeValidator</span> &#125; <span class="keyword">from</span> <span class="string">&quot;./ZipCodeValidator&quot;</span>;</span><br></pre></td></tr></table></figure><p>另外，一个模块可以包裹一个或多个模块，并使用 <code>export * from &quot;module &quot;</code>语法组合它们的所有导出。</p><p><strong>AllValidators.ts</strong></p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> * <span class="keyword">from</span> <span class="string">&quot;./StringValidator&quot;</span>; <span class="comment">// 导出&#x27;StringValidator&#x27;接口</span></span><br><span class="line"><span class="keyword">export</span> * <span class="keyword">from</span> <span class="string">&quot;./ZipCodeValidator&quot;</span>; <span class="comment">// 导出&#x27;ZipCodeValidator&#x27;类和&#x27;numberRegexp&#x27;常量值</span></span><br><span class="line"><span class="keyword">export</span> * <span class="keyword">from</span> <span class="string">&quot;./ParseIntBasedZipCodeValidator&quot;</span>; <span class="comment">//  从&#x27;ZipCodeValidator.ts&#x27;模块导出&#x27;ParseIntBasedZipCodeValidator&#x27;类并重新导出&#x27;RegExpBasedZipCodeValidator&#x27;作为&#x27;ZipCodeValidator&#x27;类的别名。</span></span><br></pre></td></tr></table></figure><h2 id="12-4-导入"><a href="#12-4-导入" class="headerlink" title="12.4 导入"></a>12.4 导入</h2><p>导入和从模块中导出一样简单。导入一个导出的声明是通过使用下面的一个导入表格完成的。</p><h3 id="12-4-1-从一个模块中导入一个单一的导出"><a href="#12-4-1-从一个模块中导入一个单一的导出" class="headerlink" title="12.4.1 从一个模块中导入一个单一的导出"></a>12.4.1 从一个模块中导入一个单一的导出</h3><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ZipCodeValidator</span> &#125; <span class="keyword">from</span> <span class="string">&quot;./ZipCodeValidator&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> myValidator = <span class="keyword">new</span> <span class="title class_">ZipCodeValidator</span>();</span><br></pre></td></tr></table></figure><p>导入也可以被重新命名：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ZipCodeValidator</span> <span class="keyword">as</span> <span class="variable constant_">ZCV</span> &#125; <span class="keyword">from</span> <span class="string">&quot;./ZipCodeValidator&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> myValidator = <span class="keyword">new</span> <span class="title function_">ZCV</span>();</span><br></pre></td></tr></table></figure><h3 id="12-4-2-将整个模块导入到一个变量中，并使用它来访问模块的出口。"><a href="#12-4-2-将整个模块导入到一个变量中，并使用它来访问模块的出口。" class="headerlink" title="12.4.2 将整个模块导入到一个变量中，并使用它来访问模块的出口。"></a>12.4.2 将整个模块导入到一个变量中，并使用它来访问模块的出口。</h3><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> validator <span class="keyword">from</span> <span class="string">&quot;./ZipCodeValidator&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> myValidator = <span class="keyword">new</span> validator.<span class="title class_">ZipCodeValidator</span>();</span><br></pre></td></tr></table></figure><h3 id="12-4-3-导入一个只有副作用的模块"><a href="#12-4-3-导入一个只有副作用的模块" class="headerlink" title="12.4.3 导入一个只有副作用的模块"></a>12.4.3 导入一个只有副作用的模块</h3><p>虽然不是推荐的做法，但有些模块设置了一些全局状态，可以被其他模块使用。这些模块可能没有任何出口，或者消费者对它们的任何出口不感兴趣。要导入这些模块，请使用：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;./my-module.js&quot;</span>;</span><br></pre></td></tr></table></figure><p>在TypeScript 3.8之前，你可以使用 <code>import</code> 导入一个类型。在TypeScript 3.8中，你可以使用 <code>import</code> 语句导入一个类型，或者使用 <code>import type</code>。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 重复使用相同的 import</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">APIResponseType</span> &#125; <span class="keyword">from</span> <span class="string">&quot;./api&quot;</span>;</span><br><span class="line"><span class="comment">// 明确使用导入类型</span></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">type</span> &#123; <span class="title class_">APIResponseType</span> &#125; <span class="keyword">from</span> <span class="string">&quot;./api&quot;</span>;</span><br></pre></td></tr></table></figure><p><code>import type</code> 总是被保证从你的JavaScript中删除，而且像Babel这样的工具可以通过 <a href="https://www.typescriptlang.org/tsconfig#isolatedModules"><code>isolatedModules</code></a> 编译器标志对你的代码做出更好的假设。你可以在<a href="https://devblogs.microsoft.com/typescript/announcing-typescript-3-8-beta/#type-only-imports-exports">3.8 release notes</a> 的发行说明中阅读更多内容。</p><h2 id="12-5-默认输出"><a href="#12-5-默认输出" class="headerlink" title="12.5 默认输出"></a>12.5 默认输出</h2><p>每个模块都可以选择输出一个 <code>default</code> 输出。默认输出用关键字 <code>default</code>标记；每个模块只能有一个 <code>default</code>输出。<code>default</code> 输出使用不同的导入形式导入。</p><p><code>default</code> 导出真的很方便。例如，像jQuery这样的库可能有一个默认导出的jQuery或<code>$</code>，我们可能也会以 <code>$</code>或jQuery的名字导入。</p><p><a href="https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/types/jquery/JQuery.d.ts">JQuery.d.ts</a></p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="keyword">let</span> <span class="attr">$</span>: <span class="title class_">JQuery</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> $;</span><br></pre></td></tr></table></figure><p><strong>App.ts</strong></p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> $ <span class="keyword">from</span> <span class="string">&quot;jquery&quot;</span>;</span><br><span class="line">$(<span class="string">&quot;button.continue&quot;</span>).<span class="title function_">html</span>(<span class="string">&quot;Next Step...&quot;</span>);</span><br></pre></td></tr></table></figure><p>类和函数声明可以直接作为默认导出而编写。默认导出的类和函数声明名称是可选的。</p><p><strong>ZipCodeValidator.ts</strong></p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">ZipCodeValidator</span> &#123;</span><br><span class="line">  <span class="keyword">static</span> numberRegexp = <span class="regexp">/^[0-9]+$/</span>;</span><br><span class="line">  <span class="title function_">isAcceptable</span>(<span class="params">s: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> s.<span class="property">length</span> === <span class="number">5</span> &amp;&amp; <span class="title class_">ZipCodeValidator</span>.<span class="property">numberRegexp</span>.<span class="title function_">test</span>(s);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Test.ts</strong></p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> validator <span class="keyword">from</span> <span class="string">&quot;./ZipCodeValidator&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> myValidator = <span class="keyword">new</span> <span class="title function_">validator</span>();</span><br></pre></td></tr></table></figure><p>或者：</p><p><strong>StaticZipCodeValidator.ts</strong></p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> numberRegexp = <span class="regexp">/^[0-9]+$/</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> (<span class="params">s: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> s.<span class="property">length</span> === <span class="number">5</span> &amp;&amp; numberRegexp.<span class="title function_">test</span>(s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Test.ts</strong></p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> validate <span class="keyword">from</span> <span class="string">&quot;./StaticZipCodeValidator&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> strings = [<span class="string">&quot;Hello&quot;</span>, <span class="string">&quot;98052&quot;</span>, <span class="string">&quot;101&quot;</span>];</span><br><span class="line"><span class="comment">// 使用函数验证</span></span><br><span class="line">strings.<span class="title function_">forEach</span>(<span class="function">(<span class="params">s</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`&quot;<span class="subst">$&#123;s&#125;</span>&quot; <span class="subst">$&#123;validate(s) ? <span class="string">&quot;matches&quot;</span> : <span class="string">&quot;does not match&quot;</span>&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><code>default</code> 出口也可以只是数值。</p><p><strong>OneTwoThree.ts</strong></p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="string">&quot;123&quot;</span>;</span><br></pre></td></tr></table></figure><p><strong>Log.ts</strong></p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> num <span class="keyword">from</span> <span class="string">&quot;./OneTwoThree&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num); <span class="comment">// &quot;123&quot;</span></span><br></pre></td></tr></table></figure><h2 id="12-6-as-x-导出全部"><a href="#12-6-as-x-导出全部" class="headerlink" title="12.6 as x 导出全部"></a>12.6 <code>as x</code> 导出全部</h2><p>在TypeScript 3.8中，你可以使用<code>export * as ns</code>作为一种速记方法来重新导出另一个有名字的模块。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> * <span class="keyword">as</span> utilities <span class="keyword">from</span> <span class="string">&quot;./utilities&quot;</span>;</span><br></pre></td></tr></table></figure><p>这从一个模块中获取所有的依赖性，并使其成为一个导出的字段，你可以像这样导入它：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; utilities &#125; <span class="keyword">from</span> <span class="string">&quot;./index&quot;</span>;</span><br></pre></td></tr></table></figure><h2 id="12-7-export-与import-require"><a href="#12-7-export-与import-require" class="headerlink" title="12.7 export = 与import = require()"></a>12.7 <code>export =</code> 与<code>import = require()</code></h2><p>CommonJS和AMD通常都有一个 <code>exports</code> 对象的概念，它包含了一个模块的所有出口。</p><p>它们也支持用一个自定义的单一对象来替换 <code>exports</code> 对象。默认的 exports 是为了作为这种行为的替代；然而，两者是不兼容的。TypeScript 支持 <code>export =</code> 来模拟传统的 CommonJS 和 AMD 工作流程。</p><p><code>export =</code> 语法指定了一个从模块导出的单一对象。这可以是一个类，接口，命名空间，函数，或枚举。</p><p>当使用<code>export =</code>导出一个模块时，必须使用TypeScript特定的<code>import module = require(&quot;module&quot;)</code>来导入模块。</p><p><strong>ZipCodeValidator.ts</strong></p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> numberRegexp = <span class="regexp">/^[0-9]+$/</span>;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ZipCodeValidator</span> &#123;</span><br><span class="line">  <span class="title function_">isAcceptable</span>(<span class="params">s: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> s.<span class="property">length</span> === <span class="number">5</span> &amp;&amp; numberRegexp.<span class="title function_">test</span>(s);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> = <span class="title class_">ZipCodeValidator</span>;</span><br></pre></td></tr></table></figure><p><strong>Test.ts</strong></p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> zip = <span class="built_in">require</span>(<span class="string">&quot;./ZipCodeValidator&quot;</span>);</span><br><span class="line"><span class="comment">// 一些可以尝试的样本</span></span><br><span class="line"><span class="keyword">let</span> strings = [<span class="string">&quot;Hello&quot;</span>, <span class="string">&quot;98052&quot;</span>, <span class="string">&quot;101&quot;</span>];</span><br><span class="line"><span class="comment">// 要使用的验证器</span></span><br><span class="line"><span class="keyword">let</span> validator = <span class="keyword">new</span> <span class="title function_">zip</span>();</span><br><span class="line"><span class="comment">// 显示每个字符串是否通过每个验证器</span></span><br><span class="line">strings.<span class="title function_">forEach</span>(<span class="function">(<span class="params">s</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(</span><br><span class="line">    <span class="string">`&quot;<span class="subst">$&#123;s&#125;</span>&quot; - <span class="subst">$&#123;validator.isAcceptable(s) ? <span class="string">&quot;matches&quot;</span> : <span class="string">&quot;does not match&quot;</span>&#125;</span>`</span>,</span><br><span class="line">  );</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="12-8-模块的代码生成"><a href="#12-8-模块的代码生成" class="headerlink" title="12.8 模块的代码生成"></a>12.8 模块的代码生成</h2><p>根据编译时指定的模块目标，编译器将为Node.js（<a href="http://wiki.commonjs.org/wiki/CommonJS">CommonJS</a>）、require.js（<a href="https://github.com/amdjs/amdjs-api/wiki/AMD">AMD</a>）、 <a href="https://github.com/umdjs/umd">UMD</a>、 <a href="https://github.com/systemjs/systemjs">SystemJS</a>或<a href="http://www.ecma-international.org/ecma-262/6.0/#sec-modules">ECMAScript 2015本地模块</a>（ES6）模块加载系统生成相应的代码。关于生成的代码中的 <code>define</code>、<code>require</code>和<code>register</code>调用的更多信息，请查阅每个模块加载器的文档。</p><p>这个简单的例子显示了，导入和导出过程中使用的名称，是如何被翻译成模块加载代码的。</p><p><strong>SimpleModule.ts</strong></p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> m = <span class="built_in">require</span>(<span class="string">&quot;mod&quot;</span>);</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> t = m.<span class="property">something</span> + <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p><strong>AMD &#x2F; RequireJS SimpleModule.js</strong></p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="title function_">define</span>([<span class="string">&quot;require&quot;</span>, <span class="string">&quot;exports&quot;</span>, <span class="string">&quot;./mod&quot;</span>], <span class="keyword">function</span> (<span class="params"><span class="built_in">require</span>, <span class="built_in">exports</span>, mod_1</span>) &#123;</span><br><span class="line">  <span class="built_in">exports</span>.<span class="property">t</span> = mod_1.<span class="property">something</span> + <span class="number">1</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>CommonJS &#x2F; Node SimpleModule.js</strong></p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> mod_1 = <span class="built_in">require</span>(<span class="string">&quot;./mod&quot;</span>);</span><br><span class="line"><span class="built_in">exports</span>.<span class="property">t</span> = mod_1.<span class="property">something</span> + <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p><strong>UMD SimpleModule.js</strong></p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line">(<span class="keyword">function</span> (<span class="params">factory</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="variable language_">module</span> === <span class="string">&quot;object&quot;</span> &amp;&amp; <span class="keyword">typeof</span> <span class="variable language_">module</span>.<span class="property">exports</span> === <span class="string">&quot;object&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> v = <span class="title function_">factory</span>(<span class="built_in">require</span>, <span class="built_in">exports</span>);</span><br><span class="line">    <span class="keyword">if</span> (v !== <span class="literal">undefined</span>) <span class="variable language_">module</span>.<span class="property">exports</span> = v;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> define === <span class="string">&quot;function&quot;</span> &amp;&amp; define.<span class="property">amd</span>) &#123;</span><br><span class="line">    <span class="title function_">define</span>([<span class="string">&quot;require&quot;</span>, <span class="string">&quot;exports&quot;</span>, <span class="string">&quot;./mod&quot;</span>], factory);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)(<span class="keyword">function</span> (<span class="params"><span class="built_in">require</span>, <span class="built_in">exports</span></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> mod_1 = <span class="built_in">require</span>(<span class="string">&quot;./mod&quot;</span>);</span><br><span class="line">  <span class="built_in">exports</span>.<span class="property">t</span> = mod_1.<span class="property">something</span> + <span class="number">1</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>System SimpleModule.js</strong></p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="title class_">System</span>.<span class="title function_">register</span>([<span class="string">&quot;./mod&quot;</span>], <span class="keyword">function</span> (<span class="params">exports_1</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> mod_1;</span><br><span class="line">  <span class="keyword">var</span> t;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">setters</span>: [</span><br><span class="line">      <span class="keyword">function</span> (<span class="params">mod_1_1</span>) &#123;</span><br><span class="line">        mod_1 = mod_1_1;</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">execute</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      exports_1(<span class="string">&quot;t&quot;</span>, (t = mod_1.<span class="property">something</span> + <span class="number">1</span>));</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>Native ECMAScript 2015 modules SimpleModule.js</strong></p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; something &#125; <span class="keyword">from</span> <span class="string">&quot;./mod&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">var</span> t = something + <span class="number">1</span>;</span><br></pre></td></tr></table></figure><h2 id="12-9-案例"><a href="#12-9-案例" class="headerlink" title="12.9 案例"></a>12.9 案例</h2><p>下面，我们整合了之前例子中使用的Validator实现，只从每个模块导出一个命名的导出。</p><p>要进行编译，我们必须在命令行中指定一个模块目标。对于Node.js，使用<code>--module commonjs</code>；对于require.js，使用<code>--module amd</code>。比如说：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line">tsc --<span class="variable language_">module</span> commonjs <span class="title class_">Test</span>.<span class="property">ts</span></span><br></pre></td></tr></table></figure><p>编译时，每个模块将成为一个单独的<code>.js</code>文件。与参考标签一样，编译器将遵循 <code>import</code> 语句来编译依赖的文件。</p><p><strong>Validation.ts</strong></p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">StringValidator</span> &#123;</span><br><span class="line">  <span class="title function_">isAcceptable</span>(<span class="attr">s</span>: <span class="built_in">string</span>): <span class="built_in">boolean</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>LettersOnlyValidator.ts</strong></p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">StringValidator</span> &#125; <span class="keyword">from</span> <span class="string">&quot;./Validation&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> lettersRegexp = <span class="regexp">/^[A-Za-z]+$/</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">LettersOnlyValidator</span> <span class="keyword">implements</span> <span class="title class_">StringValidator</span> &#123;</span><br><span class="line">  <span class="title function_">isAcceptable</span>(<span class="params">s: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> lettersRegexp.<span class="title function_">test</span>(s);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>ZipCodeValidator.ts</strong></p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">StringValidator</span> &#125; <span class="keyword">from</span> <span class="string">&quot;./Validation&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> numberRegexp = <span class="regexp">/^[0-9]+$/</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">ZipCodeValidator</span> <span class="keyword">implements</span> <span class="title class_">StringValidator</span> &#123;</span><br><span class="line">  <span class="title function_">isAcceptable</span>(<span class="params">s: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> s.<span class="property">length</span> === <span class="number">5</span> &amp;&amp; numberRegexp.<span class="title function_">test</span>(s);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Test.ts</strong></p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">StringValidator</span> &#125; <span class="keyword">from</span> <span class="string">&quot;./Validation&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ZipCodeValidator</span> &#125; <span class="keyword">from</span> <span class="string">&quot;./ZipCodeValidator&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">LettersOnlyValidator</span> &#125; <span class="keyword">from</span> <span class="string">&quot;./LettersOnlyValidator&quot;</span>;</span><br><span class="line"><span class="comment">// 一些可以尝试的样本</span></span><br><span class="line"><span class="keyword">let</span> strings = [<span class="string">&quot;Hello&quot;</span>, <span class="string">&quot;98052&quot;</span>, <span class="string">&quot;101&quot;</span>];</span><br><span class="line"><span class="comment">// 要使用的验证器</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">validators</span>: &#123; [<span class="attr">s</span>: <span class="built_in">string</span>]: <span class="title class_">StringValidator</span> &#125; = &#123;&#125;;</span><br><span class="line">validators[<span class="string">&quot;ZIP code&quot;</span>] = <span class="keyword">new</span> <span class="title class_">ZipCodeValidator</span>();</span><br><span class="line">validators[<span class="string">&quot;Letters only&quot;</span>] = <span class="keyword">new</span> <span class="title class_">LettersOnlyValidator</span>();</span><br><span class="line"><span class="comment">// 显示每个字符串是否通过每个验证器</span></span><br><span class="line">strings.<span class="title function_">forEach</span>(<span class="function">(<span class="params">s</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> name <span class="keyword">in</span> validators) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(</span><br><span class="line">      <span class="string">`&quot;<span class="subst">$&#123;s&#125;</span>&quot; - <span class="subst">$&#123;</span></span></span><br><span class="line"><span class="subst"><span class="string">        validators[name].isAcceptable(s) ? <span class="string">&quot;matches&quot;</span> : <span class="string">&quot;does not match&quot;</span></span></span></span><br><span class="line"><span class="subst"><span class="string">      &#125;</span> <span class="subst">$&#123;name&#125;</span>`</span>,</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="12-10-可选模块加载和其他高级加载场景"><a href="#12-10-可选模块加载和其他高级加载场景" class="headerlink" title="12.10 可选模块加载和其他高级加载场景"></a>12.10 可选模块加载和其他高级加载场景</h2><p>在某些情况下，你可能只想在某些条件下加载一个模块。在TypeScript中，我们可以使用下面所示的模式来实现这个和其他高级的加载场景，直接调用模块加载器而不失去类型安全。</p><p>编译器会检测每个模块是否在编译好的JavaScript中被使用。如果一个模块的标识符只被用作类型注释的一部分，而从未被用作表达式，那么就不会为该模块编译 <code>require</code> 调用。这种对未使用的引用的消除是一种很好的性能优化，同时也允许对这些模块进行选择性加载。</p><p>该模式的核心思想是，<code>import id = require(&quot;...&quot;) </code>语句使我们能够访问模块所暴露的类型。模块加载器（通过<code>require</code>）被动态地调用，如下面的<code>if</code>块所示。这样就利用了引用隔离的优化，使模块只在需要时才被加载。为了使这种模式发挥作用，重要的是通过 <code>import</code> 定义的符号只在类型位置使用（也就是说，决不在会被编译到JavaScript的位置）。</p><p>为了维护类型安全，我们可以使用 <code>typeof</code> 关键字。<code>typeof</code> 关键字在类型位置上使用时，会产生一个值的类型，在这里是模块的类型。</p><ul><li><strong>Node.js中的动态模块加载</strong></li></ul><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="keyword">function</span> <span class="title function_">require</span>(<span class="params">moduleName: <span class="built_in">string</span></span>): <span class="built_in">any</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ZipCodeValidator</span> <span class="keyword">as</span> <span class="title class_">Zip</span> &#125; <span class="keyword">from</span> <span class="string">&quot;./ZipCodeValidator&quot;</span>;</span><br><span class="line"><span class="keyword">if</span> (needZipValidation) &#123;</span><br><span class="line">  <span class="keyword">let</span> <span class="title class_">ZipCodeValidator</span>: <span class="keyword">typeof</span> <span class="title class_">Zip</span> = <span class="built_in">require</span>(<span class="string">&quot;./ZipCodeValidator&quot;</span>);</span><br><span class="line">  <span class="keyword">let</span> validator = <span class="keyword">new</span> <span class="title class_">ZipCodeValidator</span>();</span><br><span class="line">  <span class="keyword">if</span> (validator.<span class="title function_">isAcceptable</span>(<span class="string">&quot;...&quot;</span>)) &#123;</span><br><span class="line">    <span class="comment">/* ... */</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>例子：在require.js中动态加载模块</strong></li></ul><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="keyword">function</span> <span class="title function_">require</span>(<span class="params"></span></span><br><span class="line"><span class="params">  moduleNames: <span class="built_in">string</span>[],</span></span><br><span class="line"><span class="params">  onLoad: (...args: <span class="built_in">any</span>[]) =&gt; <span class="built_in">void</span>,</span></span><br><span class="line"><span class="params"></span>): <span class="built_in">void</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> <span class="title class_">Zip</span> <span class="keyword">from</span> <span class="string">&quot;./ZipCodeValidator&quot;</span>;</span><br><span class="line"><span class="keyword">if</span> (needZipValidation) &#123;</span><br><span class="line">  <span class="built_in">require</span>([<span class="string">&quot;./ZipCodeValidator&quot;</span>], <span class="function">(<span class="params">ZipCodeValidator: <span class="keyword">typeof</span> Zip</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> validator = <span class="keyword">new</span> <span class="title class_">ZipCodeValidator</span>.<span class="title class_">ZipCodeValidator</span>();</span><br><span class="line">    <span class="keyword">if</span> (validator.<span class="title function_">isAcceptable</span>(<span class="string">&quot;...&quot;</span>)) &#123;</span><br><span class="line">      <span class="comment">/* ... */</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>例子：System.js中的动态模块加载</strong></li></ul><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="keyword">const</span> <span class="title class_">System</span>: <span class="built_in">any</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ZipCodeValidator</span> <span class="keyword">as</span> <span class="title class_">Zip</span> &#125; <span class="keyword">from</span> <span class="string">&quot;./ZipCodeValidator&quot;</span>;</span><br><span class="line"><span class="keyword">if</span> (needZipValidation) &#123;</span><br><span class="line">  <span class="title class_">System</span>.<span class="keyword">import</span>(<span class="string">&quot;./ZipCodeValidator&quot;</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">ZipCodeValidator: <span class="keyword">typeof</span> Zip</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> x = <span class="keyword">new</span> <span class="title class_">ZipCodeValidator</span>();</span><br><span class="line">    <span class="keyword">if</span> (x.<span class="title function_">isAcceptable</span>(<span class="string">&quot;...&quot;</span>)) &#123;</span><br><span class="line">      <span class="comment">/* ... */</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="12-11-与其他JavaScript库一起工作"><a href="#12-11-与其他JavaScript库一起工作" class="headerlink" title="12.11 与其他JavaScript库一起工作"></a>12.11 与其他JavaScript库一起工作</h2><p>为了描述不是用TypeScript编写的库的形状，我们需要声明该库所暴露的API。</p><p>我们把不定义实现的声明称为 “环境”。通常情况下，这些都是在<code>.d.ts</code>文件中定义的。如果你熟悉C&#x2F;C++，你可以把它们看作是<code>.h</code>文件。让我们来看看几个例子。</p><h3 id="12-11-1-环境模块"><a href="#12-11-1-环境模块" class="headerlink" title="12.11.1 环境模块"></a>12.11.1 环境模块</h3><p>在Node.js中，大多数任务是通过加载一个或多个模块完成的。我们可以在自己的<code>.d.ts</code>文件中定义每个模块，并进行顶层导出声明，但把它们写成一个更大的<code>.d.ts</code>文件会更方便。要做到这一点，我们使用一个类似于环境命名空间的结构，但我们使用 <code>module</code> 关键字和引号的模块名称，这将在以后的导入中可用。比如说：</p><p><strong>node.d.ts (简要摘录)</strong></p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="variable language_">module</span> <span class="string">&quot;url&quot;</span> &#123;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">Url</span> &#123;</span><br><span class="line">    protocol?: <span class="built_in">string</span>;</span><br><span class="line">    hostname?: <span class="built_in">string</span>;</span><br><span class="line">    pathname?: <span class="built_in">string</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">parse</span>(<span class="params"></span></span><br><span class="line"><span class="params">    urlStr: <span class="built_in">string</span>,</span></span><br><span class="line"><span class="params">    parseQueryString?,</span></span><br><span class="line"><span class="params">    slashesDenoteHost?,</span></span><br><span class="line"><span class="params">  </span>): <span class="title class_">Url</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">declare</span> <span class="variable language_">module</span> <span class="string">&quot;path&quot;</span> &#123;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">normalize</span>(<span class="params">p: <span class="built_in">string</span></span>): <span class="built_in">string</span>;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">join</span>(<span class="params">...paths: <span class="built_in">any</span>[]</span>): <span class="built_in">string</span>;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">var</span> <span class="attr">sep</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在我们可以 <code>/// &lt;reference&gt; node.d.ts</code>，然后使用 <code>import url = require(&quot;url&quot;); </code>或 <code>import * as URL from &quot;url&quot;</code>加载模块。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference path=&quot;node.d.ts&quot;/&gt;</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> <span class="variable constant_">URL</span> <span class="keyword">from</span> <span class="string">&quot;url&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> myUrl = <span class="variable constant_">URL</span>.<span class="title function_">parse</span>(<span class="string">&quot;https://www.typescriptlang.org&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="12-11-2-速记的环境模块"><a href="#12-11-2-速记的环境模块" class="headerlink" title="12.11.2 速记的环境模块"></a>12.11.2 速记的环境模块</h3><p>如果你不想在使用一个新模块之前花时间写出声明，你可以使用速记声明来快速入门。</p><p><strong>declarations.d.ts</strong></p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="variable language_">module</span> <span class="string">&quot;hot-new-module&quot;</span>;</span><br></pre></td></tr></table></figure><p>所有来自速记模块的导入都将具有任意类型。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> x, &#123; y &#125; <span class="keyword">from</span> <span class="string">&quot;hot-new-module&quot;</span>;</span><br><span class="line"><span class="title function_">x</span>(y);</span><br></pre></td></tr></table></figure><h3 id="12-11-3-通配符模块的声明"><a href="#12-11-3-通配符模块的声明" class="headerlink" title="12.11.3 通配符模块的声明"></a>12.11.3 通配符模块的声明</h3><p>一些模块加载器，如 <a href="https://github.com/systemjs/systemjs/blob/master/docs/module-types.md">SystemJS</a> 和 <a href="https://github.com/amdjs/amdjs-api/blob/master/LoaderPlugins.md">AMD</a> 允许导入非JavaScript内容。这些模块通常使用一个前缀或后缀来表示特殊的加载语义。通配符模块声明可以用来涵盖这些情况。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="variable language_">module</span> <span class="string">&quot;*!text&quot;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="attr">content</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span> content;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 有些人则反其道而行之。</span></span><br><span class="line"><span class="keyword">declare</span> <span class="variable language_">module</span> <span class="string">&quot;json!*&quot;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="attr">value</span>: <span class="built_in">any</span>;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span> value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在你可以导入符合<code> &quot;*!text &quot;</code>或<code> &quot;json!*&quot;</code>的东西。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> fileContent <span class="keyword">from</span> <span class="string">&quot;./xyz.txt!text&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> data <span class="keyword">from</span> <span class="string">&quot;json!http://example.com/data.json&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(data, fileContent);</span><br></pre></td></tr></table></figure><h3 id="12-11-4-UMD-模块"><a href="#12-11-4-UMD-模块" class="headerlink" title="12.11.4 UMD 模块"></a>12.11.4 UMD 模块</h3><p>有些库被设计成可以在许多模块加载器中使用，或者没有模块加载（全局变量）也可以。这些被称为UMD模块。这些库可以通过导入或全局变量访问。比如说：</p><p><strong>math-lib.d.ts</strong></p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">isPrime</span>(<span class="params">x: <span class="built_in">number</span></span>): <span class="built_in">boolean</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">as</span> <span class="keyword">namespace</span> mathLib;</span><br></pre></td></tr></table></figure><p>然后，该库可以作为模块内的导入使用：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; isPrime &#125; <span class="keyword">from</span> <span class="string">&quot;math-lib&quot;</span>;</span><br><span class="line"><span class="title function_">isPrime</span>(<span class="number">2</span>);</span><br><span class="line">mathLib.<span class="title function_">isPrime</span>(<span class="number">2</span>); <span class="comment">// 错误：不能从模块内部使用全局定义</span></span><br></pre></td></tr></table></figure><p>它也可以作为一个全局变量使用，但只能在一个脚本中使用。(脚本是一个没有导入或导出的文件）。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line">mathLib.<span class="title function_">isPrime</span>(<span class="number">2</span>);</span><br></pre></td></tr></table></figure><h2 id="12-12-构建模块的指导意见"><a href="#12-12-构建模块的指导意见" class="headerlink" title="12.12 构建模块的指导意见"></a>12.12 构建模块的指导意见</h2><h3 id="12-12-1-尽可能接近顶层导出-export"><a href="#12-12-1-尽可能接近顶层导出-export" class="headerlink" title="12.12.1 尽可能接近顶层导出(export)"></a>12.12.1 尽可能接近顶层导出(export)</h3><p>你的模块的消费者在使用你道出的东西时，应该有尽可能少的困扰。增加过多的嵌套层次往往是很麻烦的，所以要仔细考虑你想如何组织代码。</p><p>从你的模块中导出一个命名空间，就是一个增加过多嵌套层次的例子。虽然命名空间有时有其用途，但在使用模块时，它们增加了额外的间接性。这很快就会成为用户的一个痛点，而且通常是不必要的。</p><p>输出类上的静态方法也有类似的问题——类本身增加了一层嵌套。除非它以一种明显有用的方式增加了表达能力或意图，否则考虑简单地导出一个辅助函数。</p><ol><li><strong>如果你只导出了一个<code>class</code>或<code>function</code>则使用 <code>export default</code></strong></li></ol><p>正如 “在顶层导出 “可以减少模块消费者的困扰，引入一个默认导出也是如此。如果一个模块的主要目的是容纳一个特定的出口，那么你应该考虑把它作为一个默认出口。这使得导入和实际使用导入都更容易一些。比如说：</p><p><strong>MyClass.ts</strong></p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">SomeType</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123; ... &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>MyFunc.ts</strong></p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">getThing</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;thing&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Consumer.ts</strong></p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> t <span class="keyword">from</span> <span class="string">&quot;./MyClass&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> f <span class="keyword">from</span> <span class="string">&quot;./MyFunc&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> x = <span class="keyword">new</span> <span class="title function_">t</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">f</span>());</span><br></pre></td></tr></table></figure><p>这对消费者来说是最好的。他们可以随心所欲地命名你的类型（本例中为<code>t</code>），并且不必做任何过度的点缀来寻找你的对象。</p><ol start="2"><li><strong>如果你要导出多个对象，把它们都放在顶层</strong></li></ol><p><strong>MyThings.ts</strong></p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">SomeType</span> &#123;</span><br><span class="line">  <span class="comment">/* ... */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">someFunc</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">/* ... */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>反之，在导入时，也是如此。</p><ol start="3"><li><strong>明确列出进口名称</strong></li></ol><p><strong>Consumer.ts</strong></p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">SomeType</span>, someFunc &#125; <span class="keyword">from</span> <span class="string">&quot;./MyThings&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> x = <span class="keyword">new</span> <span class="title class_">SomeType</span>();</span><br><span class="line"><span class="keyword">let</span> y = <span class="title function_">someFunc</span>();</span><br></pre></td></tr></table></figure><p>如果你要导入大量的东西，请使用命名空间导入模式：</p><p><strong>MyLargeModule.ts</strong></p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">Dog</span> &#123; ... &#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">Cat</span> &#123; ... &#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">Tree</span> &#123; ... &#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">Flower</span> &#123; ... &#125;</span><br></pre></td></tr></table></figure><p><strong>Consumer.ts</strong></p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> myLargeModule <span class="keyword">from</span> <span class="string">&quot;./MyLargeModule.ts&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> x = <span class="keyword">new</span> myLargeModule.<span class="title class_">Dog</span>();</span><br></pre></td></tr></table></figure><h3 id="12-12-2-扩展的重新导出"><a href="#12-12-2-扩展的重新导出" class="headerlink" title="12.12.2 扩展的重新导出"></a>12.12.2 扩展的重新导出</h3><p>通常情况下，你需要在一个模块上扩展功能。一个常见的JS模式是用扩展来增强原始对象，类似于JQuery扩展的工作方式。正如我们之前提到的，模块不会像全局命名空间对象那样进行合并。推荐的解决方案是不改变原始对象，而是导出一个提供新功能的新实体。</p><p>考虑一个简单的计算器实现，定义在模块<code>Calculator.ts</code>中。该模块还导出了一个辅助函数，通过传递一个输入字符串列表并在最后写入结果，来测试计算器的功能。</p><p><strong>Calculator.ts</strong></p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">Calculator</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> current = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">private</span> memory = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">private</span> <span class="attr">operator</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="keyword">protected</span> <span class="title function_">processDigit</span>(<span class="params">digit: <span class="built_in">string</span>, currentValue: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (digit &gt;= <span class="string">&quot;0&quot;</span> &amp;&amp; digit &lt;= <span class="string">&quot;9&quot;</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> currentValue * <span class="number">10</span> + (digit.<span class="title function_">charCodeAt</span>(<span class="number">0</span>) - <span class="string">&quot;0&quot;</span>.<span class="title function_">charCodeAt</span>(<span class="number">0</span>));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">protected</span> <span class="title function_">processOperator</span>(<span class="params">operator: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> ([<span class="string">&quot;+&quot;</span>, <span class="string">&quot;-&quot;</span>, <span class="string">&quot;*&quot;</span>, <span class="string">&quot;/&quot;</span>].<span class="title function_">indexOf</span>(operator) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> operator;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">protected</span> evaluateOperator(</span><br><span class="line">    <span class="attr">operator</span>: <span class="built_in">string</span>,</span><br><span class="line">    <span class="attr">left</span>: <span class="built_in">number</span>,</span><br><span class="line">    <span class="attr">right</span>: <span class="built_in">number</span>,</span><br><span class="line">  ): <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="keyword">switch</span> (<span class="variable language_">this</span>.<span class="property">operator</span>) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&quot;+&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> left + right;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&quot;-&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> left - right;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&quot;*&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> left * right;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&quot;/&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> left / right;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">private</span> <span class="title function_">evaluate</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">operator</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">memory</span> = <span class="variable language_">this</span>.evaluateOperator(</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">operator</span>,</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">memory</span>,</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">current</span>,</span><br><span class="line">      );</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">memory</span> = <span class="variable language_">this</span>.<span class="property">current</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">current</span> = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">handleChar</span>(<span class="params">char: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (char === <span class="string">&quot;=&quot;</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.evaluate();</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> value = <span class="variable language_">this</span>.<span class="title function_">processDigit</span>(char, <span class="variable language_">this</span>.<span class="property">current</span>);</span><br><span class="line">      <span class="keyword">if</span> (value !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">current</span> = value;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> value = <span class="variable language_">this</span>.<span class="title function_">processOperator</span>(char);</span><br><span class="line">        <span class="keyword">if</span> (value !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">          <span class="variable language_">this</span>.evaluate();</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">operator</span> = value;</span><br><span class="line">          <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">`Unsupported input: &#x27;<span class="subst">$&#123;char&#125;</span>&#x27;`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">getResult</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">memory</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">test</span>(<span class="params">c: Calculator, input: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; input.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    c.<span class="title function_">handleChar</span>(input[i]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`result of &#x27;<span class="subst">$&#123;input&#125;</span>&#x27; is &#x27;<span class="subst">$&#123;c.getResult()&#125;</span>&#x27;`</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是一个使用暴露测试功能的计算器的简单测试。</p><p><strong>TestCalculator.ts</strong></p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Calculator</span>, test &#125; <span class="keyword">from</span> <span class="string">&quot;./Calculator&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> c = <span class="keyword">new</span> <span class="title class_">Calculator</span>();</span><br><span class="line"><span class="title function_">test</span>(c, <span class="string">&quot;1+2*33/11=&quot;</span>); <span class="comment">// 输出 9</span></span><br></pre></td></tr></table></figure><p>现在，为了扩展这个功能，以增加对10以外的数字输入的支持，我们来创建 <code>ProgrammerCalculator.ts</code></p><p><strong>ProgrammerCalculator.ts</strong></p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Calculator</span> &#125; <span class="keyword">from</span> <span class="string">&quot;./Calculator&quot;</span>;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ProgrammerCalculator</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Calculator</span> &#123;</span><br><span class="line">  <span class="keyword">static</span> digits = [</span><br><span class="line">    <span class="string">&quot;0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;2&quot;</span>,</span><br><span class="line">    <span class="string">&quot;3&quot;</span>,</span><br><span class="line">    <span class="string">&quot;4&quot;</span>,</span><br><span class="line">    <span class="string">&quot;5&quot;</span>,</span><br><span class="line">    <span class="string">&quot;6&quot;</span>,</span><br><span class="line">    <span class="string">&quot;7&quot;</span>,</span><br><span class="line">    <span class="string">&quot;8&quot;</span>,</span><br><span class="line">    <span class="string">&quot;9&quot;</span>,</span><br><span class="line">    <span class="string">&quot;A&quot;</span>,</span><br><span class="line">    <span class="string">&quot;B&quot;</span>,</span><br><span class="line">    <span class="string">&quot;C&quot;</span>,</span><br><span class="line">    <span class="string">&quot;D&quot;</span>,</span><br><span class="line">    <span class="string">&quot;E&quot;</span>,</span><br><span class="line">    <span class="string">&quot;F&quot;</span>,</span><br><span class="line">  ];</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">public</span> base: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>();</span><br><span class="line">    <span class="keyword">const</span> maxBase = <span class="title class_">ProgrammerCalculator</span>.<span class="property">digits</span>.<span class="property">length</span>;</span><br><span class="line">    <span class="keyword">if</span> (base &lt;= <span class="number">0</span> || base &gt; maxBase) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">`base has to be within 0 to <span class="subst">$&#123;maxBase&#125;</span> inclusive.`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">protected</span> <span class="title function_">processDigit</span>(<span class="params">digit: <span class="built_in">string</span>, currentValue: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title class_">ProgrammerCalculator</span>.<span class="property">digits</span>.<span class="title function_">indexOf</span>(digit) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> (</span><br><span class="line">        currentValue * <span class="variable language_">this</span>.<span class="property">base</span> + <span class="title class_">ProgrammerCalculator</span>.<span class="property">digits</span>.<span class="title function_">indexOf</span>(digit)</span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 将新的扩展计算器导出为 Calculator</span></span><br><span class="line"><span class="keyword">export</span> &#123; <span class="title class_">ProgrammerCalculator</span> <span class="keyword">as</span> <span class="title class_">Calculator</span> &#125;;</span><br><span class="line"><span class="comment">// 同时，导出辅助函数</span></span><br><span class="line"><span class="keyword">export</span> &#123; test &#125; <span class="keyword">from</span> <span class="string">&quot;./Calculator&quot;</span>;</span><br></pre></td></tr></table></figure><p>新模块 <code>ProgrammerCalculator</code> 输出的API形状与原来的 <code>Calculator</code> 模块相似，但并没有增强原来模块中的任何对象。下面是对我们的<code>ProgrammerCalculator</code>类的测试。</p><p><strong>TestProgrammerCalculator.ts</strong></p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Calculator</span>, test &#125; <span class="keyword">from</span> <span class="string">&quot;./ProgrammerCalculator&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> c = <span class="keyword">new</span> <span class="title class_">Calculator</span>(<span class="number">2</span>);</span><br><span class="line"><span class="title function_">test</span>(c, <span class="string">&quot;001+010=&quot;</span>); <span class="comment">// 输出 3</span></span><br></pre></td></tr></table></figure><h3 id="12-12-3-不要在模块中使用命名空间"><a href="#12-12-3-不要在模块中使用命名空间" class="headerlink" title="12.12.3 不要在模块中使用命名空间"></a>12.12.3 不要在模块中使用命名空间</h3><p>当第一次转移到基于模块的代码设计时，一个常见的趋势是，将 export 包裹在一个额外的命名空间层中。模块有自己的范围，只有导出的声明在模块外可见。考虑到这一点，如果有命名空间的话，它在使用模块时提供的价值非常小。</p><p>在组织方面，命名空间对于在全局范围内，将逻辑上相关的对象和类型组合在一起很方便。例如，在C#中，你会在 <code>System.Collections</code> 中找到所有的集合类型。通过将我们的类型组织到分层的命名空间中，我们为这些类型的用户提供了良好的 “发现 “体验。另一方面，模块已经存在于文件系统中，是必然的。我们必须通过路径和文件名来解决它们，所以有一个逻辑的组织方案供我们使用。我们可以有一个<code>/collections/generic/</code>文件夹，里面有一个列表模块。</p><p>命名空间对于避免全局范围内的命名冲突很重要。例如，你可能有 <code>My.Application.Customer.AddForm</code>和<code>My.Application.Order.AddForm</code>两个名字相同的类型，但名字空间不同。然而，对于模块来说，这不是一个问题。在一个模块中，没有合理的理由让两个对象具有相同的名字。从消费方面来看，任何给定模块的消费者都可以选择他们将用来引用模块的名称，所以意外的命名冲突是不可能的。</p><h3 id="12-12-4-红线"><a href="#12-12-4-红线" class="headerlink" title="12.12.4 红线"></a>12.12.4 红线</h3><p>以下所有情况都是模块结构化的红线。如果你的文件有这些情况，请仔细检查你是否试图，对你的外部模块进行命名空间定义。</p><ul><li>一个文件的唯一顶层声明是 <code>export namespace Foo &#123; ... &#125; </code>(移除<code>Foo</code>，并将所有内容 “上移 “一个级别）</li><li>多个文件在顶层有相同的<code>export namespace Foo &#123;</code> (不要以为这些文件会合并成一个 <code>Foo</code>!)</li></ul><h3 id="特别声明-本文转自-古艺散人老师-，如有需要可前往原文预览查看。"><a href="#特别声明-本文转自-古艺散人老师-，如有需要可前往原文预览查看。" class="headerlink" title="特别声明: 本文转自  古艺散人老师 ，如有需要可前往原文预览查看。"></a>特别声明: 本文转自 <a href="https://github.com/lurongtao/TypeScript"> 古艺散人老师 </a>，如有需要可前往原文预览查看。</h3>]]></content>
      
      
      <categories>
          
          <category> TypeScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> TypeScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3-2、高级篇：三斜线指令</title>
      <link href="/article/9557/"/>
      <url>/article/9557/</url>
      
        <content type="html"><![CDATA[<h1 id="十一、三斜线指令"><a href="#十一、三斜线指令" class="headerlink" title="十一、三斜线指令"></a>十一、三斜线指令</h1><p>三斜线指令是包含单个XML标签的单行注释。注释的内容被作为编译器指令使用。</p><p>三斜线指令只在其包含文件的顶部有效。三斜线指令的前面只能有单行或多行注释，包括其他三斜线指令。如果它们出现在语句或声明之后，则被视为普通的单行注释，没有任何特殊意义。</p><h2 id="11-1"><a href="#11-1" class="headerlink" title="11.1 /// &lt;reference path=&quot;...&quot; /&gt;"></a>11.1 <code>/// &lt;reference path=&quot;...&quot; /&gt;</code></h2><ul><li><strong>预处理输入文件</strong></li></ul><p>编译器对输入文件进行预处理，以解决所有三斜线参考指令。在这个过程中，额外的文件被添加到编译中。</p><p>这个过程从一组 <em>根文件</em> 开始；这些文件是在命令行或在 <code>tsconfig.json</code> 文件的<a href="https://www.typescriptlang.org/tsconfig#files"><code>文件列表 </code></a>中指定的文件名。这些根文件按照它们被指定的顺序进行预处理。在一个文件被添加到列表中之前，其中所有的三斜线引用都会被处理，并包括它们的目标。三斜线引用是以深度优先的方式解决的，按照它们在文件中出现的顺序。</p><p>如果使用的是相对路径，那么三斜线引用的路径是相对于包含的文件进行解析的。</p><ul><li><strong>错误</strong></li></ul><p>引用一个不存在的文件是一个错误。一个文件对自己有三重斜线引用是一个错误。</p><ul><li><strong>使用 <code>--noResolve</code></strong></li></ul><p>如果指定了编译器标志noResolve，三斜线引用将被忽略；它们既不会导致添加新的文件，也不会改变所提供文件的顺序。</p><h2 id="11-2"><a href="#11-2" class="headerlink" title="11.2 /// &lt;reference types=&quot;...&quot; /&gt;"></a>11.2 <code>/// &lt;reference types=&quot;...&quot; /&gt;</code></h2><p>与作为依赖关系声明的 <code>/// &lt;reference path=&quot;...&quot; /&gt;</code> 指令类似，<code>/// &lt;reference types=&quot;...&quot; /&gt;</code>指令声明对包的依赖关系。</p><p>解析这些包名的过程与解析 <code>import</code> 语句中的模块名的过程类似。一个简单的方法是将三重斜线<em>引用</em>类型指令看作是声明包的 <code>import</code>。</p><p>例如，在一个声明文件中包括 <code>/// &lt;reference types=&quot;node&quot; /&gt;</code> 声明这个文件使用 <code>@types/node/index.d.ts</code> 中声明的名字；因此，这个包需要和声明文件一起包含在编译中。</p><p>只有在你手工编写 <code>d.ts</code> 文件的时候才使用这些指令。</p><p>对于在编译过程中生成的声明文件，编译器会自动为你添加 <code>/// &lt;reference types=&quot;...&quot; /&gt;；</code>在生成的声明文件中，<em>当且仅当</em>生成的文件使用了被引用包的任何声明时，会添加 <code>/// &lt;reference types=&quot;...&quot; /&gt;</code>。</p><p>对于在 <code>.ts</code> 文件中声明对 <code>@types</code> s包的依赖，在命令行或你的 <code>tsconfig.json</code> 中使用 <code>types</code> 来代替。参见 <a href="https://www.typescriptlang.org/docs/handbook/tsconfig-json.html#types-typeroots-and-types">在 <code>tsconfig.json</code> 文件里应用 <code>@types</code>, <code>typeRoots</code> 和 <code>types</code> </a>以了解更多细节。</p><h2 id="11-3"><a href="#11-3" class="headerlink" title="11.3 /// &lt;reference lib=&quot;...&quot; /&gt;"></a>11.3 <code>/// &lt;reference lib=&quot;...&quot; /&gt;</code></h2><p>这个指令允许一个文件明确地包含一个现有的内置 <em>lib</em> 文件。</p><p>内置 <em>lib</em> 文件的引用方式与 <code>tsconfig.json</code> 中的<a href="https://www.typescriptlang.org/tsconfig#lib"><code>lib</code></a> 编译器选项相同（例如，使用<code>lib=&quot;es2015 &quot;</code>而不是<code>lib=&quot;lib.es2015.d.ts&quot;</code>，等等）。</p><p>对于依赖内置类型的声明文件作者，例如DOM APIs或内置的JS运行时构造器，如 <code>Symbol</code>或<code>Iterable</code>，建议使用三重斜线引用的lib指令。以前这些 .d.ts 文件不得不添加此类类型的前向&#x2F;重复声明。</p><p>例如，在编译中的一个文件中添加<code>/// &lt;reference lib=&quot;es2017.string&quot; /&gt;</code>，相当于用 <code>--lib es2017.string</code> 进行编译。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference lib=&quot;es2017.string&quot; /&gt;</span></span><br><span class="line"><span class="string">&quot;foo&quot;</span>.<span class="title function_">padStart</span>(<span class="number">4</span>);</span><br></pre></td></tr></table></figure><h2 id="11-4"><a href="#11-4" class="headerlink" title="11.4 /// &lt;reference no-default-lib=&quot;true&quot;/&gt;"></a>11.4 <code>/// &lt;reference no-default-lib=&quot;true&quot;/&gt;</code></h2><p>这个指令将一个文件标记为 _默认库_。你会在 <code>lib.d.ts</code> 和它的不同变体的顶部看到这个注释。</p><p>这个指令指示编译器在编译时不包括默认库（即 <code>lib.d.ts</code>）。这里的影响类似于在命令行中传递 <a href="https://www.typescriptlang.org/tsconfig#noLib"><code>noLib</code></a> 。</p><p>还要注意的是，当传递 <a href="https://www.typescriptlang.org/tsconfig#skipDefaultLibCheck"><code>skipDefaultLibCheck</code></a>时，编译器将只跳过检查带有 <code>/// &lt;reference no-default-lib=&quot;true&quot;/&gt;</code> 的文件。</p><h2 id="14-5"><a href="#14-5" class="headerlink" title="14.5 /// &lt;amd-module /&gt;"></a>14.5 <code>/// &lt;amd-module /&gt;</code></h2><p>默认情况下，AMD模块是以匿名方式生成的。当其他工具被用来处理生成的模块时，这可能会导致问题，例如捆绑器（如 <code>r.js</code> ）。</p><p><code>amd-module</code>指令允许向编译器传递一个可选的模块名称。</p><ul><li><h5 id="amdModule-ts"><a href="#amdModule-ts" class="headerlink" title="amdModule.ts"></a>amdModule.ts</h5></li></ul><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">///&lt;amd-module name=&quot;NamedModule&quot;/&gt;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">C</span> &#123;&#125;</span><br></pre></td></tr></table></figure><p>将导致在调用AMD <code>define</code>的过程中，将<code>NamedModule</code>这个名字分配给模块。</p><ul><li><h5 id="amdModule-js"><a href="#amdModule-js" class="headerlink" title="amdModule.js"></a>amdModule.js</h5></li></ul><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="title function_">define</span>(<span class="string">&quot;NamedModule&quot;</span>, [<span class="string">&quot;require&quot;</span>, <span class="string">&quot;exports&quot;</span>], <span class="keyword">function</span> (<span class="params"><span class="built_in">require</span>, <span class="built_in">exports</span></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> C = (<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">C</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">    <span class="keyword">return</span> C;</span><br><span class="line">  &#125;)();</span><br><span class="line">  <span class="built_in">exports</span>.<span class="property">C</span> = C;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="14-6"><a href="#14-6" class="headerlink" title="14.6 /// &lt;amd-dependency /&gt;"></a>14.6 <code>/// &lt;amd-dependency /&gt;</code></h2><blockquote><p>注意：这个指令已被废弃。使用<code>import &quot;moduleName&quot;;</code>语句代替。</p></blockquote><p><code>/// &lt;amd-dependency path=&quot;x&quot; /&gt;</code> 通知编译器一个需要在生成的模块的 require 调用中注入的非 TS 模块的依赖关系。</p><p><code>amd-dependency</code>指令也可以有一个可选的<code>name</code>属性；这允许为<code>amd-dependency</code>传递一个可选的名字。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">/// &lt;amd-dependency path=&quot;legacy/moduleA&quot; name=&quot;moduleA&quot;/&gt;</span></span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">var</span> <span class="attr">moduleA</span>: <span class="title class_">MyType</span>;</span><br><span class="line">moduleA.<span class="title function_">callStuff</span>();</span><br></pre></td></tr></table></figure><p>生成的 JS 代码:</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="title function_">define</span>([<span class="string">&quot;require&quot;</span>, <span class="string">&quot;exports&quot;</span>, <span class="string">&quot;legacy/moduleA&quot;</span>], <span class="keyword">function</span> (<span class="params"></span></span><br><span class="line"><span class="params">  <span class="built_in">require</span>,</span></span><br><span class="line"><span class="params">  <span class="built_in">exports</span>,</span></span><br><span class="line"><span class="params">  moduleA,</span></span><br><span class="line"><span class="params"></span>) &#123;</span><br><span class="line">  moduleA.<span class="title function_">callStuff</span>();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="特别声明-本文转自-古艺散人老师-，如有需要可前往原文预览查看。"><a href="#特别声明-本文转自-古艺散人老师-，如有需要可前往原文预览查看。" class="headerlink" title="特别声明: 本文转自  古艺散人老师 ，如有需要可前往原文预览查看。"></a>特别声明: 本文转自 <a href="https://github.com/lurongtao/TypeScript"> 古艺散人老师 </a>，如有需要可前往原文预览查看。</h3>]]></content>
      
      
      <categories>
          
          <category> TypeScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> TypeScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3-1、高级篇：混入</title>
      <link href="/article/5812/"/>
      <url>/article/5812/</url>
      
        <content type="html"><![CDATA[<h1 id="十、混入"><a href="#十、混入" class="headerlink" title="十、混入"></a>十、混入</h1><p>除了传统的OO层次结构外，另一种流行的从可重用组件中建立类的方式是，通过组合更简单的部分类来建立它们。你可能对 <code>Scala</code>等语言的<code>mixins</code>或<code>traits</code>的想法很熟悉，这种模式在JavaScript社区也达到了一定的普及。</p><h2 id="10-1-混入是如何工作的？"><a href="#10-1-混入是如何工作的？" class="headerlink" title="10.1 混入是如何工作的？"></a>10.1 混入是如何工作的？</h2><p>该模式依赖于使用泛型与类继承来扩展基类。TypeScript最好的mixin支持是通过类表达模式完成的。你可以在 <a href="https://justinfagnani.com/2015/12/21/real-mixins-with-javascript-classes/">这里</a>阅读更多关于这种模式在JavaScript中的工作方式。</p><p>为了开始工作，我们需要一个类，在这个类上应用混入：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Sprite</span> &#123;</span><br><span class="line">  name = <span class="string">&quot;&quot;</span>;</span><br><span class="line">  x = <span class="number">0</span>;</span><br><span class="line">  y = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后你需要一个类型和一个工厂函数，它返回一个扩展基类的表达式。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 为了开始工作，我们需要一个类型，我们将用它来扩展其他类。</span></span><br><span class="line"><span class="comment">// 主要的责任是声明, 传入的类型是一个类。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Constructor</span> = <span class="keyword">new</span> (...<span class="attr">args</span>: <span class="built_in">any</span>[]) =&gt; &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这个混集器增加了一个 `scale` 属性，并带有getters和setters</span></span><br><span class="line"><span class="comment">// 用来改变它的封装的私有属性。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title class_">Scale</span>&lt;<span class="title class_">TBase</span> <span class="keyword">extends</span> <span class="title class_">Constructor</span>&gt;(<span class="title class_">Base</span>: <span class="title class_">TBase</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">class</span> <span class="title class_">Scaling</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Base</span> &#123;</span><br><span class="line">    <span class="comment">// 混入不能声明私有/受保护的属性</span></span><br><span class="line">    <span class="comment">// 但是，你可以使用ES2020的私有字段</span></span><br><span class="line">    _scale = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">setScale</span>(<span class="params">scale: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">_scale</span> = scale;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">get</span> <span class="title function_">scale</span>(): <span class="built_in">number</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">_scale</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有了这些设置，你就可以创建一个代表基类的类，并应用混合元素。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 从Sprite类构成一个新的类。</span></span><br><span class="line"><span class="comment">// 用Mixin Scale应用程序:</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">EightBitSprite</span> = <span class="title class_">Scale</span>(<span class="title class_">Sprite</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> flappySprite = <span class="keyword">new</span> <span class="title class_">EightBitSprite</span>(<span class="string">&quot;Bird&quot;</span>);</span><br><span class="line">flappySprite.<span class="title function_">setScale</span>(<span class="number">0.8</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(flappySprite.<span class="property">scale</span>);</span><br></pre></td></tr></table></figure><h2 id="10-2-受约束的混入"><a href="#10-2-受约束的混入" class="headerlink" title="10.2 受约束的混入"></a>10.2 受约束的混入</h2><p>在上述形式中，混入没有关于类的底层知识，这可能使它很难创建你想要的设计。</p><p>为了模拟这一点，我们修改了原来的构造函数类型以接受一个通用参数。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 这就是我们之前的构造函数</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Constructor</span> = <span class="keyword">new</span> (...<span class="attr">args</span>: <span class="built_in">any</span>[]) =&gt; &#123;&#125;;</span><br><span class="line"><span class="comment">// 现在我们使用一个通用的版本，它可以在以下方面应用一个约束</span></span><br><span class="line"><span class="comment">// 该混入所适用的类</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">GConstructor</span>&lt;T = &#123;&#125;&gt; = <span class="keyword">new</span> (...<span class="attr">args</span>: <span class="built_in">any</span>[]) =&gt; T;</span><br></pre></td></tr></table></figure><p>这允许创建只与受限基类一起工作的类。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Positionable</span> = <span class="title class_">GConstructor</span>&lt;&#123; <span class="attr">setPos</span>: <span class="function">(<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">void</span> &#125;&gt;;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Spritable</span> = <span class="title class_">GConstructor</span>&lt;<span class="title class_">Sprite</span>&gt;;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Loggable</span> = <span class="title class_">GConstructor</span>&lt;&#123; <span class="attr">print</span>: <span class="function">() =&gt;</span> <span class="built_in">void</span> &#125;&gt;;</span><br></pre></td></tr></table></figure><p>然后，你可以创建混入函数，只有当你有一个特定的基础时，它才能发挥作用。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title class_">Jumpable</span>&lt;<span class="title class_">TBase</span> <span class="keyword">extends</span> <span class="title class_">Positionable</span>&gt;(<span class="title class_">Base</span>: <span class="title class_">TBase</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">class</span> <span class="title class_">Jumpable</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Base</span> &#123;</span><br><span class="line">    <span class="title function_">jump</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="comment">// 这个混合器只有在传递给基类的情况下才会起作用。</span></span><br><span class="line">      <span class="comment">// 类中定义了setPos，因为有了可定位的约束。</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">setPos</span>(<span class="number">0</span>, <span class="number">20</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="10-3-替代模式"><a href="#10-3-替代模式" class="headerlink" title="10.3 替代模式"></a>10.3 替代模式</h2><p>本文档的前几个版本推荐了一种编写混入函数的方法，即分别创建运行时和类型层次，然后在最后将它们合并：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 每个mixin都是一个传统的ES类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Jumpable</span> &#123;</span><br><span class="line">  <span class="title function_">jump</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Duckable</span> &#123;</span><br><span class="line">  <span class="title function_">duck</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 基类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Sprite</span> &#123;</span><br><span class="line">  x = <span class="number">0</span>;</span><br><span class="line">  y = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 然后，你创建一个接口，</span></span><br><span class="line"><span class="comment">// 将预期的混合函数与你的基础函数同名，</span></span><br><span class="line"><span class="comment">// 合并在一起。</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Sprite</span> <span class="keyword">extends</span> <span class="title class_">Jumpable</span>, <span class="title class_">Duckable</span> &#123;&#125;</span><br><span class="line"><span class="comment">// 在运行时，通过JS将混入应用到基类中</span></span><br><span class="line"><span class="title function_">applyMixins</span>(<span class="title class_">Sprite</span>, [<span class="title class_">Jumpable</span>, <span class="title class_">Duckable</span>]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> player = <span class="keyword">new</span> <span class="title class_">Sprite</span>();</span><br><span class="line">player.<span class="title function_">jump</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(player.<span class="property">x</span>, player.<span class="property">y</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 它可以存在于你代码库的任何地方</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">applyMixins</span>(<span class="params">derivedCtor: <span class="built_in">any</span>, constructors: <span class="built_in">any</span>[]</span>) &#123;</span><br><span class="line">  constructors.<span class="title function_">forEach</span>(<span class="function">(<span class="params">baseCtor</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">getOwnPropertyNames</span>(baseCtor.<span class="property"><span class="keyword">prototype</span></span>).<span class="title function_">forEach</span>(<span class="function">(<span class="params">name</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(</span><br><span class="line">        derivedCtor.<span class="property"><span class="keyword">prototype</span></span>,</span><br><span class="line">        name,</span><br><span class="line">        <span class="title class_">Object</span>.<span class="title function_">getOwnPropertyDescriptor</span>(baseCtor.<span class="property"><span class="keyword">prototype</span></span>, name) ||</span><br><span class="line">          <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="literal">null</span>),</span><br><span class="line">      );</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种模式较少依赖于编译器，而更多地依赖于你的代码库，以确保运行时和类型系统都能正确地保持同步。</p><h2 id="10-4-限制条件"><a href="#10-4-限制条件" class="headerlink" title="10.4 限制条件"></a>10.4 限制条件</h2><p>mixin模式在TypeScript编译器中通过代码流分析得到了本地支持。在一些情况下，你会遇到本地支持的边界。</p><h3 id="10-4-1-装饰器和混入-4881"><a href="#10-4-1-装饰器和混入-4881" class="headerlink" title="10.4.1 装饰器和混入 #4881"></a>10.4.1 装饰器和混入 <a href="https://github.com/microsoft/TypeScript/issues/4881"><code>#4881</code></a></h3><p>你不能使用装饰器来通过代码流分析提供混入：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 一个复制mixin模式的装饰器函数。</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Pausable</span> = (<span class="params">target: <span class="keyword">typeof</span> Player</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">class</span> <span class="title class_">Pausable</span> <span class="keyword">extends</span> <span class="title class_ inherited__">target</span> &#123;</span><br><span class="line">    shouldFreeze = <span class="literal">false</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Pausable</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Player</span> &#123;</span><br><span class="line">  x = <span class="number">0</span>;</span><br><span class="line">  y = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 播放器类没有合并装饰器的类型</span></span><br><span class="line"><span class="keyword">const</span> player = <span class="keyword">new</span> <span class="title class_">Player</span>();</span><br><span class="line">player.<span class="property">shouldFreeze</span>;</span><br><span class="line"><span class="comment">// Ⓧ 属性&#x27;shouldFreeze&#x27;在类型&#x27;Player&#x27;上不存在</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 运行时方面可以通过类型组合或接口合并来手动复制。</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">FreezablePlayer</span> = <span class="title class_">Player</span> &amp; &#123; <span class="attr">shouldFreeze</span>: <span class="built_in">boolean</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> playerTwo = <span class="keyword">new</span> <span class="title class_">Player</span>() <span class="keyword">as</span> <span class="built_in">unknown</span> <span class="keyword">as</span> <span class="title class_">FreezablePlayer</span>;</span><br><span class="line">playerTwo.<span class="property">shouldFreeze</span>;</span><br></pre></td></tr></table></figure><h3 id="10-4-2-静态属性混入-17829"><a href="#10-4-2-静态属性混入-17829" class="headerlink" title="10.4.2 静态属性混入 #17829"></a>10.4.2 静态属性混入 <a href="https://github.com/microsoft/TypeScript/issues/17829"><code>#17829</code></a></h3><p>与其说是约束，不如说是一个难题。类表达式模式创建了单子，所以它们不能在类型系统中被映射以支持不同的变量类型。</p><p>你可以通过使用函数返回你的类来解决这个问题，这些类基于泛型而不同：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> base&lt;T&gt;() &#123;</span><br><span class="line">  <span class="keyword">class</span> <span class="title class_">Base</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="attr">prop</span>: T;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Base</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> derived&lt;T&gt;() &#123;</span><br><span class="line">  <span class="keyword">class</span> <span class="title class_">Derived</span> <span class="keyword">extends</span> <span class="title class_ inherited__">base</span>&lt;T&gt;() &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="attr">anotherProp</span>: T;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Derived</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Spec</span> <span class="keyword">extends</span> <span class="title class_ inherited__">derived</span>&lt;<span class="built_in">string</span>&gt;() &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Spec</span>.<span class="property">prop</span>; <span class="comment">// string</span></span><br><span class="line"><span class="title class_">Spec</span>.<span class="property">anotherProp</span>; <span class="comment">// string</span></span><br></pre></td></tr></table></figure><h3 id="特别声明-本文转自-古艺散人老师-，如有需要可前往原文预览查看。"><a href="#特别声明-本文转自-古艺散人老师-，如有需要可前往原文预览查看。" class="headerlink" title="特别声明: 本文转自  古艺散人老师 ，如有需要可前往原文预览查看。"></a>特别声明: 本文转自 <a href="https://github.com/lurongtao/TypeScript"> 古艺散人老师 </a>，如有需要可前往原文预览查看。</h3>]]></content>
      
      
      <categories>
          
          <category> TypeScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> TypeScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2-9、高级篇：JSX</title>
      <link href="/article/22247/"/>
      <url>/article/22247/</url>
      
        <content type="html"><![CDATA[<h1 id="九、JSX"><a href="#九、JSX" class="headerlink" title="九、JSX"></a>九、JSX</h1><p><a href="https://facebook.github.io/jsx/">JSX</a> 是一种可嵌入的类似XML的语法。它旨在被转换为有效的JavaScript，尽管这种转换的语义是具体实施的。JSX随着<a href="https://reactjs.org/">React</a> 框架的流行而兴起，但后来也有了其他的实现。TypeScript支持嵌入、类型检查，以及直接将JSX编译为JavaScript。</p><h2 id="9-1-基本用法"><a href="#9-1-基本用法" class="headerlink" title="9. 1 基本用法"></a>9. 1 基本用法</h2><p>为了使用JSX，你必须做两件事。</p><ol><li>用 <code>.tsx</code> 扩展名来命名你的文件</li><li>启用 <code>jsx</code> 选项</li></ol><p>TypeScript有三种JSX模式：<code>preserve</code>, <code>react</code>和 <code>react-native</code>。这些模式只影响生成阶段 - 类型检查不受影响。 <code>preserve</code> 模式将保留 JSX 作为输出的一部分，以便被另一个转换步骤（例如 <a href="https://babeljs.io/">Babel</a>）进一步消耗。此外，输出将有一个 <code>.jsx</code> 文件扩展名。<code>react</code>模式将发出 <code>React.createElement</code>，在使用前不需要经过JSX转换，而且输出将有一个 <code>.js</code> 文件扩展名。<code>react-native</code> 模式相当于保留模式，它保留了所有的JSX，但输出将有一个 <code>.js</code> 文件扩展名。</p><table><thead><tr><th align="left">Mode</th><th align="left">Input</th><th align="left">Output</th><th align="left">Output File Extension</th></tr></thead><tbody><tr><td align="left"><code>preserve</code></td><td align="left"><code>&lt;div /&gt;</code></td><td align="left"><code>&lt;div /&gt;</code></td><td align="left"><code>.jsx</code></td></tr><tr><td align="left"><code>react</code></td><td align="left"><code>&lt;div /&gt;</code></td><td align="left"><code>React.createElement(&quot;div&quot;)</code></td><td align="left"><code>.js</code></td></tr><tr><td align="left"><code>react-native</code></td><td align="left"><code>&lt;div /&gt;</code></td><td align="left"><code>&lt;div /&gt;</code></td><td align="left"><code>.js</code></td></tr><tr><td align="left"><code>react-jsx</code></td><td align="left"><code>&lt;div /&gt;</code></td><td align="left"><code>_jsx(&quot;div&quot;, &#123;&#125;, void 0);</code></td><td align="left"><code>.js</code></td></tr><tr><td align="left"><code>react-jsxdev</code></td><td align="left"><code>&lt;div /&gt;</code></td><td align="left"><code>_jsxDEV(&quot;div&quot;, &#123;&#125;, void 0, false, &#123;...&#125;, this);</code></td><td align="left"><code>.js</code></td></tr></tbody></table><p>You can specify this mode using either the <a href="https://www.typescriptlang.org/tsconfig#jsx"><code>jsx</code></a> command line flag or the corresponding option <a href="https://www.typescriptlang.org/tsconfig#jsx"><code>jsx</code> in your tsconfig.json</a> file.</p><p>你可以使用 <code>jsx</code> 命令行标志或你的 <a href="https://www.typescriptlang.org/tsconfig#jsx"> tsconfig.json</a> 文件中的相应选项 <code>jsx</code> 指定这种模式。</p><blockquote><p>*注意：你可以用 <a href="https://www.typescriptlang.org/tsconfig#jsxFactory"><code>jsxFactory</code></a> 选项指定针对 react JSX 生成 JS 时使用的JSX工厂函数（默认为<code>React.createElement</code>）。</p></blockquote><h2 id="9-2-as操作符"><a href="#9-2-as操作符" class="headerlink" title="9.2 as操作符"></a>9.2 <code>as</code>操作符</h2><p>回忆一下如何编写类型断言。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> foo = &lt;foo&gt;bar;</span><br></pre></td></tr></table></figure><p>这断言变量 <code>bar</code>具有<code>foo</code>类型。由于TypeScript也使用角括号进行类型断言，将其与JSX的语法相结合会带来某些解析困难。因此，TypeScript不允许在 <code>.tsx</code> 文件中使用角括号类型断言。</p><p>由于上述语法不能在 <code>.tsx</code> 文件中使用，应该使用一个替代的类型断言操作符：<code>as</code>。这个例子可以很容易地用 <code>as</code> 操作符重写。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> foo = bar <span class="keyword">as</span> foo;</span><br></pre></td></tr></table></figure><p><code>as</code> 操作符在 <code>.ts</code> 和 <code>.tsx</code> 文件中都可用，并且在行为上与角括号式断言风格相同。</p><h2 id="9-3-类型检查"><a href="#9-3-类型检查" class="headerlink" title="9.3 类型检查"></a>9.3 类型检查</h2><p>为了理解JSX的类型检查，你必须首先理解内在元素和基于值的元素之间的区别。给定一个JSX表达式 <code>&lt;expr /&gt;</code>，<code>expr</code>既可以指环境中固有的东西（例如DOM环境中的<code>div</code>或<code>span</code>），也可以指你创建的自定义组件。这很重要，有两个原因。</p><ul><li>对于React来说，内在元素是以字符串的形式发出的（<code>React.createElement(&quot;div&quot;)</code>），而你创建的组件则不是（<code>React.createElement(MyComponent)</code>）。</li><li>在JSX元素中传递的属性类型应该被不同地查找。元素的内在属性应该是已知的，而组件可能想要指定他们自己的属性集。</li></ul><p>TypeScript使用<a href="http://facebook.github.io/react/docs/jsx-in-depth.html#html-tags-vs.-react-components">与React相同的约定</a> 来区分这些。一个内在的元素总是以小写字母开始，而一个基于价值的元素总是以大写字母开始。</p><h2 id="9-4-内在元素"><a href="#9-4-内在元素" class="headerlink" title="9.4 内在元素"></a>9.4 内在元素</h2><p>内在元素在特殊接口 <code>JSX.IntrinsicElements</code> 上被查询到。默认情况下，如果没有指定这个接口，那么什么都可以，内在元素将不会被类型检查。然而，如果这个接口存在，那么内在元素的名称将作为<code>JSX.IntrinsicElements</code>接口上的一个属性被查询。比如说。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="keyword">namespace</span> JSX &#123;</span><br><span class="line">  <span class="keyword">interface</span> <span class="title class_">IntrinsicElements</span> &#123;</span><br><span class="line">    <span class="attr">foo</span>: <span class="built_in">any</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;foo /&gt;; <span class="comment">// 正确</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">bar</span> /&gt;</span></span>; <span class="comment">// 错误</span></span><br></pre></td></tr></table></figure><p>在上面的例子中，<code>&lt;foo /&gt;</code>可以正常工作，但<code>&lt;bar /&gt;</code>会导致一个错误，因为它没有被指定在<code>JSX.IntrinsicElements</code>上。</p><p>注意：你也可以在<code>JWX.IntrinsicElements</code>上指定一个全面的字符串索引器，如下所示：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="keyword">namespace</span> JSX &#123;</span><br><span class="line">  <span class="keyword">interface</span> <span class="title class_">IntrinsicElements</span> &#123;</span><br><span class="line">    [<span class="attr">elemName</span>: <span class="built_in">string</span>]: <span class="built_in">any</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="9-5-基于值的元素"><a href="#9-5-基于值的元素" class="headerlink" title="9.5 基于值的元素"></a>9.5 基于值的元素</h2><p>基于值的元素只是通过范围内的标识符进行查询。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">MyComponent</span> <span class="keyword">from</span> <span class="string">&quot;./myComponent&quot;</span>;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">MyComponent</span> /&gt;</span></span>; <span class="comment">// 正确</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">SomeOtherComponent</span> /&gt;</span></span>; <span class="comment">// 错误</span></span><br></pre></td></tr></table></figure><p>有两种方法来定义基于值的元素：</p><ol><li>函数组件（FC）</li><li>类组件</li></ol><p>因为这两类基于值的元素在JSX表达式中是无法区分的，首先TS尝试使用重载解析将表达式解析为一个函数组件。如果这个过程成功了，那么TS就完成了将表达式解析为它的声明。如果该值不能被解析为一个函数组件，那么TS将尝试将其解析为一个类组件。如果失败了，TS将报告一个错误。</p><h3 id="9-5-1-函数组件"><a href="#9-5-1-函数组件" class="headerlink" title="9.5.1 函数组件"></a>9.5.1 函数组件</h3><p>顾名思义，该组件被定义为一个JavaScript函数，其第一个参数是一个 <code>props</code> 对象。TS强制要求它的返回类型必须是可分配给 <code>JSX.Element</code>的。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">FooProp</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">X</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">Y</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">function</span> <span class="title function_">AnotherComponent</span>(<span class="params">prop: &#123; name: <span class="built_in">string</span> &#125;</span>);</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">ComponentFoo</span>(<span class="params">prop: FooProp</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">AnotherComponent</span> <span class="attr">name</span>=<span class="string">&#123;prop.name&#125;</span> /&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Button</span> = (<span class="params">prop: &#123; value: <span class="built_in">string</span> &#125;, context: &#123; color: <span class="built_in">string</span> &#125;</span>) =&gt; (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> /&gt;</span></span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>因为函数组件只是一个JavaScript函数，这里也可以使用函数重载。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">ClickableProps</span> &#123;</span><br><span class="line">  <span class="attr">children</span>: <span class="variable constant_">JSX</span>.<span class="property">Element</span>[] | <span class="variable constant_">JSX</span>.<span class="property">Element</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">HomeProps</span> <span class="keyword">extends</span> <span class="title class_">ClickableProps</span> &#123;</span><br><span class="line">  <span class="attr">home</span>: <span class="variable constant_">JSX</span>.<span class="property">Element</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">SideProps</span> <span class="keyword">extends</span> <span class="title class_">ClickableProps</span> &#123;</span><br><span class="line">  <span class="attr">side</span>: <span class="variable constant_">JSX</span>.<span class="property">Element</span> | <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">MainButton</span>(<span class="params">prop: HomeProps</span>): <span class="variable constant_">JSX</span>.<span class="property">Element</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">MainButton</span>(<span class="params">prop: SideProps</span>): <span class="variable constant_">JSX</span>.<span class="property">Element</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">MainButton</span>(<span class="params">prop: ClickableProps</span>): <span class="variable constant_">JSX</span>.<span class="property">Element</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意：函数组件以前被称为无状态函数组件（SFC）。由于Function Components在最近的react版本中不再被认为是无状态的，<code>SFC</code>类型和它的别名<code>StatelessComponent</code>被废弃了。</p></blockquote><h3 id="9-5-2-类组件"><a href="#9-5-2-类组件" class="headerlink" title="9.5.2 类组件"></a>9.5.2 类组件</h3><p>定义一个类组件的类型是可能的。然而，要做到这一点，最好理解两个新术语：元素类类型和元素实例类型。</p><p>给定<code>&lt;Expr /&gt;</code>，元素类的类型就是<code>Expr</code>的类型。所以在上面的例子中，如果<code>MyComponent</code>是一个ES6类，那么类的类型就是该类的构造函数和状态。如果<code>MyComponent</code>是一个工厂函数，类的类型将是该函数。</p><p>一旦类的类型被确定，实例的类型就由该类的构造或调用签名（无论哪一个）的返回类型的联合决定。因此，在ES6类的情况下，实例类型将是该类实例的类型，而在工厂函数的情况下，它将是该函数返回值的类型。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyComponent</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 使用构造签名</span></span><br><span class="line"><span class="keyword">const</span> myComponent = <span class="keyword">new</span> <span class="title class_">MyComponent</span>();</span><br><span class="line"><span class="comment">// 元素类类型 =&gt; MyComponent</span></span><br><span class="line"><span class="comment">// 元素实例类型 =&gt; &#123; render: () =&gt; void &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">MyFactoryFunction</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">render</span>: <span class="function">() =&gt;</span> &#123;&#125;,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 使用调用签名</span></span><br><span class="line"><span class="keyword">const</span> myComponent = <span class="title class_">MyFactoryFunction</span>();</span><br><span class="line"><span class="comment">// 元素类类型 =&gt; MyFactoryFunction</span></span><br><span class="line"><span class="comment">// 元素实例类型 =&gt; &#123; render: () =&gt; void &#125;</span></span><br></pre></td></tr></table></figure><p>元素实例类型很有趣，因为它必须可以分配给 <code>JSX.ElementClass</code>，否则会导致错误。默认情况下，<code>JSX.ElementClass</code> 是 <code>&#123;&#125;</code>，但它可以被增强，以限制JSX的使用，使其只适用于那些符合适当接口的类型。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="keyword">namespace</span> JSX &#123;</span><br><span class="line">  <span class="keyword">interface</span> <span class="title class_">ElementClass</span> &#123;</span><br><span class="line">    <span class="attr">render</span>: <span class="built_in">any</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyComponent</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">MyFactoryFunction</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123; <span class="attr">render</span>: <span class="function">() =&gt;</span> &#123;&#125; &#125;;</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="title class_">MyComponent</span> /&gt;; <span class="comment">// 正确</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">MyFactoryFunction</span> /&gt;</span></span>; <span class="comment">// 正确</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NotAValidComponent</span> &#123;&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">NotAValidFactoryFunction</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="title class_">NotAValidComponent</span> /&gt;; <span class="comment">// 错误</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">NotAValidFactoryFunction</span> /&gt;</span></span>; <span class="comment">// 错误</span></span><br></pre></td></tr></table></figure><h2 id="9-6-属性类型检查"><a href="#9-6-属性类型检查" class="headerlink" title="9.6 属性类型检查"></a>9.6 属性类型检查</h2><p>类型检查属性的第一步是确定元素属性类型。这在内在元素和基于值的元素之间略有不同。</p><p>对于内在元素，它是 <code>JSX.IntrinsicElements</code> 上的属性类型。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="keyword">namespace</span> JSX &#123;</span><br><span class="line">  <span class="keyword">interface</span> <span class="title class_">IntrinsicElements</span> &#123;</span><br><span class="line">    <span class="attr">foo</span>: &#123; bar?: <span class="built_in">boolean</span> &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// &#x27;foo&#x27;的元素属性类型是&#x27;&#123;bar?: boolean&#125;&#x27;</span></span><br><span class="line">&lt;foo bar /&gt;;</span><br></pre></td></tr></table></figure><p>元素属性类型是用来对JSX中的属性进行类型检查的。支持可选和必需的属性。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="keyword">namespace</span> JSX &#123;</span><br><span class="line">  <span class="keyword">interface</span> <span class="title class_">IntrinsicElements</span> &#123;</span><br><span class="line">    <span class="attr">foo</span>: &#123; <span class="attr">requiredProp</span>: <span class="built_in">string</span>; optionalProp?: <span class="built_in">number</span> &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;foo requiredProp=<span class="string">&quot;bar&quot;</span> /&gt;; <span class="comment">// 正确</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">foo</span> <span class="attr">requiredProp</span>=<span class="string">&quot;bar&quot;</span> <span class="attr">optionalProp</span>=<span class="string">&#123;0&#125;</span> /&gt;</span></span>; <span class="comment">// 正确</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">foo</span> /&gt;</span></span>; <span class="comment">// 错误, requiredProp 缺失</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">foo</span> <span class="attr">requiredProp</span>=<span class="string">&#123;0&#125;</span> /&gt;</span></span>; <span class="comment">// 错误, requiredProp 应该为 string 类型</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">foo</span> <span class="attr">requiredProp</span>=<span class="string">&quot;bar&quot;</span> <span class="attr">unknownProp</span> /&gt;</span></span>; <span class="comment">// 错误, unknownProp 属性不存在</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">foo</span> <span class="attr">requiredProp</span>=<span class="string">&quot;bar&quot;</span> <span class="attr">some-unknown-prop</span> /&gt;</span></span>; <span class="comment">// 正确, 因为 &#x27;some-unknown-prop&#x27; 不是一个有效的属性标识</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：如果一个属性名称不是一个有效的JS标识符（如data-*属性），如果在元素属性类型中找不到它，则不被认为是一个错误。</p></blockquote><p>此外，<code>JSX.IntrinsicAttributes</code>接口可以用来指定JSX框架使用的额外属性，这些属性一般不会被组件的道具或参数使用–例如React中的key。进一步专门化，通用的 <code>JSX.IntrinsicClassAttributes&lt;T&gt;</code>类型也可以用来为类组件（而不是函数组件）指定同种额外属性。在这种类型中，通用参数与类的实例类型相对应。在React中，这被用来允许<code>Ref&lt;T&gt;</code>类型的<code>ref</code>属性。一般来说，这些接口上的所有属性都应该是可选的，除非你打算让你的JSX框架的用户需要在每个标签上提供一些属性。</p><p>展开运算符也能正常工作：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> props = &#123; <span class="attr">requiredProp</span>: <span class="string">&quot;bar&quot;</span> &#125;;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">foo</span> &#123;<span class="attr">...props</span>&#125; /&gt;</span></span>; <span class="comment">// 正确</span></span><br><span class="line"><span class="keyword">const</span> badProps = &#123;&#125;;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">foo</span> &#123;<span class="attr">...badProps</span>&#125; /&gt;</span></span>; <span class="comment">// 错误</span></span><br></pre></td></tr></table></figure><h2 id="9-7-子类型检查"><a href="#9-7-子类型检查" class="headerlink" title="9.7 子类型检查"></a>9.7 子类型检查</h2><p>在TypeScript 2.3中，TS引入了<em>children</em>的类型检查。<em>children</em>是元素属性类型中的一个特殊属性，子的<em>JSXExpressions</em>被采取插入属性中。类似于TS使用<code>JSX.ElementAttributesProperty</code>来确定 <em>props</em> 的名称，TS使用<code>JSX.ElementChildrenAttribute</code>来确定这些 <em>props</em> 中的 <em>children</em> 的名称。<code>JSX.ElementChildrenAttribute</code>应该用一个单一的属性来声明。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="keyword">namespace</span> JSX &#123;</span><br><span class="line">  <span class="keyword">interface</span> <span class="title class_">ElementChildrenAttribute</span> &#123;</span><br><span class="line">    <span class="attr">children</span>: &#123;&#125;; <span class="comment">// 指定要使用的 children 名称</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  World</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">CustomComp</span> = (<span class="params">props</span>) =&gt; <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;props.children&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">CustomComp</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  &#123;&quot;This is just a JS expression...&quot; + 1000&#125;</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">CustomComp</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>你可以像其他属性一样指定 <em>children</em> 的类型。这将覆盖默认的类型，例如，如果你使用React类型的话：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">PropsType</span> &#123;</span><br><span class="line">  <span class="attr">children</span>: <span class="variable constant_">JSX</span>.<span class="property">Element</span></span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Component</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&lt;<span class="title class_">PropsType</span>, &#123;&#125;&gt; &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;this.props.children&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 正确</span></span><br><span class="line">&lt;<span class="title class_">Component</span> name=<span class="string">&quot;foo&quot;</span>&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">&lt;/<span class="title class_">Component</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 错误: children是JSX.Element的类型，而不是JSX.Element的数组</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">Component</span> <span class="attr">name</span>=<span class="string">&quot;bar&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">Component</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 错误: children是JSX.Element的类型，而不是JSX.Element的数组或字符串。</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">Component</span> <span class="attr">name</span>=<span class="string">&quot;baz&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  World</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">Component</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="9-8-JSX的结果类型"><a href="#9-8-JSX的结果类型" class="headerlink" title="9.8 JSX的结果类型"></a>9.8 JSX的结果类型</h2><p>默认情况下，JSX表达式的结果被打造成 <code>any</code> 类型。你可以通过指定 <code>JSX.Element</code> 接口来定制类型。然而，不可能从这个接口中检索到关于JSX的元素、属性或孩子的类型信息。它是一个黑盒子。</p><h2 id="9-9-嵌入表达式"><a href="#9-9-嵌入表达式" class="headerlink" title="9.9 嵌入表达式"></a>9.9 嵌入表达式</h2><p>JSX允许你通过用大括号（<code>&#123; &#125;</code>）包围表达式，在标签之间嵌入表达式。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> a = (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    &#123;[&quot;foo&quot;, &quot;bar&quot;].map((i) =&gt; (</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;i / 2&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    ))&#125;</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>上面的代码将导致一个错误，因为你不能用一个字符串除以一个数字。当使用 <code>preserve</code> 选项时，输出结果看起来像：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> a = (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    &#123;[&quot;foo&quot;, &quot;bar&quot;].map(function (i) &#123;</span></span><br><span class="line"><span class="language-xml">      return <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;i / 2&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span>;</span></span><br><span class="line"><span class="language-xml">    &#125;)&#125;</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="9-10-React-集成"><a href="#9-10-React-集成" class="headerlink" title="9.10 React 集成"></a>9.10 React 集成</h2><p>要在React中使用JSX，你应该使用 <a href="https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/react">React 类型</a>。这些类型化定义了 <code>JSX</code> 的命名空间，以便与React一起使用。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference path=&quot;react.d.ts&quot; /&gt;</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Props</span> &#123;</span><br><span class="line">  <span class="attr">foo</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyComponent</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&lt;<span class="title class_">Props</span>, &#123;&#125;&gt; &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;this.props.foo&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="title class_">MyComponent</span> foo=<span class="string">&quot;bar&quot;</span> /&gt;; <span class="comment">// 正确</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">MyComponent</span> <span class="attr">foo</span>=<span class="string">&#123;0&#125;</span> /&gt;</span></span>; <span class="comment">// 错误</span></span><br></pre></td></tr></table></figure><h3 id="9-10-1-配置JSX"><a href="#9-10-1-配置JSX" class="headerlink" title="9.10.1 配置JSX"></a>9.10.1 配置JSX</h3><p>有多个编译器标志可以用来定制你的JSX，它们既可以作为编译器标志，也可以通过内联的每个文件实用程序发挥作用。要了解更多信息，请看他们的tsconfig参考页：</p><ul><li><a href="https://www.typescriptlang.org/tsconfig#jsxFactory"><code>jsxFactory</code></a></li><li><a href="https://www.typescriptlang.org/tsconfig#jsxFragmentFactory"><code>jsxFragmentFactory</code></a></li><li><a href="https://www.typescriptlang.org/tsconfig#jsxImportSource"><code>jsxImportSource</code></a></li></ul><h3 id="特别声明-本文转自-古艺散人老师-，如有需要可前往原文预览查看。"><a href="#特别声明-本文转自-古艺散人老师-，如有需要可前往原文预览查看。" class="headerlink" title="特别声明: 本文转自  古艺散人老师 ，如有需要可前往原文预览查看。"></a>特别声明: 本文转自 <a href="https://github.com/lurongtao/TypeScript"> 古艺散人老师 </a>，如有需要可前往原文预览查看。</h3>]]></content>
      
      
      <categories>
          
          <category> TypeScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> TypeScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2-8、高级篇：装饰器（Decorators）</title>
      <link href="/article/32666/"/>
      <url>/article/32666/</url>
      
        <content type="html"><![CDATA[<h1 id="八、装饰器（Decorators）"><a href="#八、装饰器（Decorators）" class="headerlink" title="八、装饰器（Decorators）"></a>八、装饰器（Decorators）</h1><h2 id="8-1-简介"><a href="#8-1-简介" class="headerlink" title="8.1 简介"></a>8.1 简介</h2><p>随着TypeScript和ES6中类的引入，现在存在某些场景需要额外的功能，来支持注释或修改类和类成员。装饰器提供了一种为类声明和成员添加注释和元编程语法的方法。装饰器是JavaScript的 <a href="https://github.com/tc39/proposal-decorators">第二阶段</a>建议，并作为TypeScript的一个实验性功能提供。</p><blockquote><p>注意：装饰器是一个实验性的功能，在未来的版本中可能会改变。</p></blockquote><p>要启用对装饰器的实验性支持，你必须在命令行或在 <code>tsconfig.json</code> 中启用 <code>experimentalDecorators</code> 编译器选项。</p><ul><li><strong>命令行</strong></li></ul><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line">tsc --target <span class="title class_">ES5</span> --experimentalDecorators</span><br></pre></td></tr></table></figure><ul><li><strong>tssconfig.json</strong></li></ul><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;compilerOptions&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;target&quot;</span>: <span class="string">&quot;ES5&quot;</span>,</span><br><span class="line">    <span class="string">&quot;experimentalDecorators&quot;</span>: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8-2-装饰器"><a href="#8-2-装饰器" class="headerlink" title="8.2 装饰器"></a>8.2 装饰器</h2><p>装饰器是一种特殊的声明，可以附加到类声明、方法、访问器、属性或参数上。装饰器使用 <code>@expression</code>的形式，其中<code>expression</code>必须评估为一个函数，该函数将在运行时被调用，并带有关于被装饰的声明的信息。</p><p>例如，对于装饰器 <code>@sealed</code>，我们可以将 <code>sealed</code> 的函数写成如下:</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sealed</span>(<span class="params">target</span>) &#123;</span><br><span class="line">  <span class="comment">// 对 &quot;target&quot;做一些事情 ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8-3-装饰器工厂"><a href="#8-3-装饰器工厂" class="headerlink" title="8.3 装饰器工厂"></a>8.3 装饰器工厂</h2><p>如果我们想自定义装饰器如何应用于声明，我们可以写一个装饰器工厂。装饰器工厂是一个简单的函数，它返回将在运行时被装饰器调用的表达式。</p><p>我们可以用以下方式写一个装饰器工厂：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">color</span>(<span class="params">value: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">  <span class="comment">// 这是装饰器工厂，它设置了</span></span><br><span class="line">  <span class="comment">// 返回的装饰器函数</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">target</span>) &#123;</span><br><span class="line">    <span class="comment">// 这就是装饰器</span></span><br><span class="line">    <span class="comment">// 用 &quot;target&quot; 和 &quot;value&quot;做一些事情...</span></span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8-4-装饰器构成"><a href="#8-4-装饰器构成" class="headerlink" title="8.4 装饰器构成"></a>8.4 装饰器构成</h2><p>多个装饰器可以应用于一个声明，例如在一行中：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="meta">@f</span> <span class="meta">@g</span> x</span><br></pre></td></tr></table></figure><p>多行的语法：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="meta">@f</span></span><br><span class="line"><span class="meta">@g</span></span><br><span class="line">x</span><br></pre></td></tr></table></figure><p>当多个装饰器适用于一个声明时，它们的评估类似于数学中的 <a href="https://wikipedia.org/wiki/Function_composition">函数组合</a>。在这种模式下，当组合函数 f 和 g 时，所产生的组合<code>(f∘g)(x)</code> 等同于 <code>f(g(x))</code>。</p><p>因此，在TypeScript中对一个声明的多个装饰器进行评估时，会执行以下步骤：</p><ol><li><p>每个装饰器的表达式都是自上而下地进行评估的。</p></li><li><p>然后将结果作为函数从下往上调用。</p></li></ol><p>如果我们使用<a href="https://www.typescriptlang.org/docs/handbook/decorators.html#decorator-factories">装饰器工厂</a>，可以通过下面的例子观察这个评估顺序：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">first</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;first(): factory evaluated&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span></span><br><span class="line"><span class="params">    target: <span class="built_in">any</span>,</span></span><br><span class="line"><span class="params">    propertyKey: <span class="built_in">string</span>,</span></span><br><span class="line"><span class="params">    descriptor: PropertyDescriptor,</span></span><br><span class="line"><span class="params">  </span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;first(): called&quot;</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">second</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;second(): factory evaluated&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span></span><br><span class="line"><span class="params">    target: <span class="built_in">any</span>,</span></span><br><span class="line"><span class="params">    propertyKey: <span class="built_in">string</span>,</span></span><br><span class="line"><span class="params">    descriptor: PropertyDescriptor,</span></span><br><span class="line"><span class="params">  </span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;second(): called&quot;</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ExampleClass</span> &#123;</span><br><span class="line">  <span class="meta">@first</span>()</span><br><span class="line">  <span class="meta">@second</span>()</span><br><span class="line">  <span class="title function_">method</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这将把这个输出打印到控制台：</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">first(): factory evaluated</span><br><span class="line">second(): factory evaluated</span><br><span class="line">second(): called</span><br><span class="line">first(): called</span><br></pre></td></tr></table></figure><h2 id="8-5-装饰器评估"><a href="#8-5-装饰器评估" class="headerlink" title="8.5 装饰器评估"></a>8.5 装饰器评估</h2><p>对于应用于类内各种声明的装饰器，有一个明确的顺序：</p><ol><li>对于每个实例成员，首先是<em>参数装饰器</em>，然后是<em>方法</em>、<em>访问器</em>或<em>属性装饰器</em>。</li><li>对于每个静态成员，先是<em>参数装饰器</em>，然后是<em>方法</em>、<em>存取器</em>或<em>属性装饰器</em>。</li><li><em>参数装饰器被</em>应用于构造函数。</li><li><em>类装饰器</em>适用于类。</li></ol><h2 id="8-6-类装饰器"><a href="#8-6-类装饰器" class="headerlink" title="8.6 类装饰器"></a>8.6 类装饰器</h2><p><em>类装饰器</em>就在类声明之前被声明。类装饰器被应用于类的构造函数，可以用来观察、修改或替换类定义。类装饰器不能在声明文件中使用，也不能在任何其他环境下使用（比如在 <code>declare</code> 类上）。</p><p>类装饰器的表达式在运行时将作为一个函数被调用，被装饰的类的构造器是它唯一的参数。</p><p>如果类装饰器返回一个值，它将用提供的构造函数替换类声明。</p><blockquote><p>注意：如果你选择返回一个新的构造函数，必须注意维护原始原型。在运行时应用装饰器的逻辑不会为你这样做。</p></blockquote><p>下面是一个应用于<code>BugReport</code>类的类装饰器（<code>@sealed</code>）的例子。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="meta">@sealed</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BugReport</span> &#123;</span><br><span class="line">  <span class="keyword">type</span> = <span class="string">&quot;report&quot;</span>;</span><br><span class="line">  <span class="attr">title</span>: <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">t: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">title</span> = t;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以用下面的函数声明来定义<code>@sealed</code>装饰器。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sealed</span>(<span class="params">constructor: <span class="built_in">Function</span></span>) &#123;</span><br><span class="line">  <span class="title class_">Object</span>.<span class="title function_">seal</span>(constructor);</span><br><span class="line">  <span class="title class_">Object</span>.<span class="title function_">seal</span>(constructor.<span class="property"><span class="keyword">prototype</span></span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当<code>@sealed</code>被执行时，它将同时封闭构造函数和它的原型，因此将阻止在运行时通过访问<code>BugReport.prototype</code>或通过定义<code>BugReport</code>本身的属性来向该类添加或删除任何进一步的功能（注意ES2015类实际上只是基于原型的构造函数的语法糖）。这个装饰器并不能阻止类对<code>BugReport</code>进行子类化。</p><p>接下来我们有一个如何覆盖构造函数以设置新的默认值的例子：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> reportableClassDecorator&lt;T <span class="keyword">extends</span> &#123; <span class="keyword">new</span> (...<span class="attr">args</span>: <span class="built_in">any</span>[]): &#123;&#125; &#125;&gt;(</span><br><span class="line">  <span class="attr">constructor</span>: T,</span><br><span class="line">) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">class</span> <span class="title class_">extends</span> constructor &#123;</span><br><span class="line">    reportingURL = <span class="string">&quot;http://www...&quot;</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@reportableClassDecorator</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BugReport</span> &#123;</span><br><span class="line">  <span class="keyword">type</span> = <span class="string">&quot;report&quot;</span>;</span><br><span class="line">  <span class="attr">title</span>: <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">t: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">title</span> = t;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> bug = <span class="keyword">new</span> <span class="title class_">BugReport</span>(<span class="string">&quot;Needs dark mode&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(bug.<span class="property">title</span>); <span class="comment">// 打印 &quot;Needs dark mode&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(bug.<span class="property">type</span>); <span class="comment">// 打印 &quot;report&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意，装饰器不会改变TypeScript的类型</span></span><br><span class="line"><span class="comment">// 因此，类型系统对新的属性`reportingURL`是不可知的。</span></span><br><span class="line">bug.<span class="property">reportingURL</span>;</span><br></pre></td></tr></table></figure><img src="/img/TypeScript/11-08.png" alt="image-20211224200305351" style="zoom:50%;" /><h2 id="8-7-方法装饰器"><a href="#8-7-方法装饰器" class="headerlink" title="8.7 方法装饰器"></a>8.7 方法装饰器</h2><p>方法装饰器就在方法声明之前被声明。该装饰器被应用于方法的属性描述符，可以用来观察、修改或替换方法定义。方法装饰器不能在声明文件中使用，不能在重载上使用，也不能在任何其他环境下使用（比如在 <code>declare</code>类中）。</p><p>方法装饰器的表达式将在运行时作为一个函数被调用，有以下三个参数：</p><ol><li>静态成员的类的构造函数，或者实例成员的类的原型。</li><li>成员的名称。</li><li>该成员的属性描述符。</li></ol><blockquote><p>注意：如果你的脚本目标小于ES5，<em>属性描述符</em>将无法定义。</p></blockquote><p>如果方法装饰器返回一个值，它将被用作方法的<em>属性描述符</em>。</p><blockquote><p>注意：如果你的脚本目标小于ES5，返回值会被忽略。</p></blockquote><p>下面是一个方法装饰器（<code>@enumerable</code>）应用于<code>Greeter</code>类的一个方法的例子：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Greeter</span> &#123;</span><br><span class="line">  <span class="attr">greeting</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">message: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">greeting</span> = message;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@enumerable</span>(<span class="literal">false</span>)</span><br><span class="line">  <span class="title function_">greet</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Hello, &quot;</span> + <span class="variable language_">this</span>.<span class="property">greeting</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以用下面的函数声明来定义<code>@enumerable</code>装饰器：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">enumerable</span>(<span class="params">value: <span class="built_in">boolean</span></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span></span><br><span class="line"><span class="params">    target: <span class="built_in">any</span>,</span></span><br><span class="line"><span class="params">    propertyKey: <span class="built_in">string</span>,</span></span><br><span class="line"><span class="params">    descriptor: PropertyDescriptor,</span></span><br><span class="line"><span class="params">  </span>) &#123;</span><br><span class="line">    descriptor.<span class="property">enumerable</span> = value;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的<code>@enumerable(false)</code>装饰器是一个 <a href="https://www.typescriptlang.org/docs/handbook/decorators.html#decorator-factories">装饰器工厂</a>。当<code>@enumerable(false)</code>装饰器被调用时，它修改了属性描述符的<code>enumerable</code>属性。</p><h2 id="8-8-访问器装饰器"><a href="#8-8-访问器装饰器" class="headerlink" title="8.8 访问器装饰器"></a>8.8 访问器装饰器</h2><p>一个访问器装饰器就在访问器声明之前被声明。访问器装饰器被应用于访问器的属性描述符，可以用来观察、修改或替换访问器的定义。一个访问器装饰器不能在声明文件中使用，也不能在任何其他环境中使用（比如在<code>declare</code>类中）。</p><blockquote><p>注意：TypeScript不允许装饰单个成员的 <code>get</code>和<code>set</code>访问器。相反，该成员的所有装饰器必须应用于文件顺序中指定的第一个访问器。这是因为装饰器适用于一个<em>属性描述符</em>，它结合了获取和设置访问器，而不是每个声明单独。</p></blockquote><p>访问器装饰器的表达式将在运行时作为一个函数被调用，有以下三个参数：</p><ol><li>静态成员的类的构造函数，或者实例成员的类的原型。</li><li>成员的名称。</li><li>该成员的属性描述符。</li></ol><blockquote><p>注意：如果你的脚本目标小于ES5，<em>属性描述符</em>将无法定义。</p></blockquote><p>如果访问器装饰器返回一个值，它将被用作该成员的<em>属性描述符</em>。</p><blockquote><p>注意：如果你的脚本目标小于ES5，返回值会被忽略。</p></blockquote><p>下面是一个访问器装饰器（<code>@configurable</code>）的例子，它应用于<code>Point</code>类的一个成员。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Point</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="attr">_x</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="keyword">private</span> <span class="attr">_y</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_x</span> = x;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_y</span> = y;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@configurable</span>(<span class="literal">false</span>)</span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">x</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">_x</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@configurable</span>(<span class="literal">false</span>)</span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">y</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">_y</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以用下面的函数声明来定义<code>@configurable</code>装饰器：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">configurable</span>(<span class="params">value: <span class="built_in">boolean</span></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span></span><br><span class="line"><span class="params">    target: <span class="built_in">any</span>,</span></span><br><span class="line"><span class="params">    propertyKey: <span class="built_in">string</span>,</span></span><br><span class="line"><span class="params">    descriptor: PropertyDescriptor,</span></span><br><span class="line"><span class="params">  </span>) &#123;</span><br><span class="line">    descriptor.<span class="property">configurable</span> = value;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8-9-属性装饰器"><a href="#8-9-属性装饰器" class="headerlink" title="8.9 属性装饰器"></a>8.9 属性装饰器</h2><p>一个<em>属性装饰器</em>就在一个属性声明之前被声明。一个属性装饰器不能在声明文件中使用，也不能在任何其他环境下使用（比如在 <code>declare</code> 类中）。</p><p>属性装饰器的表达式将在运行时作为一个函数被调用，有以下两个参数：</p><ol><li>静态成员的类的构造函数，或者实例成员的类的原型。</li><li>成员的名称。</li></ol><blockquote><p>注意：由于<em>属性装饰器</em>在TypeScript中的初始化方式，属性描述符不会作为参数提供给属性装饰器。这是因为目前没有机制在定义原型成员时描述一个实例属性，也没有办法观察或修改一个属性的初始化器。返回值也被忽略了。因此，一个属性装饰器只能用来观察一个类的特定名称的属性已经被声明。</p></blockquote><p>我们可以使用这些信息来记录关于该属性的元数据，如下面的例子：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Greeter</span> &#123;</span><br><span class="line">  <span class="meta">@format</span>(<span class="string">&quot;Hello, %s&quot;</span>)</span><br><span class="line">  <span class="attr">greeting</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">message: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">greeting</span> = message;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">greet</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> formatString = <span class="title function_">getFormat</span>(<span class="variable language_">this</span>, <span class="string">&quot;greeting&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> formatString.<span class="title function_">replace</span>(<span class="string">&quot;%s&quot;</span>, <span class="variable language_">this</span>.<span class="property">greeting</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后我们可以使用以下函数声明来定义<code>@format</code>装饰器和<code>getFormat</code>函数。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;reflect-metadata&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> formatMetadataKey = <span class="title class_">Symbol</span>(<span class="string">&quot;format&quot;</span>);</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">format</span>(<span class="params">formatString: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Reflect</span>.<span class="title function_">metadata</span>(formatMetadataKey, formatString);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getFormat</span>(<span class="params">target: <span class="built_in">any</span>, propertyKey: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Reflect</span>.<span class="title function_">getMetadata</span>(formatMetadataKey, target, propertyKey);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的<code>@format(&quot;Hello, %s&quot;) </code>装饰器是一个<a href="https://www.typescriptlang.org/docs/handbook/decorators.html#decorator-factories">装饰器工厂</a>。当<code>@format(&quot;Hello, %s&quot;)</code>被调用时，它使用<code>reflect-metadata</code>库中的<code>Reflect.metadata</code>函数为该属性添加一个元数据条目。当<code>getFormat</code>被调用时，它读取该格式的元数据值。</p><blockquote><p>注意：这个例子需要<code>reflect-metadata</code>库。关于<code>reflect-metadata</code>库的更多信息，请参见<a href="https://www.typescriptlang.org/docs/handbook/decorators.html#metadata">Metadata</a>。</p></blockquote><h2 id="8-10-参数装饰器"><a href="#8-10-参数装饰器" class="headerlink" title="8.10 参数装饰器"></a>8.10 参数装饰器</h2><p><em>参数装饰器</em>就在参数声明之前被声明。参数装饰器被应用于类构造器或方法声明的函数。一个参数装饰器不能在声明文件、重载或任何其他环境中使用（比如在 <code>declare</code> 类中）。</p><p>参数装饰器的表达式将在运行时作为一个函数被调用，有以下三个参数：</p><ol><li>对于静态成员，可以是该类的构造函数，对于实例成员，可以是该类的原型。</li><li>该成员的名称。</li><li>参数在函数的参数列表中的序数索引。</li></ol><blockquote><p>注意：一个参数装饰器只能用来观察一个方法上已经声明了一个参数。</p></blockquote><p>参数装饰器的返回值被忽略了。</p><p>下面是一个参数装饰器（<code>@required</code>）应用于<code>BugReport</code>类的一个成员的参数的例子：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">BugReport</span> &#123;</span><br><span class="line">  <span class="keyword">type</span> = <span class="string">&quot;report&quot;</span>;</span><br><span class="line">  <span class="attr">title</span>: <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">t: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">title</span> = t;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@validate</span></span><br><span class="line">  <span class="title function_">print</span>(<span class="params"><span class="meta">@required</span> verbose: <span class="built_in">boolean</span></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (verbose) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">`type: <span class="subst">$&#123;<span class="variable language_">this</span>.<span class="keyword">type</span>&#125;</span>\ntitle: <span class="subst">$&#123;<span class="variable language_">this</span>.title&#125;</span>`</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">title</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后我们可以使用以下函数声明来定义<code>@required</code>和<code>@validate</code>装饰器。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;reflect-metadata&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> requiredMetadataKey = <span class="title class_">Symbol</span>(<span class="string">&quot;required&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">required</span>(<span class="params"></span></span><br><span class="line"><span class="params">  target: <span class="built_in">Object</span>,</span></span><br><span class="line"><span class="params">  propertyKey: <span class="built_in">string</span> | <span class="built_in">symbol</span>,</span></span><br><span class="line"><span class="params">  parameterIndex: <span class="built_in">number</span>,</span></span><br><span class="line"><span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> <span class="attr">existingRequiredParameters</span>: <span class="built_in">number</span>[] =</span><br><span class="line">    <span class="title class_">Reflect</span>.<span class="title function_">getOwnMetadata</span>(requiredMetadataKey, target, propertyKey) || [];</span><br><span class="line">  existingRequiredParameters.<span class="title function_">push</span>(parameterIndex);</span><br><span class="line">  <span class="title class_">Reflect</span>.<span class="title function_">defineMetadata</span>(</span><br><span class="line">    requiredMetadataKey,</span><br><span class="line">    existingRequiredParameters,</span><br><span class="line">    target,</span><br><span class="line">    propertyKey,</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">validate</span>(<span class="params"></span></span><br><span class="line"><span class="params">  target: <span class="built_in">any</span>,</span></span><br><span class="line"><span class="params">  propertyName: <span class="built_in">string</span>,</span></span><br><span class="line"><span class="params">  descriptor: TypedPropertyDescriptor&lt;<span class="built_in">Function</span>&gt;,</span></span><br><span class="line"><span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> method = descriptor.<span class="property">value</span>!;</span><br><span class="line"></span><br><span class="line">  descriptor.<span class="property">value</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="attr">requiredParameters</span>: <span class="built_in">number</span>[] = <span class="title class_">Reflect</span>.<span class="title function_">getOwnMetadata</span>(</span><br><span class="line">      requiredMetadataKey,</span><br><span class="line">      target,</span><br><span class="line">      propertyName,</span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">if</span> (requiredParameters) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> parameterIndex <span class="keyword">of</span> requiredParameters) &#123;</span><br><span class="line">        <span class="keyword">if</span> (</span><br><span class="line">          parameterIndex &gt;= <span class="variable language_">arguments</span>.<span class="property">length</span> ||</span><br><span class="line">          <span class="variable language_">arguments</span>[parameterIndex] === <span class="literal">undefined</span></span><br><span class="line">        ) &#123;</span><br><span class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;Missing required argument.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> method.<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>@required</code>装饰器添加了一个元数据条目，将参数标记为必填。然后，<code>@validate</code>装饰器将现有的<code>greet</code>方法包装在一个函数中，在调用原始方法之前验证参数。</p><blockquote><p>注意：这个例子需要<code>reflect-metadata</code>库。关于<code>reflect-metadata</code>库的更多信息，请参见<a href="https://www.typescriptlang.org/docs/handbook/decorators.html#metadata">Metadata</a> 。</p></blockquote><h2 id="8-11-Metadata"><a href="#8-11-Metadata" class="headerlink" title="8.11 Metadata"></a>8.11 Metadata</h2><p>一些例子使用了<code>reflect-metadata</code>库，它为一个<a href="https://github.com/rbuckton/ReflectDecorators">实验性的元数据API</a>. 添加了一个<code>polyfill</code>。这个库还不是ECMAScript（JavaScript）标准的一部分。然而，一旦装饰器被正式采纳为ECMAScript标准的一部分，这些扩展将被提议采纳。</p><p>你可以通过npm来安装这个库：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm i reflect-metadata --save</span><br></pre></td></tr></table></figure><p>TypeScript包括试验性的支持，为具有装饰器的声明排放某些类型的元数据。要启用这个实验性支持，你必须在命令行或在你的<code>tsconfig.json</code>中设置<code>emitDecoratorMetadata</code>编译器选项。</p><ul><li><strong>Command Line</strong></li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tsc --target ES5 --experimentalDecorators --emitDecoratorMetadata</span><br></pre></td></tr></table></figure><ul><li><strong>tsconfig.json</strong></li></ul><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;target&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ES5&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;experimentalDecorators&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;emitDecoratorMetadata&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>启用后，只要导入了<code>reflect-metadata</code>库，额外的设计时类型信息就会在运行时暴露。</p><p>我们可以在下面的例子中看到这个作用：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;reflect-metadata&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Point</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span></span><br><span class="line"><span class="params">    <span class="keyword">public</span> x: <span class="built_in">number</span>,</span></span><br><span class="line"><span class="params">    <span class="keyword">public</span> y: <span class="built_in">number</span>,</span></span><br><span class="line"><span class="params">  </span>) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Line</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="attr">_start</span>: <span class="title class_">Point</span>;</span><br><span class="line">  <span class="keyword">private</span> <span class="attr">_end</span>: <span class="title class_">Point</span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@validate</span></span><br><span class="line">  <span class="keyword">set</span> <span class="title function_">start</span>(<span class="params">value: Point</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_start</span> = value;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">start</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">_start</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@validate</span></span><br><span class="line">  <span class="keyword">set</span> <span class="title function_">end</span>(<span class="params">value: Point</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_end</span> = value;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">end</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">_end</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> validate&lt;T&gt;(</span><br><span class="line">  <span class="attr">target</span>: <span class="built_in">any</span>,</span><br><span class="line">  <span class="attr">propertyKey</span>: <span class="built_in">string</span>,</span><br><span class="line">  <span class="attr">descriptor</span>: <span class="title class_">TypedPropertyDescriptor</span>&lt;T&gt;,</span><br><span class="line">) &#123;</span><br><span class="line">  <span class="keyword">let</span> set = descriptor.<span class="property">set</span>!;</span><br><span class="line"></span><br><span class="line">  descriptor.<span class="property">set</span> = <span class="keyword">function</span> (<span class="params">value: T</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">type</span> = <span class="title class_">Reflect</span>.<span class="title function_">getMetadata</span>(<span class="string">&quot;design:type&quot;</span>, target, propertyKey);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!(value <span class="keyword">instanceof</span> <span class="keyword">type</span>)) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TypeError</span>(</span><br><span class="line">        <span class="string">`Invalid type, got <span class="subst">$&#123;<span class="keyword">typeof</span> value&#125;</span> not <span class="subst">$&#123;<span class="keyword">type</span>.name&#125;</span>.`</span>,</span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    set.<span class="title function_">call</span>(<span class="variable language_">this</span>, value);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> line = <span class="keyword">new</span> <span class="title class_">Line</span>();</span><br><span class="line">line.<span class="property">start</span> = <span class="keyword">new</span> <span class="title class_">Point</span>(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// @ts-ignore</span></span><br><span class="line"><span class="comment">// line.end = &#123;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 运行时会失败:</span></span><br><span class="line"><span class="comment">// &gt; Invalid type, got object not Point</span></span><br></pre></td></tr></table></figure><p>TypeScript编译器将使用<code>@Reflect.metadata</code>装饰器注入设计时类型信息。你可以认为它相当于下面的TypeScript：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Line</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="attr">_start</span>: <span class="title class_">Point</span>;</span><br><span class="line">  <span class="keyword">private</span> <span class="attr">_end</span>: <span class="title class_">Point</span>;</span><br><span class="line">  <span class="meta">@validate</span></span><br><span class="line">  <span class="meta">@Reflect</span>.<span class="title function_">metadata</span>(<span class="string">&quot;design:type&quot;</span>, <span class="title class_">Point</span>)</span><br><span class="line">  <span class="keyword">set</span> <span class="title function_">start</span>(<span class="params">value: Point</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_start</span> = value;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">start</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">_start</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="meta">@validate</span></span><br><span class="line">  <span class="meta">@Reflect</span>.<span class="title function_">metadata</span>(<span class="string">&quot;design:type&quot;</span>, <span class="title class_">Point</span>)</span><br><span class="line">  <span class="keyword">set</span> <span class="title function_">end</span>(<span class="params">value: Point</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_end</span> = value;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">end</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">_end</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意：装饰器元数据是一个实验性的功能，在未来的版本中可能会引入破坏性的变化。</p></blockquote><h3 id="特别声明-本文转自-古艺散人老师-，如有需要可前往原文预览查看。"><a href="#特别声明-本文转自-古艺散人老师-，如有需要可前往原文预览查看。" class="headerlink" title="特别声明: 本文转自  古艺散人老师 ，如有需要可前往原文预览查看。"></a>特别声明: 本文转自 <a href="https://github.com/lurongtao/TypeScript"> 古艺散人老师 </a>，如有需要可前往原文预览查看。</h3>]]></content>
      
      
      <categories>
          
          <category> TypeScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> TypeScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2-7、高级篇：迭代器和生成器</title>
      <link href="/article/9376/"/>
      <url>/article/9376/</url>
      
        <content type="html"><![CDATA[<h1 id="七、迭代器和生成器"><a href="#七、迭代器和生成器" class="headerlink" title="七、迭代器和生成器"></a>七、迭代器和生成器</h1><h2 id="7-1-遍历"><a href="#7-1-遍历" class="headerlink" title="7.1 遍历"></a>7.1 遍历</h2><p>如果一个对象有 <code>Symbol.iterator</code> 属性的实现，它就被认为是可迭代的。一些内置类型，如<code>Array</code>、<code>Map</code>、<code>Set</code>、<code>String</code>、<code>Int32Array</code>、<code>Uint32Array</code>等，已经实现了它们的<code>Symbol.iterator</code>属性。对象上的<code>Symbol.iterator</code>函数负责返回要迭代的值的列表。</p><h3 id="7-1-1-Iterable接口"><a href="#7-1-1-Iterable接口" class="headerlink" title="7.1.1 Iterable接口"></a>7.1.1 <code>Iterable</code>接口</h3><p><code>Iterable</code>是一个我们可以使用的类型，如果我们想接收上面列出的可迭代的类型。下面是一个例子：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> toArray&lt;X&gt;(<span class="attr">xs</span>: <span class="title class_">Iterable</span>&lt;X&gt;): X[] &#123;</span><br><span class="line">  <span class="keyword">return</span> [...xs];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-1-2-for-of-声明"><a href="#7-1-2-for-of-声明" class="headerlink" title="7.1.2 for..of 声明"></a>7.1.2 <code>for..of</code> 声明</h3><p><code>for...of</code>在一个可迭代对象上循环，调用对象上的<code>Symbol.iterator</code>属性。下面是一个关于数组的简单<code>for.of</code>循环。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> someArray = [<span class="number">1</span>, <span class="string">&quot;string&quot;</span>, <span class="literal">false</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> entry <span class="keyword">of</span> someArray) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(entry); <span class="comment">// 1, &quot;string&quot;, false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-1-3-for-of与for-in声明"><a href="#7-1-3-for-of与for-in声明" class="headerlink" title="7.1.3 for..of与for..in声明"></a>7.1.3 <code>for..of</code>与<code>for..in</code>声明</h3><p><code>for...of</code>和<code>for...in</code>语句都是在列表上进行迭代；但迭代的值是不同的，<code>for...in</code>返回被迭代对象的键值列表，而<code>for...of</code>返回被迭代对象的数字属性值列表。</p><p>这里有一个例子可以证明这种区别：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> list = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">in</span> list) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(i); <span class="comment">// &quot;0&quot;, &quot;1&quot;, &quot;2&quot;,</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">of</span> list) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(i); <span class="comment">// 4, 5, 6</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另一个区别是<code>for...in</code>对任何对象进行操作；它作为一种检查该对象上的属性的方法。另一方面，<code>for...of</code>主要对可迭代对象的值感兴趣。像<code>Map</code>和<code>Set</code>这样的内置对象实现了<code>Symbol.iterator</code>属性，允许访问存储的值。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> pets = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="string">&quot;Cat&quot;</span>, <span class="string">&quot;Dog&quot;</span>, <span class="string">&quot;Hamster&quot;</span>]);</span><br><span class="line">pets[<span class="string">&quot;species&quot;</span>] = <span class="string">&quot;mammals&quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> pet <span class="keyword">in</span> pets) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(pet); <span class="comment">// &quot;species&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> pet <span class="keyword">of</span> pets) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(pet); <span class="comment">// &quot;Cat&quot;, &quot;Dog&quot;, &quot;Hamster&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-2-代码生成"><a href="#7-2-代码生成" class="headerlink" title="7.2 代码生成"></a>7.2 代码生成</h2><h3 id="7-2-1-生成目标-ES5-和-ES3"><a href="#7-2-1-生成目标-ES5-和-ES3" class="headerlink" title="7.2.1 生成目标 ES5 和 ES3"></a>7.2.1 生成目标 ES5 和 ES3</h3><p>当针对ES5或ES3兼容的引擎时，迭代器只允许在 <code>Array</code> 类型的值上使用。在非数组值上使用 <code>for...of</code> 循环是一个错误，即使这些非数组值实现了 <code>Symbol.iterator</code> 属性。</p><p>例如，编译器将为<code>for...</code>的循环生成一个简单的<code>for</code>循环。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> num <span class="keyword">of</span> numbers) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(num);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将被生成为：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> _i = <span class="number">0</span>; _i &lt; numbers.<span class="property">length</span>; _i++) &#123;</span><br><span class="line">  <span class="keyword">var</span> num = numbers[_i];</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(num);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-2-2-ECMAScript-2015-和-更高版本"><a href="#7-2-2-ECMAScript-2015-和-更高版本" class="headerlink" title="7.2.2 ECMAScript 2015 和 更高版本"></a>7.2.2 ECMAScript 2015 和 更高版本</h3><p>当针对ECMAScipt 2015兼容的引擎时，编译器将生成 <code>for...of</code> 循环，以针对引擎中的内置迭代器实现。</p><h3 id="特别声明-本文转自-古艺散人老师-，如有需要可前往原文预览查看。"><a href="#特别声明-本文转自-古艺散人老师-，如有需要可前往原文预览查看。" class="headerlink" title="特别声明: 本文转自  古艺散人老师 ，如有需要可前往原文预览查看。"></a>特别声明: 本文转自 <a href="https://github.com/lurongtao/TypeScript"> 古艺散人老师 </a>，如有需要可前往原文预览查看。</h3>]]></content>
      
      
      <categories>
          
          <category> TypeScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> TypeScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2-6、高级篇：类型兼容性</title>
      <link href="/article/44933/"/>
      <url>/article/44933/</url>
      
        <content type="html"><![CDATA[<h1 id="六、类型兼容性"><a href="#六、类型兼容性" class="headerlink" title="六、类型兼容性"></a>六、类型兼容性</h1><p>TypeScript中的类型兼容性是基于结构子类型的。结构分型是一种完全基于其成员的类型关系的方式。这与名义类型不同。考虑一下下面的代码：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Pet</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">pet</span>: <span class="title class_">Pet</span>;</span><br><span class="line"><span class="comment">// 正确，因为结构化类型</span></span><br><span class="line">pet = <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br></pre></td></tr></table></figure><p>在像 <code>C#</code>或<code>Java</code>这样的名义类型语言中，相应的代码将是一个错误，因为 <code>Dog</code> 类没有明确地描述自己是 <code>Pet</code> 接口的实现者。</p><p>TypeScript的结构类型系统是根据JavaScript代码的典型写法设计的。因为JavaScript广泛使用匿名对象，如函数表达式和对象字面量，用结构类型系统而不是命名类型系统来表示JavaScript库中的各种关系要自然得多。</p><h2 id="6-1-关于健全性的说明"><a href="#6-1-关于健全性的说明" class="headerlink" title="6.1 关于健全性的说明"></a>6.1 关于健全性的说明</h2><p>TypeScript 的类型系统允许某些在编译时无法知道的操作是安全的。当一个类型系统具有这种属性时，它被称为不 “健全”。我们仔细考虑了 TypeScript 允许不健全行为的地方，在这篇文档中，我们将解释这些发生的地方以及它们背后的动机情景。</p><h2 id="6-2-起步"><a href="#6-2-起步" class="headerlink" title="6.2 起步"></a>6.2 起步</h2><p>TypeScript的结构类型系统的基本规则是，如果 <code>y</code> 至少有与 <code>x</code> 相同的成员，那么 <code>x</code> 与 <code>y</code> 是兼容的。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Pet</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">pet</span>: <span class="title class_">Pet</span>;</span><br><span class="line"><span class="comment">// dog&#x27;s 推断类型是 &#123; name: string; owner: string; &#125;</span></span><br><span class="line"><span class="keyword">let</span> dog = &#123; <span class="attr">name</span>: <span class="string">&quot;Lassie&quot;</span>, <span class="attr">owner</span>: <span class="string">&quot;Rudd Weatherwax&quot;</span> &#125;;</span><br><span class="line">pet = dog;</span><br></pre></td></tr></table></figure><p>为了检查 <code>dog</code> 是否可以被分配给 <code>pet</code>，编译器检查 <code>pet</code> 的每个属性，以找到 <code>dog</code> 中相应的兼容属性。在这种情况下，<code>dog</code> 必须有一个名为 <code>name</code> 的成员，它是一个字符串。它有，所以赋值是允许的。</p><p>在检查函数调用参数时，也使用了同样的赋值规则。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Pet</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> dog = &#123; <span class="attr">name</span>: <span class="string">&quot;Lassie&quot;</span>, <span class="attr">owner</span>: <span class="string">&quot;Rudd Weatherwax&quot;</span> &#125;;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">greet</span>(<span class="params">pet: Pet</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hello, &quot;</span> + pet.<span class="property">name</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">greet</span>(dog); <span class="comment">// 正确</span></span><br></pre></td></tr></table></figure><p>请注意，<code>dog</code> 有一个额外的 <code>owner</code> 属性，但这并不产生错误。在检查兼容性时，只考虑目标类型（本例中为 <code>Pet</code>）的成员。</p><p>这个比较过程是递归进行的，探索每个成员和子成员的类型。</p><h2 id="6-3-对比两个函数"><a href="#6-3-对比两个函数" class="headerlink" title="6.3 对比两个函数"></a>6.3 对比两个函数</h2><p>虽然比较原始类型和对象类型是相对直接的，但什么样的函数应该被认为是兼容的，这个问题就有点复杂了。让我们从两个函数的基本例子开始，这两个函数只在参数列表上有所不同：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title function_">x</span> = (<span class="params">a: <span class="built_in">number</span></span>) =&gt; <span class="number">0</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="title function_">y</span> = (<span class="params">b: <span class="built_in">number</span>, s: <span class="built_in">string</span></span>) =&gt; <span class="number">0</span>;</span><br><span class="line">y = x; <span class="comment">// 正确</span></span><br><span class="line">x = y; <span class="comment">// 错误</span></span><br></pre></td></tr></table></figure><p>为了检查 <code>x</code> 是否可以分配给 <code>y</code>，我们首先看一下参数列表。<code>x</code> 中的每个参数在 <code>y</code> 中都必须有一个类型兼容的对应参数。注意，参数的名称不被考虑，只考虑它们的类型。在这种情况下，<code>x</code> 中的每个参数在 <code>y</code> 中都有一个对应的兼容参数，所以这个赋值是允许的。</p><p>第二个赋值是一个错误，因为 <code>y</code> 有一个 <code>x</code> 没有的必要的第二个参数，所以这个赋值是不允许的。</p><p>你可能想知道为什么我们允许像例子中的 <code>y = x</code> 那样 “丢弃 “参数。这个赋值被允许的原因是，忽略额外的函数参数在JavaScript中其实很常见。例如，<code>Array#forEach</code>为回调函数提供了三个参数：数组元素、其索引和包含数组。尽管如此，提供一个只使用第一个参数的回调是非常有用的：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> items = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="comment">// 不要强迫这些额外参数</span></span><br><span class="line">items.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item, index, array</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(item));</span><br><span class="line"><span class="comment">// 应该没有问题!</span></span><br><span class="line">items.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(item));</span><br></pre></td></tr></table></figure><p>现在让我们看看如何处理返回类型，使用两个只因返回类型不同的函数：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title function_">x</span> = (<span class="params"></span>) =&gt; (&#123; <span class="attr">name</span>: <span class="string">&quot;Alice&quot;</span> &#125;);</span><br><span class="line"><span class="keyword">let</span> <span class="title function_">y</span> = (<span class="params"></span>) =&gt; (&#123; <span class="attr">name</span>: <span class="string">&quot;Alice&quot;</span>, <span class="attr">location</span>: <span class="string">&quot;Seattle&quot;</span> &#125;);</span><br><span class="line">x = y; <span class="comment">// 正确</span></span><br><span class="line">y = x; <span class="comment">// 错误，因为x()缺少一个location属性</span></span><br></pre></td></tr></table></figure><p>类型系统强制要求源函数的返回类型是目标类型的返回类型的一个子类型。</p><h2 id="6-4-函数参数的双差性"><a href="#6-4-函数参数的双差性" class="headerlink" title="6.4 函数参数的双差性"></a>6.4 函数参数的双差性</h2><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">EventType</span> &#123;</span><br><span class="line">  <span class="title class_">Mouse</span>,</span><br><span class="line">  <span class="title class_">Keyboard</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Event</span> &#123;</span><br><span class="line">  <span class="attr">timestamp</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">MyMouseEvent</span> <span class="keyword">extends</span> <span class="title class_">Event</span> &#123;</span><br><span class="line">  <span class="attr">x</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">y</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">MyKeyEvent</span> <span class="keyword">extends</span> <span class="title class_">Event</span> &#123;</span><br><span class="line">  <span class="attr">keyCode</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">listenEvent</span>(<span class="params">eventType: EventType, handler: (n: Event) =&gt; <span class="built_in">void</span></span>) &#123;</span><br><span class="line">  <span class="comment">/* ... */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 不健全，但有用且常见</span></span><br><span class="line"><span class="title function_">listenEvent</span>(<span class="title class_">EventType</span>.<span class="property">Mouse</span>, <span class="function">(<span class="params">e: MyMouseEvent</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">x</span> + <span class="string">&quot;,&quot;</span> + e.<span class="property">y</span>));</span><br><span class="line"><span class="comment">// 在健全性存在的情况下，不可取的选择</span></span><br><span class="line"><span class="title function_">listenEvent</span>(<span class="title class_">EventType</span>.<span class="property">Mouse</span>, <span class="function">(<span class="params">e: Event</span>) =&gt;</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>((e <span class="keyword">as</span> <span class="title class_">MyMouseEvent</span>).<span class="property">x</span> + <span class="string">&quot;,&quot;</span> + (e <span class="keyword">as</span> <span class="title class_">MyMouseEvent</span>).<span class="property">y</span>),</span><br><span class="line">);</span><br><span class="line"><span class="title function_">listenEvent</span>(<span class="title class_">EventType</span>.<span class="property">Mouse</span>, (<span class="function">(<span class="params">e: MyMouseEvent</span>) =&gt;</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">x</span> + <span class="string">&quot;,&quot;</span> + e.<span class="property">y</span>)) <span class="keyword">as</span> (<span class="attr">e</span>: <span class="title class_">Event</span>) =&gt; <span class="built_in">void</span>);</span><br><span class="line"><span class="comment">// 仍然不允许（明确的错误）。对于完全不兼容的类型强制执行类型安全</span></span><br><span class="line"><span class="title function_">listenEvent</span>(<span class="title class_">EventType</span>.<span class="property">Mouse</span>, <span class="function">(<span class="params">e: <span class="built_in">number</span></span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(e));</span><br></pre></td></tr></table></figure><p>当这种情况发生时，你可以让TypeScript通过编译器标志 <a href="https://www.typescriptlang.org/tsconfig#strictFunctionTypes"><code>strictFunctionTypes</code></a>引发错误。</p><h2 id="6-5-可选参数和其余参数"><a href="#6-5-可选参数和其余参数" class="headerlink" title="6.5 可选参数和其余参数"></a>6.5 可选参数和其余参数</h2><p>在比较函数的兼容性时，可选参数和必需参数是可以互换的。源类型的额外可选参数不是错误，而目标类型的可选参数在源类型中没有对应的参数也不是错误。</p><p>当一个函数有一个剩余参数时，它被当作是一个无限的可选参数系列。</p><p>从类型系统的角度来看，这是不健全的，但从运行时的角度来看，可选参数的概念一般不会得到很好的加强，因为在这个位置传递 <code>undefined</code> 的参数对大多数函数来说是等价的。</p><p>激励性的例子是一个函数的常见模式，它接受一个回调，并用一些可预测的（对程序员）但未知的（对类型系统）参数数量来调用它。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">invokeLater</span>(<span class="params">args: <span class="built_in">any</span>[], callback: (...args: <span class="built_in">any</span>[]) =&gt; <span class="built_in">void</span></span>) &#123;</span><br><span class="line">  <span class="comment">/* ... 用&#x27;args&#x27;调用回调 ... */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 不健全 - invokeLater &quot;可能 &quot;提供任何数量的参数</span></span><br><span class="line"><span class="title function_">invokeLater</span>([<span class="number">1</span>, <span class="number">2</span>], <span class="function">(<span class="params">x, y</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(x + <span class="string">&quot;, &quot;</span> + y));</span><br><span class="line"><span class="comment">// 令人困惑的是（x和y实际上是需要的），而且是无法发现的</span></span><br><span class="line"><span class="title function_">invokeLater</span>([<span class="number">1</span>, <span class="number">2</span>], <span class="function">(<span class="params">x?, y?</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(x + <span class="string">&quot;, &quot;</span> + y));</span><br></pre></td></tr></table></figure><h2 id="6-6-带有重载的函数"><a href="#6-6-带有重载的函数" class="headerlink" title="6.6 带有重载的函数"></a>6.6 带有重载的函数</h2><p>当一个函数有重载时，源类型中的每个重载必须由目标类型上的兼容签名来匹配。这保证了目标函数可以在所有与源函数相同的情况下被调用。</p><h2 id="6-7-枚举"><a href="#6-7-枚举" class="headerlink" title="6.7 枚举"></a>6.7 枚举</h2><p>枚举与数字兼容，而数字与枚举兼容。来自不同枚举类型的枚举值被认为是不兼容的。比如说：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Status</span> &#123;</span><br><span class="line">  <span class="title class_">Ready</span>,</span><br><span class="line">  <span class="title class_">Waiting</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">Color</span> &#123;</span><br><span class="line">  <span class="title class_">Red</span>,</span><br><span class="line">  <span class="title class_">Blue</span>,</span><br><span class="line">  <span class="title class_">Green</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> status = <span class="title class_">Status</span>.<span class="property">Ready</span>;</span><br><span class="line">status = <span class="title class_">Color</span>.<span class="property">Green</span>; <span class="comment">// 错误</span></span><br></pre></td></tr></table></figure><h2 id="6-8-类"><a href="#6-8-类" class="headerlink" title="6.8 类"></a>6.8 类</h2><p>类的工作方式与对象字面类型和接口类似，但有一个例外：它们同时具有静态和实例类型。当比较一个类类型的两个对象时，只有实例的成员被比较。静态成员和构造函数不影响兼容性。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">  <span class="attr">feet</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name: <span class="built_in">string</span>, numFeet: <span class="built_in">number</span></span>) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Size</span> &#123;</span><br><span class="line">  <span class="attr">feet</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">numFeet: <span class="built_in">number</span></span>) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">a</span>: <span class="title class_">Animal</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">s</span>: <span class="title class_">Size</span>;</span><br><span class="line">a = s; <span class="comment">// 正确</span></span><br><span class="line">s = a; <span class="comment">// 正确</span></span><br></pre></td></tr></table></figure><h2 id="6-9-类中的私有和受保护成员"><a href="#6-9-类中的私有和受保护成员" class="headerlink" title="6.9 类中的私有和受保护成员"></a>6.9 类中的私有和受保护成员</h2><p>一个类中的私有成员和保护成员会影响其兼容性。当一个类的实例被检查兼容性时，如果目标类型包含一个私有成员，那么源类型也必须包含一个源自同一类的私有成员。同样地，这也适用于有保护成员的实例。这允许一个类与它的超类进行赋值兼容，但不允许与来自不同继承层次的类进行赋值兼容，否则就会有相同的形状。</p><h2 id="6-10-泛型"><a href="#6-10-泛型" class="headerlink" title="6.10 泛型"></a>6.10 泛型</h2><p>因为TypeScript是一个结构化的类型系统，类型参数只在作为成员类型的一部分被消耗时影响到结果类型。比如说：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Empty</span>&lt;T&gt; &#123;&#125;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">x</span>: <span class="title class_">Empty</span>&lt;<span class="built_in">number</span>&gt;;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">y</span>: <span class="title class_">Empty</span>&lt;<span class="built_in">string</span>&gt;;</span><br><span class="line">x = y; <span class="comment">// 正确，因为y符合x的结构</span></span><br></pre></td></tr></table></figure><p>在上面，<code>x</code>和<code>y</code>是兼容的，因为它们的结构没有以区分的方式使用类型参数。通过给<code>Empty&lt;T&gt;</code>增加一个成员来改变这个例子，显示了这是如何工作的。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">NotEmpty</span>&lt;T&gt; &#123;</span><br><span class="line">  <span class="attr">data</span>: T;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">x</span>: <span class="title class_">NotEmpty</span>&lt;<span class="built_in">number</span>&gt;;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">y</span>: <span class="title class_">NotEmpty</span>&lt;<span class="built_in">string</span>&gt;;</span><br><span class="line">x = y; <span class="comment">// 错误，因为x和y不兼容</span></span><br></pre></td></tr></table></figure><p>这样一来，一个指定了类型参数的泛型类型就像一个非泛型类型一样。</p><p>对于没有指定类型参数的泛型，兼容性的检查是通过指定任何来代替所有未指定的类型参数。然后产生的类型被检查是否兼容，就像在非泛型的情况下一样。</p><p>比如说：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> identity = <span class="keyword">function</span> &lt;T&gt;(<span class="attr">x</span>: T): T &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> reverse = <span class="keyword">function</span> &lt;U&gt;(<span class="attr">y</span>: U): U &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;;</span><br><span class="line">identity = reverse; <span class="comment">// 正确, 因为 (x: any) =&gt; any 匹配 (y: any) =&gt; any</span></span><br></pre></td></tr></table></figure><h2 id="6-11-子类型与赋值"><a href="#6-11-子类型与赋值" class="headerlink" title="6.11 子类型与赋值"></a>6.11 子类型与赋值</h2><p>到目前为止，我们已经使用了 “兼容”，这并不是语言规范中定义的一个术语。在TypeScript中，有两种兼容性：子类型和赋值。这些不同之处只在于，赋值扩展了子类型的兼容性，允许赋值到 <code>any</code>，以及赋值到具有相应数值的<code>enum</code>。</p><p>语言中不同的地方使用这两种兼容性机制中的一种，取决于情况。在实际应用中，类型兼容性是由赋值兼容性决定的，即使是在 <code>implements</code> 和 <code>extends</code> 子句中。</p><h2 id="6-12-any-unknown-object-void-undefined-null-和never可分配性"><a href="#6-12-any-unknown-object-void-undefined-null-和never可分配性" class="headerlink" title="6.12 any,unknown,object,void,undefined,null, 和never可分配性"></a>6.12 <code>any</code>,<code>unknown</code>,<code>object</code>,<code>void</code>,<code>undefined</code>,<code>null</code>, 和<code>never</code>可分配性</h2><p>下表总结了一些抽象类型之间的可分配性。行表示每个类型可被分配到什么，列表示什么可被分配到它们。”✓”表示只有在关闭<a href="https://www.typescriptlang.org/tsconfig#strictNullChecks"><code>strictNullChecks</code></a> 时才是兼容的组合。</p><table><thead><tr><th align="center"></th><th align="center">any</th><th align="center">unknown</th><th align="center">object</th><th align="center">void</th><th align="center">undefined</th><th align="center">null</th><th align="center">never</th></tr></thead><tbody><tr><td align="center">any →</td><td align="center"></td><td align="center"><strong>✓</strong></td><td align="center"><strong>✓</strong></td><td align="center"><strong>✓</strong></td><td align="center"><strong>✓</strong></td><td align="center"><strong>✓</strong></td><td align="center">✕</td></tr><tr><td align="center">unknown →</td><td align="center"><strong>✓</strong></td><td align="center"></td><td align="center">✕</td><td align="center">✕</td><td align="center">✕</td><td align="center">✕</td><td align="center">✕</td></tr><tr><td align="center">object →</td><td align="center"><strong>✓</strong></td><td align="center"><strong>✓</strong></td><td align="center"></td><td align="center">✕</td><td align="center">✕</td><td align="center">✕</td><td align="center">✕</td></tr><tr><td align="center">void →</td><td align="center"><strong>✓</strong></td><td align="center"><strong>✓</strong></td><td align="center">✕</td><td align="center"></td><td align="center">✕</td><td align="center">✕</td><td align="center">✕</td></tr><tr><td align="center">undefined →</td><td align="center"><strong>✓</strong></td><td align="center"><strong>✓</strong></td><td align="center">✓</td><td align="center"><strong>✓</strong></td><td align="center"></td><td align="center">✓</td><td align="center">✕</td></tr><tr><td align="center">null →</td><td align="center"><strong>✓</strong></td><td align="center"><strong>✓</strong></td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center"></td><td align="center">✕</td></tr><tr><td align="center">never →</td><td align="center"><strong>✓</strong></td><td align="center"><strong>✓</strong></td><td align="center"><strong>✓</strong></td><td align="center"><strong>✓</strong></td><td align="center"><strong>✓</strong></td><td align="center"><strong>✓</strong></td><td align="center"></td></tr></tbody></table><ul><li><p>所有的东西都是可以分配给自己的。</p></li><li><p><code>any</code>和<code>unknown</code>在可分配的内容方面是相同的，不同的是<code>unknown</code>不能分配给任何东西，除了any。</p></li><li><p><code>unknown</code>和<code>never</code>就像是彼此的反义词。一切都可以分配给<code>unknown</code>, <code>never</code>就可以分配给一切。没有任何东西可以分配给<code>never</code>，<code>unknown</code>不能分配给任何东西（除了<code>any</code>）。</p></li><li><p><code>void</code>不能赋值给任何东西，以下是例外情况：<code>any</code>、<code>unknown</code>、<code>never</code>、<code>undefined</code>和<code>null</code>（如果<code>strictNullChecks</code>是关闭的，详见表）。</p></li><li><p>当<code>strictNullChecks</code>关闭时，<code>null</code>和<code>undefined</code>与<code>never</code>类似：可赋值给大多数类型，大多数类型不可赋值给它们。它们可以互相赋值。</p></li><li><p>当<code>strictNullChecks</code>打开时，<code>null</code>和<code>undefined</code>的行为更像<code>void</code>：除了<code>any</code>、<code>unknown</code>、<code>never</code>和<code>void</code>之外，不能赋值给任何东西（<code>undefined</code>总是可以赋值给<code>void</code>）。</p></li></ul><h3 id="特别声明-本文转自-古艺散人老师-，如有需要可前往原文预览查看。"><a href="#特别声明-本文转自-古艺散人老师-，如有需要可前往原文预览查看。" class="headerlink" title="特别声明: 本文转自  古艺散人老师 ，如有需要可前往原文预览查看。"></a>特别声明: 本文转自 <a href="https://github.com/lurongtao/TypeScript"> 古艺散人老师 </a>，如有需要可前往原文预览查看。</h3>]]></content>
      
      
      <categories>
          
          <category> TypeScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> TypeScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2-5、高级篇：Symbols</title>
      <link href="/article/48835/"/>
      <url>/article/48835/</url>
      
        <content type="html"><![CDATA[<h1 id="五、Symbols"><a href="#五、Symbols" class="headerlink" title="五、Symbols"></a>五、Symbols</h1><p>从ECMAScript 2015开始，<code>symbol</code>是一种原始的数据类型，就像 <code>number</code> 和 <code>string</code> 一样。</p><p><code>symbol</code> 值是通过调用 <code>Symbol</code>构造函数创建的。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> sym1 = <span class="title class_">Symbol</span>();</span><br><span class="line"><span class="keyword">let</span> sym2 = <span class="title class_">Symbol</span>(<span class="string">&quot;key&quot;</span>); <span class="comment">// 可选的字符串 key</span></span><br></pre></td></tr></table></figure><p>Symbols 是不可改变的，而且是独一无二的。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> sym2 = <span class="title class_">Symbol</span>(<span class="string">&quot;key&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> sym3 = <span class="title class_">Symbol</span>(<span class="string">&quot;key&quot;</span>);</span><br><span class="line">sym2 === sym3; <span class="comment">// false, symbols 是唯一的</span></span><br></pre></td></tr></table></figure><p>就像字符串一样，Symbols 可以被用作对象属性的键。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> sym = <span class="title class_">Symbol</span>();</span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  [sym]: <span class="string">&quot;value&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj[sym]); <span class="comment">// &quot;value&quot;</span></span><br></pre></td></tr></table></figure><p>Symbols 也可以与计算属性声明结合起来，以声明对象属性和类成员。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> getClassNameSymbol = <span class="title class_">Symbol</span>();</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span> &#123;</span><br><span class="line">  [getClassNameSymbol]() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;C&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> c = <span class="keyword">new</span> <span class="title function_">C</span>();</span><br><span class="line"><span class="keyword">let</span> className = c[getClassNameSymbol](); <span class="comment">// &quot;C&quot;</span></span><br></pre></td></tr></table></figure><h2 id="5-1-unique-symbol"><a href="#5-1-unique-symbol" class="headerlink" title="5.1 unique symbol"></a>5.1 <code>unique symbol</code></h2><p>为了能够将 symbols 作为唯一的字面符号，我们提供了一个特殊的类型 <code>unique symbol</code>。 <code>unique symbol</code> 是 <code>symbol</code> 的一个子类型，只在调用 <code>Symbol()</code> 或 <code>Symbol.for()</code> 或明确的类型注释时产生。这种类型只允许在常量声明和只读静态属性中使用，为了引用一个特定的唯一符号，你必须使用 <code>typeof</code> 操作符。每个对唯一符号的引用都意味着一个完全独特的身份，它与一个给定的声明相联系。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="keyword">const</span> <span class="attr">sym1</span>: unique <span class="built_in">symbol</span>;</span><br><span class="line"><span class="comment">// sym2只能是一个常数参考。</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">sym2</span>: unique <span class="built_in">symbol</span> = <span class="title class_">Symbol</span>();</span><br><span class="line"><span class="comment">// Ⓧ 类型为 &quot;唯一符号 &quot;的变量必须是 &quot;const&quot;类型。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 运行正确--指的是一个独特的 symbol，但其身份与&#x27;sym1&#x27;相联系。</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">sym3</span>: <span class="keyword">typeof</span> sym1 = sym1;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 也是正确的</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span> &#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="title class_">StaticSymbol</span>: unique <span class="built_in">symbol</span> = <span class="title class_">Symbol</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为每个 <code>unique symbol</code> 都有一个完全独立的身份，没有两个 <code>unique symbol</code> 类型是可以相互分配或比较的。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> sym2 = <span class="title class_">Symbol</span>();</span><br><span class="line"><span class="keyword">const</span> sym3 = <span class="title class_">Symbol</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这个条件将总是返回&#x27;false&#x27;，因为&#x27;typeof sym2&#x27;和&#x27;typeof sym3&#x27;的类型没有重合。</span></span><br><span class="line"><span class="keyword">if</span> (sym2 === sym3) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-2-知名的-Symbols"><a href="#5-2-知名的-Symbols" class="headerlink" title="5.2 知名的 Symbols"></a>5.2 知名的 Symbols</h2><p>除了用户定义的 symbols 外，还有著名的内置 symbols。内置符号被用来表示内部语言行为。</p><p>下面是一个著名的 symbols 列表：</p><h3 id="5-2-1-Symbol-hasInstance"><a href="#5-2-1-Symbol-hasInstance" class="headerlink" title="5.2.1 Symbol.hasInstance"></a>5.2.1 Symbol.hasInstance</h3><p>一个确定构造函数对象，是否识别一个对象为构造函数的实例之一的方法。由 <code>instanceof</code> 操作符的语义调用。</p><h3 id="5-2-2-Symbol-isConcatSpreadable"><a href="#5-2-2-Symbol-isConcatSpreadable" class="headerlink" title="5.2.2 Symbol.isConcatSpreadable"></a>5.2.2 Symbol.isConcatSpreadable</h3><p>一个布尔值，表示一个对象应该被 <code>Array.prototype.concat</code>平铺到其数组元素。</p><h3 id="5-2-3-Symbol-iterator"><a href="#5-2-3-Symbol-iterator" class="headerlink" title="5.2.3 Symbol.iterator"></a>5.2.3 Symbol.iterator</h3><p>返回一个对象的默认迭代器的方法。被 <code>for-of</code> 语句的语义所调用。</p><h3 id="5-2-4-Symbol-match"><a href="#5-2-4-Symbol-match" class="headerlink" title="5.2.4 Symbol.match"></a>5.2.4 Symbol.match</h3><p>一个正则表达式方法，与字符串的正则表达式相匹配。由 <code>String.prototype.match</code>方法调用。</p><h3 id="5-2-5-Symbol-replace"><a href="#5-2-5-Symbol-replace" class="headerlink" title="5.2.5 Symbol.replace"></a>5.2.5 Symbol.replace</h3><p>一个正则表达式方法，用于替换一个字符串中匹配的子串。由<code>String.prototype.replace</code>方法调用。</p><h3 id="5-2-6-Symbol-search"><a href="#5-2-6-Symbol-search" class="headerlink" title="5.2.6 Symbol.search"></a>5.2.6 Symbol.search</h3><p>一个正则表达式方法，返回字符串中符合正则表达式的索引。由<code>String.prototype.search</code>方法调用。</p><h3 id="5-2-7-Symbol-species"><a href="#5-2-7-Symbol-species" class="headerlink" title="5.2.7 Symbol.species"></a>5.2.7 Symbol.species</h3><p>一个函数值的属性，是用于创建派生对象的构造函数。</p><h3 id="5-2-8-Symbol-split"><a href="#5-2-8-Symbol-split" class="headerlink" title="5.2.8 Symbol.split"></a>5.2.8 Symbol.split</h3><p>一个正则表达式方法，在符合正则表达式的索引处分割一个字符串。由 <code>String.prototype.split</code> 方法调用。</p><h3 id="5-2-9-Symbol-toPrimitive"><a href="#5-2-9-Symbol-toPrimitive" class="headerlink" title="5.2.9 Symbol.toPrimitive"></a>5.2.9 Symbol.toPrimitive</h3><p>将一个对象转换为一个相应的基元值的方法。由 <code>ToPrimitive</code> 抽象操作调用。</p><h3 id="5-2-10-Symbol-toStringTag"><a href="#5-2-10-Symbol-toStringTag" class="headerlink" title="5.2.10 Symbol.toStringTag"></a>5.2.10 Symbol.toStringTag</h3><p>一个字符串值，用于创建一个对象的默认字符串描述。由内置方法<code>Object.prototype.toString</code>调用。</p><h3 id="5-2-11-Symbol-unscopables"><a href="#5-2-11-Symbol-unscopables" class="headerlink" title="5.2.11 Symbol.unscopables"></a>5.2.11 Symbol.unscopables</h3><p>一个对象，其自身的属性名是被排除在相关对象的 ‘with’ 环境绑定之外的属性名。</p><h3 id="特别声明-本文转自-古艺散人老师-，如有需要可前往原文预览查看。"><a href="#特别声明-本文转自-古艺散人老师-，如有需要可前往原文预览查看。" class="headerlink" title="特别声明: 本文转自  古艺散人老师 ，如有需要可前往原文预览查看。"></a>特别声明: 本文转自 <a href="https://github.com/lurongtao/TypeScript"> 古艺散人老师 </a>，如有需要可前往原文预览查看。</h3>]]></content>
      
      
      <categories>
          
          <category> TypeScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> TypeScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2-4、高级篇：公共类型</title>
      <link href="/article/13304/"/>
      <url>/article/13304/</url>
      
        <content type="html"><![CDATA[<h1 id="四、-公共类型"><a href="#四、-公共类型" class="headerlink" title="四、 公共类型"></a>四、 公共类型</h1><p>TypeScript 提供了几个实用类型，以促进常见的类型转换。这些实用程序在全局范围内可用。</p><h2 id="4-1-Partial"><a href="#4-1-Partial" class="headerlink" title="4.1 Partial&lt;Type&gt;"></a>4.1 Partial<code>&lt;Type&gt;</code></h2><p>构建一个类型，将 <code>Type</code> 的所有属性设置为可选。这个工具将返回一个表示给定类型的所有子集的类型。</p><p><strong>例子：</strong></p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Todo</span> &#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">description</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">updateTodo</span>(<span class="params">todo: Todo, fieldsToUpdate: Partial&lt;Todo&gt;</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123; ...todo, ...fieldsToUpdate &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> todo1 = &#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="string">&quot;organize desk&quot;</span>,</span><br><span class="line">  <span class="attr">description</span>: <span class="string">&quot;clear clutter&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> todo2 = <span class="title function_">updateTodo</span>(todo1, &#123;</span><br><span class="line">  <span class="attr">description</span>: <span class="string">&quot;throw out trash&quot;</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="4-2-Required"><a href="#4-2-Required" class="headerlink" title="4.2 Required&lt;Type&gt;"></a>4.2 Required<code>&lt;Type&gt;</code></h2><p>构建一个由 <code>Type</code> 的所有属性组成的类型，设置为必填。与 <code>Partial</code> 相反：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Props</span> &#123;</span><br><span class="line">  a?: <span class="built_in">number</span>;</span><br><span class="line">  b?: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">obj</span>: <span class="title class_">Props</span> = &#123; <span class="attr">a</span>: <span class="number">5</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">obj2</span>: <span class="title class_">Required</span>&lt;<span class="title class_">Props</span>&gt; = &#123; <span class="attr">a</span>: <span class="number">5</span> &#125;;</span><br></pre></td></tr></table></figure><img src="/img/TypeScript/11-01.png" alt="image-20211223212409295" style="zoom:50%;" /><h2 id="4-3-Readonly"><a href="#4-3-Readonly" class="headerlink" title="4.3 Readonly"></a>4.3 Readonly<Type></h2><p>构建一个类型，<code>Type</code> 的所有属性设置为 <code>readonly</code>，这意味着构建的类型的属性不能被重新设置值。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Todo</span> &#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">todo</span>: <span class="title class_">Readonly</span>&lt;<span class="title class_">Todo</span>&gt; = &#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="string">&quot;Delete inactive users&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">todo.<span class="property">title</span> = <span class="string">&quot;Hello&quot;</span>;</span><br></pre></td></tr></table></figure><img src="/img/TypeScript/11-02.png" alt="image-20211223212707668" style="zoom: 67%;" /><p>这个工具对于表示将在运行时失败的赋值表达式很有用（即当试图重新分配一个 <a href="https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze">冻结对象 </a>的属性时）。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> freeze&lt;<span class="title class_">Type</span>&gt;(<span class="attr">obj</span>: <span class="title class_">Type</span>): <span class="title class_">Readonly</span>&lt;<span class="title class_">Type</span>&gt;;</span><br></pre></td></tr></table></figure><h2 id="4-4-Record"><a href="#4-4-Record" class="headerlink" title="4.4 Record&lt;Keys, Type&gt;"></a>4.4 Record&lt;Keys, Type&gt;</h2><p>构建一个对象类型，其属性键是 <code>Keys</code>，其属性值是 <code>Type</code>。这个工具可以用来将一个类型的属性映射到另一个类型。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">CatInfo</span> &#123;</span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">breed</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">CatName</span> = <span class="string">&quot;miffy&quot;</span> | <span class="string">&quot;boris&quot;</span> | <span class="string">&quot;mordred&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">cats</span>: <span class="title class_">Record</span>&lt;<span class="title class_">CatName</span>, <span class="title class_">CatInfo</span>&gt; = &#123;</span><br><span class="line">  <span class="attr">miffy</span>: &#123; <span class="attr">age</span>: <span class="number">10</span>, <span class="attr">breed</span>: <span class="string">&quot;Persian&quot;</span> &#125;,</span><br><span class="line">  <span class="attr">boris</span>: &#123; <span class="attr">age</span>: <span class="number">5</span>, <span class="attr">breed</span>: <span class="string">&quot;Maine Coon&quot;</span> &#125;,</span><br><span class="line">  <span class="attr">mordred</span>: &#123; <span class="attr">age</span>: <span class="number">16</span>, <span class="attr">breed</span>: <span class="string">&quot;British Shorthair&quot;</span> &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// const cats: Record&lt;CatName, CatInfo&gt;</span></span><br><span class="line">cats.<span class="property">boris</span>;</span><br></pre></td></tr></table></figure><h2 id="4-5-Pick"><a href="#4-5-Pick" class="headerlink" title="4.5 Pick&lt;Type, Keys&gt;"></a>4.5 Pick&lt;Type, Keys&gt;</h2><p>通过从 <code>Type </code>中选取属性集合<code>Keys</code>（属性名或属性名的联合）来构造一个类型。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Todo</span> &#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">description</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">completed</span>: <span class="built_in">boolean</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">TodoPreview</span> = <span class="title class_">Pick</span>&lt;<span class="title class_">Todo</span>, <span class="string">&quot;title&quot;</span> | <span class="string">&quot;completed&quot;</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">todo</span>: <span class="title class_">TodoPreview</span> = &#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="string">&quot;Clean room&quot;</span>,</span><br><span class="line">  <span class="attr">completed</span>: <span class="literal">false</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// const todo: TodoPreview</span></span><br><span class="line">todo;</span><br></pre></td></tr></table></figure><h2 id="4-6-Omit"><a href="#4-6-Omit" class="headerlink" title="4.6 Omit&lt;Type, Keys&gt;"></a>4.6 Omit&lt;Type, Keys&gt;</h2><p>通过从 <code>Type</code> 中选取所有属性，然后删除 <code>Keys</code>（属性名或属性名的联合）来构造一个类型。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Todo</span> &#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">description</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">completed</span>: <span class="built_in">boolean</span>;</span><br><span class="line">  <span class="attr">createdAt</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">TodoPreview</span> = <span class="title class_">Omit</span>&lt;<span class="title class_">Todo</span>, <span class="string">&quot;description&quot;</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">todo</span>: <span class="title class_">TodoPreview</span> = &#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="string">&quot;Clean room&quot;</span>,</span><br><span class="line">  <span class="attr">completed</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">createdAt</span>: <span class="number">1615544252770</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// const todo: TodoPreview</span></span><br><span class="line">todo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">TodoInfo</span> = <span class="title class_">Omit</span>&lt;<span class="title class_">Todo</span>, <span class="string">&quot;completed&quot;</span> | <span class="string">&quot;createdAt&quot;</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">todoInfo</span>: <span class="title class_">TodoInfo</span> = &#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="string">&quot;Pick up kids&quot;</span>,</span><br><span class="line">  <span class="attr">description</span>: <span class="string">&quot;Kindergarten closes at 5pm&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// const todoInfo: TodoInfo</span></span><br><span class="line">todoInfo;</span><br></pre></td></tr></table></figure><h2 id="4-7-Exclude"><a href="#4-7-Exclude" class="headerlink" title="4.7 Exclude&lt;Type, ExcludedUnion&gt;"></a>4.7 Exclude&lt;Type, ExcludedUnion&gt;</h2><p>通过从 <code>Type</code> 中排除所有可分配给 <code>ExcludedUnion</code> 的联盟成员来构造一个类型。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// type T0 = &quot;b&quot; | &quot;c&quot;</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T0</span> = <span class="title class_">Exclude</span>&lt;<span class="string">&quot;a&quot;</span> | <span class="string">&quot;b&quot;</span> | <span class="string">&quot;c&quot;</span>, <span class="string">&quot;a&quot;</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// type T1 = &quot;c&quot;</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T1</span> = <span class="title class_">Exclude</span>&lt;<span class="string">&quot;a&quot;</span> | <span class="string">&quot;b&quot;</span> | <span class="string">&quot;c&quot;</span>, <span class="string">&quot;a&quot;</span> | <span class="string">&quot;b&quot;</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// type T2 = string | number</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T2</span> = <span class="title class_">Exclude</span>&lt;<span class="built_in">string</span> | <span class="built_in">number</span> | (<span class="function">() =&gt;</span> <span class="built_in">void</span>), <span class="title class_">Function</span>&gt;;</span><br></pre></td></tr></table></figure><h2 id="4-8-Extract"><a href="#4-8-Extract" class="headerlink" title="4.8 Extract&lt;Type, Union&gt;"></a>4.8 Extract&lt;Type, Union&gt;</h2><p>通过从 <code>Type</code> 中提取可分配给 <code>Union</code> 的所有 <code>union</code> 成员，构造一个类型。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// type T0 = &quot;a&quot;</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T0</span> = <span class="title class_">Extract</span>&lt;<span class="string">&quot;a&quot;</span> | <span class="string">&quot;b&quot;</span> | <span class="string">&quot;c&quot;</span>, <span class="string">&quot;a&quot;</span> | <span class="string">&quot;f&quot;</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// type T1 = () =&gt; void</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T1</span> = <span class="title class_">Extract</span>&lt;<span class="built_in">string</span> | <span class="built_in">number</span> | (<span class="function">() =&gt;</span> <span class="built_in">void</span>), <span class="title class_">Function</span>&gt;;</span><br></pre></td></tr></table></figure><h2 id="4-9-NonNullable"><a href="#4-9-NonNullable" class="headerlink" title="4.9 NonNullable"></a>4.9 NonNullable<Type></h2><p>通过从 <code>Type</code> 中排除 <code>null</code>和<code>undefined</code>来构造一个类型。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// type T0 = string | number</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T0</span> = <span class="title class_">NonNullable</span>&lt;<span class="built_in">string</span> | <span class="built_in">number</span> | <span class="literal">undefined</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// type T1 = string[]</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T1</span> = <span class="title class_">NonNullable</span>&lt;<span class="built_in">string</span>[] | <span class="literal">null</span> | <span class="literal">undefined</span>&gt;;</span><br></pre></td></tr></table></figure><h2 id="4-10-Parameters"><a href="#4-10-Parameters" class="headerlink" title="4.10 Parameters"></a>4.10 Parameters<Type></h2><p>从一个函数类型 <code>Type</code> 的参数中使用的类型构建一个元组类型。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="keyword">function</span> <span class="title function_">f1</span>(<span class="params">arg: &#123; a: <span class="built_in">number</span>; b: <span class="built_in">string</span> &#125;</span>): <span class="built_in">void</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// type T0 = []</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T0</span> = <span class="title class_">Parameters</span>&lt;<span class="function">() =&gt;</span> <span class="built_in">string</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// type T1 = [s: string]</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T1</span> = <span class="title class_">Parameters</span>&lt;<span class="function">(<span class="params">s: <span class="built_in">string</span></span>) =&gt;</span> <span class="built_in">void</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// type T2 = [arg: unknown]</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T2</span> = <span class="title class_">Parameters</span>&lt;&lt;T&gt;<span class="function">(<span class="params">arg: T</span>) =&gt;</span> T&gt;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">type T3 = [arg: &#123;</span></span><br><span class="line"><span class="comment">    a: number;</span></span><br><span class="line"><span class="comment">    b: string;</span></span><br><span class="line"><span class="comment">&#125;]</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T3</span> = <span class="title class_">Parameters</span>&lt;<span class="keyword">typeof</span> f1&gt;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// type T4 = unknown[]</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T4</span> = <span class="title class_">Parameters</span>&lt;<span class="built_in">any</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// type T5 = never</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T5</span> = <span class="title class_">Parameters</span>&lt;<span class="built_in">never</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// type T6 = never</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T6</span> = <span class="title class_">Parameters</span>&lt;<span class="built_in">string</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// type T7 = never</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T7</span> = <span class="title class_">Parameters</span>&lt;<span class="title class_">Function</span>&gt;;</span><br></pre></td></tr></table></figure><img src="/img/TypeScript/11-03.png" alt="image-20211224135715919" style="zoom: 50%;" /><h2 id="4-11-ConstructorParameters"><a href="#4-11-ConstructorParameters" class="headerlink" title="4.11 ConstructorParameters"></a>4.11 ConstructorParameters<Type></h2><p>从构造函数的类型中构造一个元组或数组类型。它产生一个具有所有参数类型的元组类型（如果 <code>Type</code> 不是一个函数，则为 <code>never</code> 类型）。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// type T0 = [message?: string]</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T0</span> = <span class="title class_">ConstructorParameters</span>&lt;<span class="title class_">ErrorConstructor</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// type T1 = string[]</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T1</span> = <span class="title class_">ConstructorParameters</span>&lt;<span class="title class_">FunctionConstructor</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// type T2 = [pattern: string | RegExp, flags?: string]</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T2</span> = <span class="title class_">ConstructorParameters</span>&lt;<span class="title class_">RegExpConstructor</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// type T3 = unknown[]</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T3</span> = <span class="title class_">ConstructorParameters</span>&lt;<span class="built_in">any</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// type T4 = never</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T4</span> = <span class="title class_">ConstructorParameters</span>&lt;<span class="title class_">Function</span>&gt;;</span><br></pre></td></tr></table></figure><img src="/img/TypeScript/11-4.png" alt="image-20211224150128771" style="zoom: 50%;" /><h2 id="4-12-ReturnType"><a href="#4-12-ReturnType" class="headerlink" title="4.12 ReturnType"></a>4.12 ReturnType<Type></h2><p>构建一个由函数 <code>Type</code> 的返回类型组成的类型。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="keyword">function</span> <span class="title function_">f1</span>(<span class="params"></span>): &#123; <span class="attr">a</span>: <span class="built_in">number</span>; <span class="attr">b</span>: <span class="built_in">string</span> &#125;;</span><br><span class="line"><span class="comment">// type T0 = string</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T0</span> = <span class="title class_">ReturnType</span>&lt;<span class="function">() =&gt;</span> <span class="built_in">string</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// type T1 = void</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T1</span> = <span class="title class_">ReturnType</span>&lt;<span class="function">(<span class="params">s: <span class="built_in">string</span></span>) =&gt;</span> <span class="built_in">void</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// type T2 = unknown</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T2</span> = <span class="title class_">ReturnType</span>&lt;&lt;T&gt;<span class="function">() =&gt;</span> T&gt;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// type T3 = number[]</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T3</span> = <span class="title class_">ReturnType</span>&lt;&lt;T <span class="keyword">extends</span> U, U <span class="keyword">extends</span> <span class="built_in">number</span>[]&gt;<span class="function">() =&gt;</span> T&gt;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">type T4 = &#123;</span></span><br><span class="line"><span class="comment">  a: number;</span></span><br><span class="line"><span class="comment">  b: string;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T4</span> = <span class="title class_">ReturnType</span>&lt;<span class="keyword">typeof</span> f1&gt;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// type T5 = any</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T5</span> = <span class="title class_">ReturnType</span>&lt;<span class="built_in">any</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// type T6 = never</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T6</span> = <span class="title class_">ReturnType</span>&lt;<span class="built_in">never</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// type T7 = any 报错</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T7</span> = <span class="title class_">ReturnType</span>&lt;<span class="built_in">string</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// type T8 = any 报错</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T8</span> = <span class="title class_">ReturnType</span>&lt;<span class="title class_">Function</span>&gt;;</span><br></pre></td></tr></table></figure><img src="/img/TypeScript/11-05.png" alt="image-20211224164920604" style="zoom: 50%;" /><h2 id="4-13-InstanceType"><a href="#4-13-InstanceType" class="headerlink" title="4.13 InstanceType"></a>4.13 InstanceType<Type></h2><p>构建一个由 <code>Type</code> 中构造函数的实例类型组成的类型。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">C</span> &#123;</span><br><span class="line">  x = <span class="number">0</span>;</span><br><span class="line">  y = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// type T0 = C</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T0</span> = <span class="title class_">InstanceType</span>&lt;<span class="keyword">typeof</span> C&gt;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// type T1 = any</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T1</span> = <span class="title class_">InstanceType</span>&lt;<span class="built_in">any</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// type T2 = never</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T2</span> = <span class="title class_">InstanceType</span>&lt;<span class="built_in">never</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// type T3 = any</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T3</span> = <span class="title class_">InstanceType</span>&lt;<span class="built_in">string</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// type T4 = any</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T4</span> = <span class="title class_">InstanceType</span>&lt;<span class="title class_">Function</span>&gt;;</span><br></pre></td></tr></table></figure><img src="/img/TypeScript/11-07.png" alt="image-20211224170431379" style="zoom:50%;" /><h2 id="4-14-ThisParameterType"><a href="#4-14-ThisParameterType" class="headerlink" title="4.14 ThisParameterType"></a>4.14 ThisParameterType<Type></h2><p>提取一个函数类型的<code>this</code>参数的类型，如果该函数类型没有 <code>this</code>参数，则为 <code>unknown</code>。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">toHex</span>(<span class="params"><span class="variable language_">this</span>: <span class="built_in">Number</span></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">toString</span>(<span class="number">16</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">numberToString</span>(<span class="params">n: ThisParameterType&lt;<span class="keyword">typeof</span> toHex&gt;</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> toHex.<span class="title function_">apply</span>(n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-15-OmitThisParameter"><a href="#4-15-OmitThisParameter" class="headerlink" title="4.15 OmitThisParameter"></a>4.15 OmitThisParameter<Type></h2><p>移除 <code>Type</code>的<code>this</code>参数。如果<code>Type</code>没有明确声明的<code>this</code>参数，结果只是<code>Type</code>。否则，一个没有<code>this</code>参数的新函数类型将从<code>Type</code>创建。泛型被擦除，只有最后的重载签名被传播到新的函数类型。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">toHex</span>(<span class="params"><span class="variable language_">this</span>: <span class="built_in">Number</span></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">toString</span>(<span class="number">16</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">fiveToHex</span>: <span class="title class_">OmitThisParameter</span>&lt;<span class="keyword">typeof</span> toHex&gt; = toHex.<span class="title function_">bind</span>(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">fiveToHex</span>());</span><br></pre></td></tr></table></figure><h2 id="4-16-ThisType"><a href="#4-16-ThisType" class="headerlink" title="4.16 ThisType"></a>4.16 ThisType<Type></h2><p>这个工具并不返回一个转换后的类型。相反，它作为一个上下文的 <code>this</code> 类型的标记。注意，必须启用<code>noImplicitThis</code> 标志才能使用这个工具。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">ObjectDescriptor</span>&lt;D, M&gt; = &#123;</span><br><span class="line">  data?: D;</span><br><span class="line">  methods?: M &amp; <span class="title class_">ThisType</span>&lt;D &amp; M&gt;; <span class="comment">// 方法中的 &#x27;this&#x27; 类型是 D &amp; M</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> makeObject&lt;D, M&gt;(<span class="attr">desc</span>: <span class="title class_">ObjectDescriptor</span>&lt;D, M&gt;): D &amp; M &#123;</span><br><span class="line">  <span class="keyword">let</span> <span class="attr">data</span>: <span class="built_in">object</span> = desc.<span class="property">data</span> || &#123;&#125;;</span><br><span class="line">  <span class="keyword">let</span> <span class="attr">methods</span>: <span class="built_in">object</span> = desc.<span class="property">methods</span> || &#123;&#125;;</span><br><span class="line">  <span class="keyword">return</span> &#123; ...data, ...methods &#125; <span class="keyword">as</span> D &amp; M;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = <span class="title function_">makeObject</span>(&#123;</span><br><span class="line">  <span class="attr">data</span>: &#123; <span class="attr">x</span>: <span class="number">0</span>, <span class="attr">y</span>: <span class="number">0</span> &#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="title function_">moveBy</span>(<span class="params">dx: <span class="built_in">number</span>, dy: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">x</span> += dx;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">y</span> += dy;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">obj.<span class="property">x</span> = <span class="number">10</span>;</span><br><span class="line">obj.<span class="property">y</span> = <span class="number">20</span>;</span><br><span class="line">obj.<span class="title function_">moveBy</span>(<span class="number">5</span>, <span class="number">5</span>);</span><br></pre></td></tr></table></figure><p>在上面的例子中，makeObject的参数中的 <code>methods</code> 对象有一个包括 <code>ThisType&lt;D &amp; M&gt;</code> 的上下文类型，因此方法对象中 <code>this</code> 的类型是 <code>&#123; x: number, y: number &#125; &amp; &#123; moveBy(dx: number, dy: number): number &#125;</code>。注意 <code>methods</code> 属性的类型如何同时是推理目标和方法中 <code>this</code> 类型的来源。</p><p><code>ThisType&lt;T&gt;</code>标记接口只是在<code>lib.d.ts</code>中声明的一个空接口。除了在对象字面的上下文类型中被识别之外，该接口的行为与任何空接口一样。</p><h2 id="4-17-字符串操作类型"><a href="#4-17-字符串操作类型" class="headerlink" title="4.17 字符串操作类型"></a>4.17 字符串操作类型</h2><h3 id="Uppercase"><a href="#Uppercase" class="headerlink" title="Uppercase&lt;StringType&gt;"></a><code>Uppercase&lt;StringType&gt;</code></h3><h3 id="Lowercase"><a href="#Lowercase" class="headerlink" title="Lowercase&lt;StringType&gt;"></a><code>Lowercase&lt;StringType&gt;</code></h3><h3 id="Capitalize"><a href="#Capitalize" class="headerlink" title="Capitalize&lt;StringType&gt;"></a><code>Capitalize&lt;StringType&gt;</code></h3><h3 id="Uncapitalize"><a href="#Uncapitalize" class="headerlink" title="Uncapitalize&lt;StringType&gt;"></a><code>Uncapitalize&lt;StringType&gt;</code></h3><p>TypeScript包括一组类型，可以在类型系统中用于字符串操作。你可以在 <a href="https://www.typescriptlang.org/docs/handbook/2/template-literal-types.html#uppercasestringtype">Template Literal Types</a> 文档中找到这些工具的用法。</p><h3 id="特别声明-本文转自-古艺散人老师-，如有需要可前往原文预览查看。"><a href="#特别声明-本文转自-古艺散人老师-，如有需要可前往原文预览查看。" class="headerlink" title="特别声明: 本文转自  古艺散人老师 ，如有需要可前往原文预览查看。"></a>特别声明: 本文转自 <a href="https://github.com/lurongtao/TypeScript"> 古艺散人老师 </a>，如有需要可前往原文预览查看。</h3>]]></content>
      
      
      <categories>
          
          <category> TypeScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> TypeScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2-3、高级篇：枚举</title>
      <link href="/article/43807/"/>
      <url>/article/43807/</url>
      
        <content type="html"><![CDATA[<h1 id="三、枚举"><a href="#三、枚举" class="headerlink" title="三、枚举"></a>三、枚举</h1><p><code>Enums</code>是TypeScript的少数功能之一，它不是JavaScript的类型级扩展。</p><p>枚举允许开发者定义一组命名的常量。使用枚举可以使其更容易记录意图，或创建一组不同的情况。TypeScript提供了基于数字和字符串的枚举。</p><h2 id="3-1-数值型枚举"><a href="#3-1-数值型枚举" class="headerlink" title="3.1 数值型枚举"></a>3.1 数值型枚举</h2><p>我们首先从数字枚举开始，如果你来自其他语言，可能会更熟悉它。一个枚举可以用 <code>enum</code> 关键字来定义。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Direction</span> &#123;</span><br><span class="line">  <span class="title class_">Up</span> = <span class="number">1</span>,</span><br><span class="line">  <span class="title class_">Down</span>,</span><br><span class="line">  <span class="title class_">Left</span>,</span><br><span class="line">  <span class="title class_">Right</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面，我们有一个数字枚举，其中 <code>Up</code> 被初始化为 <code>1</code> ，所有下面的成员从这一点开始自动递增。换句话说，<code>Direction.Up</code>的值是 <code>1</code> ，<code>Down</code> 是 <code>2</code>，<code>Left</code>是<code>3</code>，<code>Right</code>是<code>4</code>。</p><p>如果我们愿意，我们可以完全不使用初始化器：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Direction</span> &#123;</span><br><span class="line">  <span class="title class_">Up</span>,</span><br><span class="line">  <span class="title class_">Down</span>,</span><br><span class="line">  <span class="title class_">Left</span>,</span><br><span class="line">  <span class="title class_">Right</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里，Up的值是0，Down是1，依次类推。这种自动递增的行为对于我们可能不关心成员值本身，但关心每个值与同一枚举中的其他值不同的情况很有用。</p><p>使用枚举很简单：只需将任何成员作为枚举本身的一个属性来访问，并使用枚举的名称来声明类型:</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">UserResponse</span> &#123;</span><br><span class="line">  <span class="title class_">No</span> = <span class="number">0</span>,</span><br><span class="line">  <span class="title class_">Yes</span> = <span class="number">1</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">respond</span>(<span class="params">recipient: <span class="built_in">string</span>, message: UserResponse</span>): <span class="built_in">void</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">respond</span>(<span class="string">&quot;Princess Caroline&quot;</span>, <span class="title class_">UserResponse</span>.<span class="property">Yes</span>);</span><br></pre></td></tr></table></figure><p>数字枚举可以混合在计算和常量成员中（见下文）。简而言之，没有初始化器的枚举要么需要放在第一位，要么必须放在用数字常量或其他常量枚举成员初始化的数字枚举之后。换句话说，下面的情况是不允许的：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> E &#123;</span><br><span class="line">  A = <span class="title function_">getSomeValue</span>(),</span><br><span class="line">  B,</span><br><span class="line">  <span class="comment">// Ⓧ Enum成员必须有初始化器。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-2-字符串枚举"><a href="#3-2-字符串枚举" class="headerlink" title="3.2 字符串枚举"></a>3.2 字符串枚举</h2><p>字符串枚举是一个类似的概念，但有一些细微的运行时差异，如下文所述。在一个字符串枚举中，每个成员都必须用一个字符串字头或另一个字符串枚举成员进行常量初始化。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Direction</span> &#123;</span><br><span class="line">  <span class="title class_">Up</span> = <span class="string">&quot;UP&quot;</span>,</span><br><span class="line">  <span class="title class_">Down</span> = <span class="string">&quot;DOWN&quot;</span>,</span><br><span class="line">  <span class="title class_">Left</span> = <span class="string">&quot;LEFT&quot;</span>,</span><br><span class="line">  <span class="title class_">Right</span> = <span class="string">&quot;RIGHT&quot;</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>虽然字符串枚举没有自动递增的行为，但字符串枚举有一个好处，那就是它们可以很好地 “序列化”。换句话说，如果你在调试时不得不读取一个数字枚举的运行时值，这个值往往是不透明的–它本身并不传达任何有用的意义（尽管 <a href="https://www.typescriptlang.org/docs/handbook/enums.html#reverse-mappings">反向映射</a>往往可以帮助你），字符串枚举允许你在代码运行时给出一个有意义的、可读的值，与枚举成员本身的名称无关。</p><h2 id="3-3-异构枚举"><a href="#3-3-异构枚举" class="headerlink" title="3.3 异构枚举"></a>3.3 异构枚举</h2><p>从技术上讲，枚举可以与字符串和数字成员混合，但不清楚为什么你会想这样做：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">enum BooleanLikeHeterogeneousEnum &#123;</span><br><span class="line">  No = 0,</span><br><span class="line">  Yes = &quot;YES&quot;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>除非你真的想以一种巧妙的方式利用JavaScript的运行时行为，否则建议你不要这样做。</p><h2 id="3-4-计算型和常量型成员"><a href="#3-4-计算型和常量型成员" class="headerlink" title="3.4 计算型和常量型成员"></a>3.4 计算型和常量型成员</h2><p>每个枚举成员都有一个与之相关的值，可以是常量，也可以是计算值。一个枚举成员被认为是常数，如果：</p><ul><li>它是枚举中的第一个成员，它没有初始化器，在这种情况下，它被赋值为 <code>0</code>：</li></ul><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// E.X is constant:</span></span><br><span class="line"><span class="keyword">enum</span> E &#123;</span><br><span class="line">  X,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>它没有一个初始化器，而且前面的枚举成员是一个数字常数。在这种情况下，当前枚举成员的值将是前一个枚举成员的值加 <code>1</code>：</li></ul><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// &#x27;E1&#x27;和&#x27;E2&#x27;中的所有枚举成员都是常数。</span></span><br><span class="line"><span class="keyword">enum</span> <span class="variable constant_">E1</span> &#123;</span><br><span class="line">  X,</span><br><span class="line">  Y,</span><br><span class="line">  Z,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">enum</span> <span class="variable constant_">E2</span> &#123;</span><br><span class="line">  A = <span class="number">1</span>,</span><br><span class="line">  B,</span><br><span class="line">  C,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>枚举成员用一个常量枚举表达式进行初始化。常量枚举表达式是TypeScript表达式的一个子集，可以在编译时进行完全评估。一个表达式是一个常量枚举表达式，如果它是：</p><ol><li>枚举表达式的字面意思（基本上是一个字符串字面量或一个数字字面量）</li><li>对先前定义的常量枚举成员的引用（可以来自不同的枚举）。</li><li>一个括号内的常量枚举表达式</li><li>应用于常量枚举表达式的 <code>+</code>,<code> -</code>,<code> ~</code>单项运算符之一</li><li><code>+</code>,<code> -</code>,<code> *</code>,<code> /</code>,<code> %</code>, <code>&lt;&lt;</code>, <code>&gt;&gt;</code>, <code>&gt;&gt;</code>, <code>&amp;</code>, <code>|</code>, <code>^</code> 以常量枚举表达式为操作数的二元运算符</li></ol><p>如果常量枚举表达式被评估为<code>NaN</code>或<code>Infinity</code>，这是一个编译时错误。</p><p>在所有其他情况下，枚举成员被认为是计算出来的。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">FileAccess</span> &#123;</span><br><span class="line">  <span class="comment">// 常量成员</span></span><br><span class="line">  <span class="title class_">None</span>,</span><br><span class="line">  <span class="title class_">Read</span> = <span class="number">1</span> &lt;&lt; <span class="number">1</span>,</span><br><span class="line">  <span class="title class_">Write</span> = <span class="number">1</span> &lt;&lt; <span class="number">2</span>,</span><br><span class="line">  <span class="title class_">ReadWrite</span> = <span class="title class_">Read</span> | <span class="title class_">Write</span>,</span><br><span class="line">  <span class="comment">// 计算成员</span></span><br><span class="line">  G = <span class="string">&quot;123&quot;</span>.<span class="property">length</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-5-联合枚举和枚举成员类型"><a href="#3-5-联合枚举和枚举成员类型" class="headerlink" title="3.5 联合枚举和枚举成员类型"></a>3.5 联合枚举和枚举成员类型</h2><p>有一个特殊的常量枚举成员的子集没有被计算：字面枚举成员。字面枚举成员是一个没有初始化值的常量枚举成员，或者其值被初始化为：</p><ul><li><p>任何字符串（例如：<code>&quot;foo&quot;</code>, <code>&quot;bar&quot;</code>, <code>&quot;baz&quot;</code>）。</p></li><li><p>任何数字字头（例如：<code>1</code>，<code>100</code>）</p></li><li><p>应用于任何数字字面的单数减号（例如：<code>-1</code>，<code>-100</code>）</p></li></ul><p>当一个枚举中的所有成员都有枚举的字面价值时，一些特殊的语义就会发挥作用。</p><p>首先，枚举成员也成为了类型。例如，我们可以说某些成员只能有一个枚举成员的值：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">ShapeKind</span> &#123;</span><br><span class="line">  <span class="title class_">Circle</span>,</span><br><span class="line">  <span class="title class_">Square</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Circle</span> &#123;</span><br><span class="line">  <span class="attr">kind</span>: <span class="title class_">ShapeKind</span>.<span class="property">Circle</span>;</span><br><span class="line">  <span class="attr">radius</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Square</span> &#123;</span><br><span class="line">  <span class="attr">kind</span>: <span class="title class_">ShapeKind</span>.<span class="property">Square</span>;</span><br><span class="line">  <span class="attr">sideLength</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">c</span>: <span class="title class_">Circle</span> = &#123;</span><br><span class="line">  <span class="attr">kind</span>: <span class="title class_">ShapeKind</span>.<span class="property">Square</span>,</span><br><span class="line">  <span class="comment">// Ⓧ 类型 &#x27;ShapeKind.Square&#x27; 不能被分配给类型 &#x27;ShapeKind.Circle&#x27;</span></span><br><span class="line">  <span class="attr">radius</span>: <span class="number">100</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>另一个变化是枚举类型本身有效地成为每个枚举成员的联盟。通过联合枚举，类型系统能够利用这一事实，即它知道存在于枚举本身的精确的值集。正因为如此，TypeScript可以捕捉到我们可能错误地比较数值的错误。比如说：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> E &#123;</span><br><span class="line">  <span class="title class_">Foo</span>,</span><br><span class="line">  <span class="title class_">Bar</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params">x: E</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (x !== E.<span class="property">Foo</span> || x !== E.<span class="property">Bar</span>) &#123;</span><br><span class="line">    <span class="comment">// Ⓧ 这个条件将总是返回&#x27;true&#x27;，因为&#x27;E.Foo&#x27;和&#x27;E.Bar&#x27;的类型没有重合。</span></span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个例子中，我们首先检查了<code>x</code>是否不是<code>E.Foo</code>。如果这个检查成功了，那么我们的 <code>||</code> 就会短路，<code>&#39;if&#39;</code>的主体就会运行。然而，如果检查没有成功，那么 <code>x</code> 就只能是 <code>E.Foo</code>，所以看它是否等于 <code>E.Bar</code> 就没有意义了。</p><h2 id="3-6-运行时的枚举"><a href="#3-6-运行时的枚举" class="headerlink" title="3.6 运行时的枚举"></a>3.6 运行时的枚举</h2><p>枚举是在运行时存在的真实对象。例如，下面这个枚举：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> E &#123;</span><br><span class="line">  X,</span><br><span class="line">  Y,</span><br><span class="line">  Z,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实际上可以被传递给函数：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> E &#123;</span><br><span class="line">  X,</span><br><span class="line">  Y,</span><br><span class="line">  Z,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params">obj: &#123; X: <span class="built_in">number</span> &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> obj.<span class="property">X</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以正常工作，因为&#x27;E&#x27;有一个名为&#x27;X&#x27;的属性，是一个数字。</span></span><br><span class="line"><span class="title function_">f</span>(E);</span><br></pre></td></tr></table></figure><h2 id="3-7-编译时的枚举"><a href="#3-7-编译时的枚举" class="headerlink" title="3.7 编译时的枚举"></a>3.7 编译时的枚举</h2><p>尽管Enum是在运行时存在的真实对象，<code>keyof</code>关键字的工作方式与你对典型对象的预期不同。相反，使用<code>keyof typeof</code>来获得一个将所有Enum键表示为字符串的类型。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">LogLevel</span> &#123;</span><br><span class="line">  <span class="variable constant_">ERROR</span>,</span><br><span class="line">  <span class="variable constant_">WARN</span>,</span><br><span class="line">  <span class="variable constant_">INFO</span>,</span><br><span class="line">  <span class="variable constant_">DEBUG</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 这相当于:</span></span><br><span class="line"><span class="comment"> * type LogLevelStrings = &#x27;ERROR&#x27; | &#x27;WARN&#x27; | &#x27;INFO&#x27; | &#x27;DEBUG&#x27;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">LogLevelStrings</span> = keyof <span class="keyword">typeof</span> <span class="title class_">LogLevel</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">printImportant</span>(<span class="params">key: LogLevelStrings, message: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> num = <span class="title class_">LogLevel</span>[key];</span><br><span class="line">  <span class="keyword">if</span> (num &lt;= <span class="title class_">LogLevel</span>.<span class="property">WARN</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Log level key is:&quot;</span>, key);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Log level value is:&quot;</span>, num);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Log level message is:&quot;</span>, message);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">printImportant</span>(<span class="string">&quot;ERROR&quot;</span>, <span class="string">&quot;This is a message&quot;</span>);</span><br></pre></td></tr></table></figure><ul><li><strong>反向映射</strong></li></ul><p>除了为成员创建一个带有属性名称的对象外，数字枚举的成员还可以得到从枚举值到枚举名称的反向映射。例如，在这个例子中：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Enum</span> &#123;</span><br><span class="line">  A,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> a = <span class="title class_">Enum</span>.<span class="property">A</span>;</span><br><span class="line"><span class="keyword">let</span> nameOfA = <span class="title class_">Enum</span>[a]; <span class="comment">// &quot;A&quot;</span></span><br></pre></td></tr></table></figure><p>TypeScript将其编译为以下的JavaScript：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> <span class="title class_">Enum</span>;</span><br><span class="line">(<span class="keyword">function</span> (<span class="params">Enum</span>) &#123;</span><br><span class="line">  <span class="title class_">Enum</span>[(<span class="title class_">Enum</span>[<span class="string">&quot;A&quot;</span>] = <span class="number">0</span>)] = <span class="string">&quot;A&quot;</span>;</span><br><span class="line">&#125;)(<span class="title class_">Enum</span> || (<span class="title class_">Enum</span> = &#123;&#125;));</span><br><span class="line"><span class="keyword">let</span> a = <span class="title class_">Enum</span>.<span class="property">A</span>;</span><br><span class="line"><span class="keyword">let</span> nameOfA = <span class="title class_">Enum</span>[a]; <span class="comment">// &quot;A&quot;</span></span><br></pre></td></tr></table></figure><p>在这段生成的代码中，一个枚举被编译成一个对象，它同时存储了正向 (<code>name</code> -&gt; <code>value</code>)和反向 (<code>value</code> -&gt; <code>name</code>) 的映射关系。对其他枚举成员的引用总是以属性访问的方式发出，而且从不内联。</p><p>请记住，字符串枚举成员根本不会被生成反向映射。</p><ul><li><strong><code>const</code>枚举</strong></li></ul><p>在大多数情况下，枚举是一个完全有效的解决方案。然而有时要求比较严格。为了避免在访问枚举值时支付额外的生成代码和额外的间接性的代价，可以使用<code>const</code>枚举。常量枚举是使用我们枚举上的 <code>const</code> 修饰符来定义的。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">enum</span> <span class="title class_">Enum</span> &#123;</span><br><span class="line">  A = <span class="number">1</span>,</span><br><span class="line">  B = A * <span class="number">2</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>常量枚举只能使用常量枚举表达式，与普通枚举不同，它们在编译过程中被完全删除。常量枚举成员在使用地点被内联。这是可能的，因为常量枚举不能有计算的成员。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">enum</span> <span class="title class_">Direction</span> &#123;</span><br><span class="line">  <span class="title class_">Up</span>,</span><br><span class="line">  <span class="title class_">Down</span>,</span><br><span class="line">  <span class="title class_">Left</span>,</span><br><span class="line">  <span class="title class_">Right</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> directions = [</span><br><span class="line">  <span class="title class_">Direction</span>.<span class="property">Up</span>,</span><br><span class="line">  <span class="title class_">Direction</span>.<span class="property">Down</span>,</span><br><span class="line">  <span class="title class_">Direction</span>.<span class="property">Left</span>,</span><br><span class="line">  <span class="title class_">Direction</span>.<span class="property">Right</span>,</span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>在生成的代码中，将变成：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> directions = [<span class="number">0</span> <span class="comment">/* Up */</span>, <span class="number">1</span> <span class="comment">/* Down */</span>, <span class="number">2</span> <span class="comment">/* Left */</span>, <span class="number">3</span> <span class="comment">/* Right */</span>];</span><br></pre></td></tr></table></figure><h2 id="3-8-环境枚举"><a href="#3-8-环境枚举" class="headerlink" title="3.8 环境枚举"></a>3.8 环境枚举</h2><p>环境枚举是用来描述已经存在的枚举类型的形状。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="keyword">enum</span> <span class="title class_">Enum</span> &#123;</span><br><span class="line">  A = <span class="number">1</span>,</span><br><span class="line">  B,</span><br><span class="line">  C = <span class="number">2</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>环境枚举和非环境枚举之间的一个重要区别是，在常规枚举中，如果其前面的枚举成员被认为是常量，那么没有初始化器的成员将被认为是常量。相反，一个没有初始化器的环境（和非常量）枚举成员总是被认为是计算的。</p><h2 id="3-9-对象与枚举"><a href="#3-9-对象与枚举" class="headerlink" title="3.9 对象与枚举"></a>3.9 对象与枚举</h2><p>在现代TypeScript中，你可能不需要一个枚举，因为一个对象的常量就足够了：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">enum</span> <span class="title class_">EDirection</span> &#123;</span><br><span class="line">  <span class="title class_">Up</span>,</span><br><span class="line">  <span class="title class_">Down</span>,</span><br><span class="line">  <span class="title class_">Left</span>,</span><br><span class="line">  <span class="title class_">Right</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">ODirection</span> = &#123;</span><br><span class="line">  <span class="title class_">Up</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="title class_">Down</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="title class_">Left</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="title class_">Right</span>: <span class="number">3</span>,</span><br><span class="line">&#125; <span class="keyword">as</span> <span class="keyword">const</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// (enum member) EDirection.Up = 0</span></span><br><span class="line"><span class="title class_">EDirection</span>.<span class="property">Up</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// (property) Up: 0</span></span><br><span class="line"><span class="title class_">ODirection</span>.<span class="property">Up</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将枚举作为一个参数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">walk</span>(<span class="params">dir: EDirection</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 它需要一个额外的行来拉出数值</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Direction</span> = (<span class="keyword">typeof</span> <span class="title class_">ODirection</span>)[keyof <span class="keyword">typeof</span> <span class="title class_">ODirection</span>];</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">run</span>(<span class="params">dir: Direction</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">walk</span>(<span class="title class_">EDirection</span>.<span class="property">Left</span>);</span><br><span class="line"><span class="title function_">run</span>(<span class="title class_">ODirection</span>.<span class="property">Right</span>);</span><br></pre></td></tr></table></figure><p>与TypeScript的枚举相比，支持这种格式的最大理由是，它使你的代码库与JavaScript的状态保持一致，<code>when/if</code>枚举被添加到JavaScript中，那么你可以转移到额外的语法。</p><h3 id="特别声明-本文转自-古艺散人老师-，如有需要可前往原文预览查看。"><a href="#特别声明-本文转自-古艺散人老师-，如有需要可前往原文预览查看。" class="headerlink" title="特别声明: 本文转自  古艺散人老师 ，如有需要可前往原文预览查看。"></a>特别声明: 本文转自 <a href="https://github.com/lurongtao/TypeScript"> 古艺散人老师 </a>，如有需要可前往原文预览查看。</h3>]]></content>
      
      
      <categories>
          
          <category> TypeScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> TypeScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2-2、高级篇：类型推断</title>
      <link href="/article/48617/"/>
      <url>/article/48617/</url>
      
        <content type="html"><![CDATA[<h1 id="二、类型推断"><a href="#二、类型推断" class="headerlink" title="二、类型推断"></a>二、类型推断</h1><p>在TypeScript中，有几个地方在没有显式类型注释的情况下，使用类型推理来提供类型信息。例如，在这段代码中：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// let x: number</span></span><br><span class="line"><span class="keyword">let</span> x = <span class="number">3</span>;</span><br></pre></td></tr></table></figure><p><code>x</code> 变量的类型被推断为 <code>number</code>。这种推断发生在初始化变量和成员、设置参数默认值和确定函数返回类型时。</p><p>在大多数情况下，类型推断是直截了当的。在下面的章节中，我们将探讨类型推断的一些细微差别。</p><h2 id="2-1-最佳公共类型"><a href="#2-1-最佳公共类型" class="headerlink" title="2.1 最佳公共类型"></a>2.1 最佳公共类型</h2><p>当从几个表达式中进行类型推断时，这些表达式的类型被用来计算一个 “最佳公共类型”。比如说：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// let x: (number | null)[]</span></span><br><span class="line"><span class="keyword">let</span> x = [<span class="number">0</span>, <span class="number">1</span>, <span class="literal">null</span>];</span><br></pre></td></tr></table></figure><p>为了推断上面例子中 <code>x</code> 的类型，我们必须考虑每个数组元素的类型。这里我们得到了两个数组类型的选择：<code>number</code>和 <code>null</code>。最佳公共类型算法考虑了每个候选类型，并选择了与所有其他候选类型兼容的类型。</p><p>因为最佳公共类型必须从所提供的候选类型中选择，所以在某些情况下，类型有共同的结构，但没有一个类型是所有候选类型的超级类型。比如说：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// let zoo: (Rhino | Elephant | Snake)[]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> zoo = [<span class="keyword">new</span> <span class="title class_">Rhino</span>(), <span class="keyword">new</span> <span class="title class_">Elephant</span>(), <span class="keyword">new</span> <span class="title class_">Snake</span>()];</span><br></pre></td></tr></table></figure><p>理想情况下，我们可能希望 <code>zoo</code> 被推断为 <code>Animal[]</code>，但是因为数组中没有严格意义上的 <code>Animal</code> 类型的对象，所以我们没有对数组元素类型进行推断。为了纠正这一点，当没有一个类型是所有其他候选类型的超级类型时，就明确地提供类型。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// let zoo: Animal[]t</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">zoo</span>: <span class="title class_">Animal</span>[] = [<span class="keyword">new</span> <span class="title class_">Rhino</span>(), <span class="keyword">new</span> <span class="title class_">Elephant</span>(), <span class="keyword">new</span> <span class="title class_">Snake</span>()];</span><br></pre></td></tr></table></figure><p>当没有找到最好的共同类型时，产生的推论是联合数组类型，<code>(Rhino | Elephant | Snake)[]</code>。</p><h2 id="2-2-上下文类型"><a href="#2-2-上下文类型" class="headerlink" title="2.2 上下文类型"></a>2.2 上下文类型</h2><p>在TypeScript的某些情况下，类型推理也在 “另一个方向 “发挥作用。这被称为 “上下文类型化”。当表达式的类型被它的位置所暗示时，上下文类型就发生了。比如说：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">onmousedown</span> = <span class="keyword">function</span> (<span class="params">mouseEvent</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(mouseEvent.<span class="property">button</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(mouseEvent.<span class="property">kangaroo</span>); <span class="comment">// Ⓧ 在&#x27;MouseEvent&#x27;类型上不存在&#x27;kangaroo&#x27;属性。</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在这里，TypeScript 类型检查器使用 <code>window.onmousedown</code> 函数的类型来推断赋值右侧的函数表达式的类型。当它这样做时，它能够推断出<code>mouseEvent</code>参数的类型，它确实包含一个按钮属性，但不包含袋鼠属性。</p><p>这样做的原因是<code>window</code>已经在其类型中声明了<code>onmousedown</code>。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 声明有一个名为&#x27;window&#x27;的全局变量</span></span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">var</span> <span class="attr">window</span>: <span class="title class_">Window</span> &amp; <span class="keyword">typeof</span> globalThis;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这被声明为（简化版）。</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Window</span> <span class="keyword">extends</span> <span class="title class_">GlobalEventHandlers</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 其中定义了很多已知的处理程序事件</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">GlobalEventHandlers</span> &#123;</span><br><span class="line">  <span class="attr">onmousedown</span>: (<span class="function">(<span class="params"><span class="variable language_">this</span>: GlobalEventHandlers, ev: MouseEvent</span>) =&gt;</span> <span class="built_in">any</span>) | <span class="literal">null</span>;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>TypeScript足够聪明，在其他情况下也能推断出类型：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">onscroll</span> = <span class="keyword">function</span> (<span class="params">uiEvent</span>) &#123;</span><br><span class="line">  <span class="comment">// Ⓧ 属性 &quot;button&quot; 不存在于 &quot;Event&quot;类型上。</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(uiEvent.<span class="property">button</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>基于上述函数被分配给<code>Window.onscroll</code>的事实，TypeScript知道<code>uiEvent</code>是一个<code>UIEvent</code>，而不是像前面的例子那样是<code>MouseEvent</code>。<code>UIEvent</code>对象不包含按钮属性，所以TypeScript会抛出一个错误。</p><p>如果这个函数不在上下文类型的位置，这个函数的参数将隐含有类型<code>any</code>，并且不会发出错误（除非你使用<code>noImplicitAny</code>选项）。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> handler = <span class="keyword">function</span> (<span class="params">uiEvent</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(uiEvent.<span class="property">button</span>); <span class="comment">// &lt;- 正确</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>我们也可以明确地给函数的参数提供类型信息，以覆盖任何上下文的类型。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">onscroll</span> = <span class="keyword">function</span> (<span class="params">uiEvent: <span class="built_in">any</span></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(uiEvent.<span class="property">button</span>); <span class="comment">// &lt;- 现在也没有错误</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>然而，这段代码将记录 <code>undefined</code> 的内容，因为 <code>uiEvent</code> 没有名为按钮的属性。</p><p>上下文类型化在很多情况下都适用。常见的情况包括函数调用的参数、赋值的右侧、类型断言、对象和数组字面量的成员，以及返回语句。上下文类型也作为最佳普通类型的候选类型。比如说：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">createZoo</span>(<span class="params"></span>): <span class="title class_">Animal</span>[] &#123;</span><br><span class="line">  <span class="keyword">return</span> [<span class="keyword">new</span> <span class="title class_">Rhino</span>(), <span class="keyword">new</span> <span class="title class_">Elephant</span>(), <span class="keyword">new</span> <span class="title class_">Snake</span>()];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个例子中，最佳普通类型有一组四个候选者。<code>Animal</code>, <code>Rhino</code>, <code>Elephant</code>和 <code>Snake</code>。其中，<code>Animal</code> 可以被最佳共同类型算法所选择。</p><h3 id="特别声明-本文转自-古艺散人老师-，如有需要可前往原文预览查看。"><a href="#特别声明-本文转自-古艺散人老师-，如有需要可前往原文预览查看。" class="headerlink" title="特别声明: 本文转自  古艺散人老师 ，如有需要可前往原文预览查看。"></a>特别声明: 本文转自 <a href="https://github.com/lurongtao/TypeScript"> 古艺散人老师 </a>，如有需要可前往原文预览查看。</h3>]]></content>
      
      
      <categories>
          
          <category> TypeScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> TypeScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2-1、高级篇：变量声明</title>
      <link href="/article/48402/"/>
      <url>/article/48402/</url>
      
        <content type="html"><![CDATA[<h1 id="一、变量声明"><a href="#一、变量声明" class="headerlink" title="一、变量声明"></a>一、变量声明</h1><p><code>let</code>和<code>const</code>是JavaScript中变量声明的两个相对较新的概念。正如我们前面提到的，<code>let</code>在某些方面与<code>var</code>相似，但允许用户避免在JavaScript中遇到的一些常见的 “麻烦”。</p><p><code>const</code>是<code>let</code>的一个扩展，它可以防止重新赋值给一个变量。</p><p>由于TypeScript是JavaScript的扩展，该语言自然支持<code>let</code>和<code>const</code>。在这里，我们将进一步阐述这些新的声明，以及为什么它们比<code>var</code>更适合。</p><p>如果你已经不经意地使用了JavaScript，那么下一节可能是刷新你记忆的一个好方法。如果你对JavaScript中<code>var</code>声明的所有怪癖非常熟悉，你可能会发现跳过前面会更容易。</p><h2 id="1-1-var-变量声明"><a href="#1-1-var-变量声明" class="headerlink" title="1.1 var 变量声明"></a>1.1 var 变量声明</h2><p>在JavaScript中声明一个变量，传统上都是用<code>var</code>关键字来完成。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">10</span>;</span><br></pre></td></tr></table></figure><p>正如你可能已经发现的，我们刚刚声明了一个名为<code>a</code>的变量，其值为<code>10</code>。</p><p>我们也可以在一个函数中声明一个变量：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> message = <span class="string">&quot;Hello, world!&quot;</span>;</span><br><span class="line">  <span class="keyword">return</span> message;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而我们也可以在其他函数中访问这些相同的变量：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> <span class="title function_">g</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> b = a + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> b;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> g = <span class="title function_">f</span>();</span><br><span class="line"><span class="title function_">g</span>(); <span class="comment">// returns &#x27;11&#x27;</span></span><br></pre></td></tr></table></figure><p>在上面这个例子中，<code>g</code>捕获了<code>f</code>中声明的变量<code>a</code>。在<code>g</code>被调用的任何时候，<code>a</code>的值都将与<code>f</code>中<code>a</code>的值相联系。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">  a = <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">var</span> b = <span class="title function_">g</span>();</span><br><span class="line">  a = <span class="number">3</span>;</span><br><span class="line">  <span class="keyword">return</span> b;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">g</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">f</span>(); <span class="comment">// returns &#x27;2&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="1-2-作用域规则"><a href="#1-2-作用域规则" class="headerlink" title="1.2 作用域规则"></a>1.2 作用域规则</h2><p>对于那些习惯于其他语言的人来说，<code>var</code>声明有一些奇怪的作用域范围规则。以下面的例子为例：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params">shouldInitialize: <span class="built_in">boolean</span></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (shouldInitialize) &#123;</span><br><span class="line">    <span class="keyword">var</span> x = <span class="number">10</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">f</span>(<span class="literal">true</span>); <span class="comment">// 返回 &#x27;10&#x27;</span></span><br><span class="line"><span class="title function_">f</span>(<span class="literal">false</span>); <span class="comment">// 返回 &#x27;undefined&#x27;</span></span><br></pre></td></tr></table></figure><p>有些读者可能会对这个例子产生怀疑。变量<code>x</code>是在<code>if</code>块中声明的，但我们却能从该块之外访问它。这是因为<code>var</code>声明可以在其包含的函数、模块、命名空间或全局范围内的任何地方访问（所有这些我们将在后面讨论），而不考虑包含的块。有些人把这称为<code>var</code>作用域或函数作用域。参数也是函数作用域。</p><p>这些作用域规则会导致几种类型的错误。它们加剧的一个问题是，多次声明同一个变量并不是一个错误。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sumMatrix</span>(<span class="params">matrix: <span class="built_in">number</span>[][]</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; matrix.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> currentRow = matrix[i];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; currentRow.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      sum += currentRow[i];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也许对于一些有经验的JavaScript开发者来说，这很容易被发现，但是内部<code>for-loop</code>会意外地覆盖变量<code>i</code>，因为<code>i</code>指的是同一个函数范围的变量。正如有经验的开发者现在所知道的，类似的各种bug会在代码审查中溜走，并会成为无尽的挫折来源。</p><h2 id="1-3-变量捕获的怪癖"><a href="#1-3-变量捕获的怪癖" class="headerlink" title="1.3 变量捕获的怪癖"></a>1.3 变量捕获的怪癖</h2><p>花点时间猜一猜下面这段话的输出是什么：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span><br><span class="line">  &#125;, <span class="number">100</span> * i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于那些不熟悉的人来说，<code>setTimeout</code>将尝试在一定数量的毫秒后执行一个函数（尽管要等待其他东西停止运行）。</p><p>准备好了吗？看看吧。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">10</span><br><span class="line">10</span><br><span class="line">10</span><br><span class="line">10</span><br><span class="line">10</span><br><span class="line">10</span><br><span class="line">10</span><br><span class="line">10</span><br><span class="line">10</span><br><span class="line">10</span><br></pre></td></tr></table></figure><p>许多JavaScript开发人员对这种行为非常熟悉，但如果你感到惊讶，你肯定不是一个人。大多数人都希望输出的结果是：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">0</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td></tr></table></figure><p>还记得我们前面提到的关于变量捕获的问题吗？我们传递给<code>setTimeout</code>的每个函数表达式实际上都是指同一范围内的同一个<code>i</code>。</p><p>让我们花点时间考虑一下这意味着什么。 <code>setTimeout</code>将在若干毫秒之后运行一个函数，但只有在<code>for</code>循环停止执行之后；当<code>for</code>循环停止执行时，<code>i</code>的值是<code>10</code>。因此，每次给定的函数被调用时，它将打印出<code>10</code>!</p><p>一个常见的解决方法是使用IIFE–一个立即调用的函数表达式–来捕获每次迭代的<code>i</code>。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">  <span class="comment">// 通过调用一个带有其当前值的函数</span></span><br><span class="line">  <span class="comment">// 捕捉&#x27;i&#x27;的当前状态</span></span><br><span class="line">  (<span class="keyword">function</span> (<span class="params">i</span>) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span><br><span class="line">    &#125;, <span class="number">100</span> * i);</span><br><span class="line">  &#125;)(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种看起来很奇怪的模式其实是很常见的。参数列表中的 <code>i</code> 实际上是对 <code>for</code> 循环中声明的 <code>i</code> 的影子，但由于我们对它们的命名相同，所以我们不必对循环体进行过多的修改。</p><h2 id="1-4-let-变量声明"><a href="#1-4-let-变量声明" class="headerlink" title="1.4 let 变量声明"></a>1.4 let 变量声明</h2><p>现在你已经发现<code>var</code>有一些问题，这正是<code>let</code>语句被引入的原因。除了使用的关键字外，<code>let</code>语句的写法与<code>var</code>语句相同。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> hello = <span class="string">&quot;Hello!&quot;</span>;</span><br></pre></td></tr></table></figure><p>关键的区别不在语法上，而在语义上，我们现在要深入研究。</p><h2 id="1-5-块级作用域"><a href="#1-5-块级作用域" class="headerlink" title="1.5 块级作用域"></a>1.5 块级作用域</h2><p>当一个变量使用<code>let</code>声明时，它使用了一些人所说的词法范围或块法范围。与用<code>var</code>声明的变量不同，<code>block-scope</code>变量的作用域会泄露给其包含的函数，而在其最近的包含块或<code>for-loop</code>之外是不可见的。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params">input: <span class="built_in">boolean</span></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> a = <span class="number">100</span>;</span><br><span class="line">  <span class="keyword">if</span> (input) &#123;</span><br><span class="line">    <span class="comment">// 引用&#x27;a&#x27;仍然可以</span></span><br><span class="line">    <span class="keyword">let</span> b = a + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> b;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 错误：这里不存在&#x27;b&#x27;。</span></span><br><span class="line">  <span class="keyword">return</span> b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这里，我们有两个局部变量<code>a</code>和<code>b</code>。<code>a</code>的作用域仅限于<code>f</code>的主体，而<code>b</code>的作用域仅限于包含<code>if</code>语句的块。</p><p>在<code>catch</code>子句中声明的变量也有类似的作用域规则。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="string">&quot;oh no!&quot;</span>;</span><br><span class="line">&#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Oh well.&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Error: 这里不存在&#x27;e&#x27;。</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(e);</span><br></pre></td></tr></table></figure><p>块级作用域变量的另一个属性是，在它们被实际声明之前，它们不能被读或写到。虽然这些变量在它们的整个作用域中都是 “存在 “的，但是直到它们被声明之前的所有点都是它们的时间死角的一部分。这只是一种复杂的说法，你不能在<code>let</code>语句之前访问它们，幸运的是TypeScript会让你知道这一点。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line">a++; <span class="comment">// 在声明之前使用&#x27;a&#x27;是非法的。</span></span><br><span class="line"><span class="keyword">let</span> a;</span><br></pre></td></tr></table></figure><p>需要注意的是，你仍然可以在声明之前<em>捕获</em>一个块范围的变量。唯一的问题是，在声明之前调用该函数是非法的。如果以ES2015为目标，现代运行时将抛出一个错误；然而，现在TypeScript是允许的，不会将此作为一个错误报告。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 可以捕捉到 &quot;a&quot;。</span></span><br><span class="line">  <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 在声明&#x27;a&#x27;之前非法调用&#x27;foo&#x27;。</span></span><br><span class="line"><span class="comment">// runtimes应该在这里抛出一个错误</span></span><br><span class="line"><span class="title function_">foo</span>();</span><br><span class="line"><span class="keyword">let</span> a;</span><br></pre></td></tr></table></figure><p>For more information on temporal dead zones, see relevant content on the <a href="https://developer.mozilla.org/docs/Web/JavaScript/Reference/Statements/let#Temporal_dead_zone_and_errors_with_let">Mozilla Developer Network</a>.</p><p>关于时空死角的更多信息，请看 <a href="https://developer.mozilla.org/docs/Web/JavaScript/Reference/Statements/let#Temporal_dead_zone_and_errors_with_let">Mozilla开发者网络</a>上的相关内容。</p><h2 id="1-6-重复声明和投影"><a href="#1-6-重复声明和投影" class="headerlink" title="1.6 重复声明和投影"></a>1.6 重复声明和投影</h2><p>对于var声明，我们提到，你声明了多少次变量并不重要，你只是得到了一个。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params">x</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> x;</span><br><span class="line">  <span class="keyword">var</span> x;</span><br><span class="line">  <span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> x;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面的例子中，所有关于<code>x</code>的声明实际上指的是同一个<code>x</code>，这是完全有效的。这往往会成为错误的根源。值得庆幸的是，<code>let</code>的声明并不那么宽容。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> x = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">let</span> x = <span class="number">20</span>; <span class="comment">// 错误：不能在同一范围内重新声明&#x27;x&#x27;。</span></span><br></pre></td></tr></table></figure><p>变量不一定要都是块范围的，TypeScript才会告诉我们有一个问题。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params">x</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> x = <span class="number">100</span>; <span class="comment">// 错误：干扰了参数声明</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">g</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> x = <span class="number">100</span>;</span><br><span class="line">  <span class="keyword">var</span> x = <span class="number">100</span>; <span class="comment">// 错误：不能同时有&#x27;x&#x27;的声明</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这并不是说一个块作用域变量永远不能和一个函数作用域变量一起声明。区块作用域变量只是需要在一个明显不同的区块中声明。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params">condition, x</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (condition) &#123;</span><br><span class="line">    <span class="keyword">let</span> x = <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">f</span>(<span class="literal">false</span>, <span class="number">0</span>); <span class="comment">// 返回 &#x27;0&#x27;</span></span><br><span class="line"><span class="title function_">f</span>(<span class="literal">true</span>, <span class="number">0</span>); <span class="comment">// 返回 &#x27;100&#x27;</span></span><br></pre></td></tr></table></figure><p>在一个更加嵌套的作用域中引入一个新名字的行为被称为投影。这是一把双刃剑，因为它可以在意外影射的情况下自行引入某些错误，同时也可以防止某些错误。例如，想象一下我们之前用<code>let</code>变量编写的<code>sumMatrix函</code>数：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sumMatrix</span>(<span class="params">matrix: <span class="built_in">number</span>[][]</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> sum = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; matrix.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> currentRow = matrix[i];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; currentRow.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      sum += currentRow[i];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个版本的循环实际上会正确地执行求和，因为内循环的 <code>i</code> 会对外循环的 <code>i</code> 产生阴影。</p><p>为了写出更清晰的代码，通常应避免使用投影。虽然在某些情况下，利用它可能是合适的，但你应该使用你的最佳判断。</p><h2 id="1-7-块级作用域变量捕获"><a href="#1-7-块级作用域变量捕获" class="headerlink" title="1.7 块级作用域变量捕获"></a>1.7 块级作用域变量捕获</h2><p>当我们第一次触及用<code>var</code>声明捕获变量的想法时，我们简要地讨论了变量一旦被捕获是如何行动的。为了给大家一个更好的直观印象，每次运行一个作用域时，它都会创建一个变量的 “环境”。这个环境和它捕获的变量甚至在它的作用域内的所有东西都执行完毕后仍然存在。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">theCityThatAlwaysSleeps</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> getCity;</span><br><span class="line">  <span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> city = <span class="string">&quot;Seattle&quot;</span>;</span><br><span class="line">    getCity = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> city;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">getCity</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为我们已经从它的环境中捕获了<code>city</code>，所以尽管 <code>if</code> 块已经执行完毕，我们仍然能够访问它。</p><p>回想一下，在我们之前的<code>setTimeout</code>例子中，我们最终需要使用IIFE来捕获<code>for</code>循环的每个迭代中的变量状态。实际上，我们所做的是为我们捕获的变量创建一个新的变量环境。这有点麻烦，但幸运的是，在TypeScript中你再也不用这么做了。</p><p>当声明为循环的一部分时，<code>let</code>声明的行为有很大的不同。这些声明并不只是给循环本身引入一个新的环境，而是在每个迭代中创建一个新的范围。因为这就是我们在IIFE中所做的事情，我们可以改变我们以前的<code>setTimeout</code>的例子，只使用<code>let</code>声明。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span><br><span class="line">  &#125;, <span class="number">100</span> * i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>和预期的一样，这将打印出：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">0</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td></tr></table></figure><h2 id="1-8-const声明"><a href="#1-8-const声明" class="headerlink" title="1.8 const声明"></a>1.8 <code>const</code>声明</h2><p><code>const</code>声明是声明变量的另一种方式。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> numLivesForCat = <span class="number">9</span>;</span><br></pre></td></tr></table></figure><p>它们就像<code>let</code>声明一样，但正如它们的名字所暗示的，一旦它们被绑定，它们的值就不能被改变。换句话说，它们有和<code>let</code>一样的范围规则，但你不能重新赋值给它们。</p><p>这不应该与它们所指的值是不可改变的想法相混淆。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> numLivesForCat = <span class="number">9</span>;</span><br><span class="line"><span class="keyword">const</span> kitty = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;Aurora&quot;</span>,</span><br><span class="line">  <span class="attr">numLives</span>: numLivesForCat,</span><br><span class="line">&#125;; <span class="comment">// 错误</span></span><br><span class="line">kitty = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;Danielle&quot;</span>,</span><br><span class="line">  <span class="attr">numLives</span>: numLivesForCat,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 以下都正确</span></span><br><span class="line">kitty.<span class="property">name</span> = <span class="string">&quot;Rory&quot;</span>;</span><br><span class="line">kitty.<span class="property">name</span> = <span class="string">&quot;Kitty&quot;</span>;</span><br><span class="line">kitty.<span class="property">name</span> = <span class="string">&quot;Cat&quot;</span>;</span><br><span class="line">kitty.<span class="property">numLives</span>--;</span><br></pre></td></tr></table></figure><p>除非你采取特定的措施来避免它，否则常量变量的内部状态仍然是可以修改的。幸运的是，TypeScript允许你指定一个对象的成员是 <code>readonly</code> 的。</p><h2 id="1-9-let与const比较"><a href="#1-9-let与const比较" class="headerlink" title="1.9 let与const比较"></a>1.9 <code>let</code>与<code>const</code>比较</h2><p>鉴于我们有两种具有类似范围语义的声明，我们很自然地会问自己应该使用哪一种。像大多数广泛的问题一样，答案是：这取决于。</p><p>根据最小特权原则，除了那些你打算修改的声明外，所有的声明都应该使用 const。其理由是，如果一个变量不需要被写入，那么在同一个代码库中工作的其他人就不应该自动能够写入该对象，他们需要考虑是否真的需要重新赋值给该变量。在推理数据流时，使用<code>const</code>也会使代码更可预测。</p><p>使用你的最佳判断，如果适用的话，请与你的团队其他成员协商此事。</p><p>本教程的大部分内容都使用<code>let</code>声明。</p><h2 id="1-10-解构"><a href="#1-10-解构" class="headerlink" title="1.10 解构"></a>1.10 解构</h2><p>TypeScript拥有的另一个ECMAScript 2015特性是解构。关于完整的参考资料，请看<a href="https://developer.mozilla.org/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment">Mozilla开发者网络上的文章</a>。在本节中，我们将做一个简短的概述。</p><h2 id="1-11-数组析构"><a href="#1-11-数组析构" class="headerlink" title="1.11 数组析构"></a>1.11 数组析构</h2><p>最简单的解构形式是数组解构赋值。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> input = [<span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line"><span class="keyword">let</span> [first, second] = input;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(first); <span class="comment">// 输出 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(second); <span class="comment">// 输出 2</span></span><br></pre></td></tr></table></figure><p>这将创建两个新的变量，命名为 <code>first</code> 和 <code>second</code>。这等同于使用索引，但要方便得多。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line">first = input[<span class="number">0</span>];</span><br><span class="line">second = input[<span class="number">1</span>];</span><br></pre></td></tr></table></figure><p>解构也适用于已经声明的变量。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 交换变量</span></span><br><span class="line">[first, second] = [second, first];</span><br></pre></td></tr></table></figure><p>而且是带参数的函数：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params">[first, second]: [<span class="built_in">number</span>, <span class="built_in">number</span>]</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(first);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(second);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">f</span>([<span class="number">1</span>, <span class="number">2</span>]);</span><br></pre></td></tr></table></figure><p>你可以使用语法 <code>...</code> 为列表中的剩余项目创建一个变量。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> [first, ...rest] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(first); <span class="comment">// 输出 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(rest); <span class="comment">// 输出 [ 2, 3, 4 ]</span></span><br></pre></td></tr></table></figure><p>当然，由于这是JavaScript，你可以直接忽略你不关心的拖尾元素：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> [first] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(first); <span class="comment">// outputs 1</span></span><br></pre></td></tr></table></figure><p>或其他元素：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> [, second, , fourth] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(second); <span class="comment">// 输出 2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fourth); <span class="comment">// 输出 4</span></span><br></pre></td></tr></table></figure><h2 id="1-12-元组解构"><a href="#1-12-元组解构" class="headerlink" title="1.12 元组解构"></a>1.12 元组解构</h2><p>元组可以像数组一样被去结构化；去结构化的变量得到相应元组元素的类型：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">tuple</span>: [<span class="built_in">number</span>, <span class="built_in">string</span>, <span class="built_in">boolean</span>] = [<span class="number">7</span>, <span class="string">&quot;hello&quot;</span>, <span class="literal">true</span>];</span><br><span class="line"><span class="keyword">let</span> [a, b, c] = tuple; <span class="comment">// a: number, b: string, c: boolean</span></span><br></pre></td></tr></table></figure><p>对一个元组进行解构，超出其元素的范围是一个错误：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> [a, b, c, d] = tuple; <span class="comment">// 错误，索引3处没有元素</span></span><br></pre></td></tr></table></figure><p>和数组一样，你可以用<code>...</code>对元组的其余部分进行解构，以得到一个更短的元组：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> [a, ...bc] = tuple; <span class="comment">// bc: [string, boolean]</span></span><br><span class="line"><span class="keyword">let</span> [a, b, c, ...d] = tuple; <span class="comment">// d: [], 空 tuple</span></span><br></pre></td></tr></table></figure><p>或者忽略尾部元素，或者忽略其他元素：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> [a] = tuple; <span class="comment">// a: number</span></span><br><span class="line"><span class="keyword">let</span> [, b] = tuple; <span class="comment">// b: string</span></span><br></pre></td></tr></table></figure><h2 id="1-13-对象解构"><a href="#1-13-对象解构" class="headerlink" title="1.13 对象解构"></a>1.13 对象解构</h2><p>你也可以做对象的结构：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> o = &#123; <span class="attr">a</span>: <span class="string">&quot;foo&quot;</span>, <span class="attr">b</span>: <span class="number">12</span>, <span class="attr">c</span>: <span class="string">&quot;bar&quot;</span> &#125;;</span><br><span class="line"><span class="keyword">let</span> &#123; a, b &#125; = o;</span><br></pre></td></tr></table></figure><p>这就从<code>o.a</code>和<code>o.b</code>中创建了新的变量<code>a</code>和<code>b</code>。注意，如果你不需要<code>c</code>，你可以跳过它。</p><p>就像数组去结构化一样，你可以不用声明就进行赋值：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line">(&#123; a, b &#125; = &#123; <span class="attr">a</span>: <span class="string">&quot;baz&quot;</span>, <span class="attr">b</span>: <span class="number">101</span> &#125;);</span><br></pre></td></tr></table></figure><p>请注意，我们必须用圆括号包围这个语句。JavaScript通常将{作为块的开始来解析。</p><p>你可以使用语法<code>...</code>为对象中的剩余项目创建一个变量：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123; a, ...passthrough &#125; = o;</span><br><span class="line"><span class="keyword">let</span> total = passthrough.<span class="property">b</span> + passthrough.<span class="property">c</span>.<span class="property">length</span>;</span><br></pre></td></tr></table></figure><ol><li>属性重命名</li></ol><p>你也可以给属性起不同的名字：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123; <span class="attr">a</span>: newName1, <span class="attr">b</span>: newName2 &#125; = o;</span><br></pre></td></tr></table></figure><p>这里的语法开始变得混乱了。你可以把<code>a: newName1</code>读作 <code>&quot;a as newName1&quot;</code>。方向是从左到右，就像你写的一样：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> newName1 = o.<span class="property">a</span>;</span><br><span class="line"><span class="keyword">let</span> newName2 = o.<span class="property">b</span>;</span><br></pre></td></tr></table></figure><p>令人困惑的是，这里的冒号并不表示类型。如果你指定了类型，仍然需要写在整个结构解构之后。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123; a, b &#125;: &#123; <span class="attr">a</span>: <span class="built_in">string</span>; <span class="attr">b</span>: <span class="built_in">number</span> &#125; = o;</span><br></pre></td></tr></table></figure><ol><li>默认值</li></ol><p>默认值让你指定一个默认值，以防一个属性未被定义。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">keepWholeObject</span>(<span class="params">wholeObject: &#123; a: <span class="built_in">string</span>; b?: <span class="built_in">number</span> &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> &#123; a, b = <span class="number">1001</span> &#125; = wholeObject;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个例子中，<code>b?</code> 表示<code>b</code>是可选的，所以它可能是未定义的。 <code>keepWholeObject</code>现在有一个<code>wholeObject</code>的变量，以及属性<code>a</code>和<code>b</code>，即使<code>b</code>是未定义的。</p><h2 id="1-14-Function-声明"><a href="#1-14-Function-声明" class="headerlink" title="1.14 Function 声明"></a>1.14 Function 声明</h2><p>去结构化在函数声明中也起作用。对于简单的情况，这是很直接的。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> C = &#123; <span class="attr">a</span>: <span class="built_in">string</span>; b?: <span class="built_in">number</span> &#125;;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params">&#123; a, b &#125;: C</span>): <span class="built_in">void</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是对于参数来说，指定默认值是比较常见的，而用解构的方式来获得默认值是很棘手的。首先，你需要记住把模式放在默认值之前。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params">&#123; a = <span class="string">&quot;&quot;</span>, b = <span class="number">0</span> &#125; = &#123;&#125;</span>): <span class="built_in">void</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">f</span>();</span><br></pre></td></tr></table></figure><p>然后，你需要记住在<code>destructured</code>属性上给可选属性一个默认值，而不是主初始化器。记住，<code>C</code>的定义是<code>b</code>可选的。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params">&#123; a, b = <span class="number">0</span> &#125; = &#123; a: <span class="string">&quot;&quot;</span> &#125;</span>): <span class="built_in">void</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">f</span>(&#123; <span class="attr">a</span>: <span class="string">&quot;yes&quot;</span> &#125;); <span class="comment">// 正确，b = 0</span></span><br><span class="line"><span class="title function_">f</span>(); <span class="comment">// 正确, 默认 &#123; a: &quot;&quot; &#125;, 然后默认为 b = 0</span></span><br><span class="line"><span class="title function_">f</span>(&#123;&#125;); <span class="comment">// 错误，如果你提供一个参数，&#x27;a&#x27;是必须的</span></span><br></pre></td></tr></table></figure><p>小心使用解构。正如前面的例子所展示的，除了最简单的析构表达式之外，任何东西都会令人困惑。这在深度嵌套的结构化中尤其如此，即使不堆积重命名、默认值和类型注释，也会变得非常难以理解。尽量保持结构化表达式的小而简单。你总是可以自己写出解构会产生的赋值。</p><h2 id="1-15-展开"><a href="#1-15-展开" class="headerlink" title="1.15 展开"></a>1.15 展开</h2><p>展开操作符与解构相反。它允许你将一个数组分散到另一个数组中，或者将一个对象分散到另一个对象中。比如说：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> first = [<span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line"><span class="keyword">let</span> second = [<span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="keyword">let</span> bothPlus = [<span class="number">0</span>, ...first, ...second, <span class="number">5</span>];</span><br></pre></td></tr></table></figure><p>这使<code>bothPlus</code>的值为<code>[0, 1, 2, 3, 4, 5]</code>。展开创建 <code>first</code> 和 <code>second</code> 的浅层拷贝。它们不会因为展开而改变。</p><p>你也可以展开对象。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> defaults = &#123;</span><br><span class="line">  <span class="attr">food</span>: <span class="string">&quot;spicy&quot;</span>,</span><br><span class="line">  <span class="attr">price</span>: <span class="string">&quot;$$&quot;</span>,</span><br><span class="line">  <span class="attr">ambiance</span>: <span class="string">&quot;noisy&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> search = &#123;</span><br><span class="line">  ...defaults,</span><br><span class="line">  <span class="attr">food</span>: <span class="string">&quot;rich&quot;</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>现在的 <code>search</code> 是 <code>&#123; food: &quot;rich&quot;, price: &quot;$$&quot;, ambiance: &quot;noisy&quot; &#125;</code>。对象展开比数组展开更复杂。像数组展开一样，它从左到右进行，但结果仍然是一个对象。这意味着展开对象中较晚出现的属性会覆盖较早出现的属性。因此，如果我们修改前面的例子，在最后展开：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> defaults = &#123;</span><br><span class="line">  <span class="attr">food</span>: <span class="string">&quot;spicy&quot;</span>,</span><br><span class="line">  <span class="attr">price</span>: <span class="string">&quot;$$&quot;</span>,</span><br><span class="line">  <span class="attr">ambiance</span>: <span class="string">&quot;noisy&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> search = &#123;</span><br><span class="line">  <span class="attr">food</span>: <span class="string">&quot;rich&quot;</span>,</span><br><span class="line">  ...defaults,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>然后，<code>defaults</code>中的食物属性覆盖了<code>food: &quot;rich&quot;</code>，这不是我们在这种情况下想要的。</p><p>对象传播也有其他一些令人惊讶的限制。首先，它只包括一个对象 <a href="https://developer.mozilla.org/docs/Web/JavaScript/Enumerability_and_ownership_of_properties">自己的、可列举的属性</a>。基本上，这意味着当你传播一个对象的实例时，你会失去方法。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">C</span> &#123;</span><br><span class="line">  p = <span class="number">12</span>;</span><br><span class="line">  <span class="title function_">m</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> c = <span class="keyword">new</span> <span class="title function_">C</span>();</span><br><span class="line"><span class="keyword">let</span> clone = &#123;</span><br><span class="line">  ...c,</span><br><span class="line">&#125;;</span><br><span class="line">clone.<span class="property">p</span>; <span class="comment">// 正确</span></span><br><span class="line">clone.<span class="title function_">m</span>(); <span class="comment">// 错误!</span></span><br></pre></td></tr></table></figure><p>TypeScript编译器不允许从通用函数中展开类型参数。该功能预计将在未来的语言版本中出现。</p><h3 id="特别声明-本文转自-古艺散人老师-，如有需要可前往原文预览查看。"><a href="#特别声明-本文转自-古艺散人老师-，如有需要可前往原文预览查看。" class="headerlink" title="特别声明: 本文转自  古艺散人老师 ，如有需要可前往原文预览查看。"></a>特别声明: 本文转自 <a href="https://github.com/lurongtao/TypeScript"> 古艺散人老师 </a>，如有需要可前往原文预览查看。</h3>]]></content>
      
      
      <categories>
          
          <category> TypeScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> TypeScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1-9、基础篇：模块</title>
      <link href="/article/40444/"/>
      <url>/article/40444/</url>
      
        <content type="html"><![CDATA[<h1 id="九、模块"><a href="#九、模块" class="headerlink" title="九、模块"></a>九、模块</h1><p>JavaScript有很长的历史，有不同的方式来处理模块化的代码。TypeScript从2012年开始出现，已经实现了对许多这些格式的支持，但随着时间的推移，社区和JavaScript规范已经趋向于一种名为ES模块（或ES6模块）的格式。你可能知道它是<code>import/export</code>语法。</p><p>ES Modules在2015年被加入到JavaScript规范中，到2020年，在大多数网络浏览器和JavaScript运行时中都有广泛的支持。</p><p>为了突出重点，本手册将涵盖ES Modules及其流行的前驱CommonJS <code>module.exports =</code>语法。</p><h2 id="9-1-如何定义JavaScript模块"><a href="#9-1-如何定义JavaScript模块" class="headerlink" title="9.1 如何定义JavaScript模块"></a>9.1 如何定义JavaScript模块</h2><p>在TypeScript中，就像在ECMAScript 2015中一样，任何包含顶级<code>import</code>或<code>export</code>的文件都被认为是一个模块。</p><p>相反，一个没有任何顶级导入或导出声明的文件被视为一个脚本，其内容可在全局范围内使用（因此也可用于模块）。</p><p>模块在自己的范围内执行，而不是在全局范围内。这意味着在模块中声明的变量、函数、类等在模块外是不可见的，除非它们被明确地用某种导出形式导出。相反，要使用从不同模块导出的变量、函数、类、接口等，必须使用导入的形式将其导入。</p><h2 id="9-2-非模块"><a href="#9-2-非模块" class="headerlink" title="9.2 非模块"></a>9.2 非模块</h2><p>在我们开始之前，重要的是要了解TypeScript认为什么才是模块。JavaScript规范声明，任何没有 <code>export</code>或顶层 <code>await</code> 的JavaScript文件都应该被认为是一个脚本而不是一个模块。</p><p>在一个脚本文件中，变量和类型被声明为在共享的全局范围内，并且假定你会使用<code>outFile</code>编译器选项将多个输入文件加入一个输出文件，或者在你的HTML中使用多个<code>&lt;script&gt;</code>标签来加载这些文件（顺序正确！）。</p><p>如果你有一个目前没有任何导入或导出的文件，但你希望被当作一个模块来处理，请添加这一行：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> &#123;&#125;;</span><br></pre></td></tr></table></figure><p>这将改变该文件，使其成为一个什么都不输出的模块。无论你的模块目标是什么，这个语法都有效。</p><h2 id="9-3-TypeScript-中的模块"><a href="#9-3-TypeScript-中的模块" class="headerlink" title="9.3 TypeScript 中的模块"></a>9.3 TypeScript 中的模块</h2><p>在TypeScript中编写基于模块的代码时，有三个主要方面需要考虑：</p><ul><li><strong>语法：</strong>我想用什么语法来导入和导出东西？</li><li><strong>模块解析：</strong>模块名称（或路径）和磁盘上的文件之间是什么关系？</li><li><strong>模块输出目标：</strong>我编译出来的JavaScript模块应该是什么样子的？</li></ul><h3 id="9-3-1-ES模块语法"><a href="#9-3-1-ES模块语法" class="headerlink" title="9.3.1 ES模块语法"></a>9.3.1 ES模块语法</h3><p>一个文件可以通过<code>export default</code>声明一个主要出口：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// @filename: hello.ts</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">helloWorld</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hello, world!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后通过以下方式导入：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hello <span class="keyword">from</span> <span class="string">&quot;./hello.js&quot;</span>;</span><br><span class="line"><span class="title function_">hello</span>();</span><br></pre></td></tr></table></figure><p>除了默认的导出，你还可以通过省略<code>default</code>的<code>export</code>，实现有一个以上的变量和函数的导出。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// @filename: maths.ts</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">var</span> pi = <span class="number">3.14</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> squareTwo = <span class="number">1.41</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> phi = <span class="number">1.61</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">RandomNumberGenerator</span> &#123;&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">absolute</span>(<span class="params">num: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (num &lt; <span class="number">0</span>) <span class="keyword">return</span> num * -<span class="number">1</span>;</span><br><span class="line">  <span class="keyword">return</span> num;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这些可以通过 <code>import</code> 语法在另一个文件中使用：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; pi, phi, absolute &#125; <span class="keyword">from</span> <span class="string">&quot;./maths.js&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(pi);</span><br><span class="line"></span><br><span class="line"><span class="comment">// const absPhi: number</span></span><br><span class="line"><span class="keyword">const</span> absPhi = <span class="title function_">absolute</span>(phi);</span><br></pre></td></tr></table></figure><h3 id="9-3-2-额外的导入语法"><a href="#9-3-2-额外的导入语法" class="headerlink" title="9.3.2 额外的导入语法"></a>9.3.2 额外的导入语法</h3><p>可以使用 <code>import &#123;old as new&#125;</code> 这样的格式来重命名一个导入：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; pi <span class="keyword">as</span> π &#125; <span class="keyword">from</span> <span class="string">&quot;./maths.js&quot;</span>;</span><br><span class="line"><span class="comment">// (alias)</span></span><br><span class="line"><span class="keyword">var</span> π: <span class="built_in">number</span>;</span><br><span class="line"><span class="comment">// import π</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(π);</span><br></pre></td></tr></table></figure><p>你可以将上述语法混合并匹配到一个单一的 <code>import</code> 中：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// @filename: maths.ts</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> pi = <span class="number">3.14</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">RandomNumberGenerator</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// @filename: app.ts</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">RNGen</span>, &#123; pi <span class="keyword">as</span> π &#125; <span class="keyword">from</span> <span class="string">&quot;./maths.js&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// (alias) class RNGen</span></span><br><span class="line"><span class="comment">// import RNGen</span></span><br><span class="line"><span class="title class_">RNGen</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// (alias) const π: 3.14</span></span><br><span class="line"><span class="comment">// import π</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(π);</span><br></pre></td></tr></table></figure><p>你可以把所有导出的对象，用<code>* as name</code>，把它们放到一个命名空间：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// @filename: app.ts</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> math <span class="keyword">from</span> <span class="string">&quot;./maths.js&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(math.<span class="property">pi</span>);</span><br><span class="line"><span class="comment">// const positivePhi: number</span></span><br><span class="line"><span class="keyword">const</span> positivePhi = math.<span class="title function_">absolute</span>(math.<span class="property">phi</span>);</span><br></pre></td></tr></table></figure><p>你可以通过<code>import &quot;./file &quot;</code>导入一个文件，而不把任何变量纳入你的当前模块：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// @filename: app.ts</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;./maths.js&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;3.14&quot;</span>);</span><br></pre></td></tr></table></figure><p>在这种情况下，<code>import</code> 没有任何作用。然而，<code>maths.ts</code>中的所有代码都被解析了，这可能引发影响其他对象的副作用。</p><h3 id="9-3-3-TypeScript特定的ES模块语法"><a href="#9-3-3-TypeScript特定的ES模块语法" class="headerlink" title="9.3.3 TypeScript特定的ES模块语法"></a>9.3.3 TypeScript特定的ES模块语法</h3><p>类型可以使用与JavaScript值相同的语法进行导出和导入。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// @filename: animal.ts</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">type</span> <span class="title class_">Cat</span> = &#123; <span class="attr">breed</span>: <span class="built_in">string</span>; <span class="attr">yearOfBirth</span>: <span class="built_in">number</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">Dog</span> &#123;</span><br><span class="line">  <span class="attr">breeds</span>: <span class="built_in">string</span>[];</span><br><span class="line">  <span class="attr">yearOfBirth</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// @filename: app.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Cat</span>, <span class="title class_">Dog</span> &#125; <span class="keyword">from</span> <span class="string">&quot;./animal.js&quot;</span>;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Animals</span> = <span class="title class_">Cat</span> | <span class="title class_">Dog</span>;</span><br></pre></td></tr></table></figure><p>TypeScript用两个概念扩展了 <code>import</code> 语法，用于声明一个类型的导入。</p><ul><li><code>import type</code></li></ul><p>这是一个导入语句，只能导入类型：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// @filename: animal.ts</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">type</span> <span class="title class_">Cat</span> = &#123; <span class="attr">breed</span>: <span class="built_in">string</span>; <span class="attr">yearOfBirth</span>: <span class="built_in">number</span> &#125;;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">type</span> <span class="title class_">Dog</span> = &#123; <span class="attr">breeds</span>: <span class="built_in">string</span>[]; <span class="attr">yearOfBirth</span>: <span class="built_in">number</span> &#125;;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">createCatName</span> = (<span class="params"></span>) =&gt; <span class="string">&quot;fluffy&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// @filename: valid.ts</span></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">type</span> &#123; <span class="title class_">Cat</span>, <span class="title class_">Dog</span> &#125; <span class="keyword">from</span> <span class="string">&quot;./animal.js&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">type</span> <span class="title class_">Animals</span> = <span class="title class_">Cat</span> | <span class="title class_">Dog</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// @filename: app.ts</span></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">type</span> &#123; createCatName &#125; <span class="keyword">from</span> <span class="string">&quot;./animal.js&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> name = <span class="title function_">createCatName</span>();</span><br></pre></td></tr></table></figure><img src="/img/TypeScript/10-06.png" alt="image-20211219080726659" style="zoom:67%;" /><ul><li><strong>内联类型导入</strong></li></ul><p>TypeScript 4.5还允许以type为前缀的单个导入，以表明导入的引用是一个类型：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// @filename: app.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; createCatName, <span class="keyword">type</span> <span class="title class_">Cat</span>, <span class="keyword">type</span> <span class="title class_">Dog</span> &#125; <span class="keyword">from</span> <span class="string">&quot;./animal.js&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">type</span> <span class="title class_">Animals</span> = <span class="title class_">Cat</span> | <span class="title class_">Dog</span>;</span><br><span class="line"><span class="keyword">const</span> name = <span class="title function_">createCatName</span>();</span><br></pre></td></tr></table></figure><h3 id="9-3-4-ES模块语法与CommonJS行为"><a href="#9-3-4-ES模块语法与CommonJS行为" class="headerlink" title="9.3.4 ES模块语法与CommonJS行为"></a>9.3.4 ES模块语法与CommonJS行为</h3><p>TypeScript有ES Module语法，它直接与CommonJS和AMD的<code>require</code>相关联。使用ES Module的 <code>import</code> 在大多数情况下与这些环境的<code>require</code>相同，但这种语法确保你在TypeScript文件中与CommonJS的输出有1对1的匹配：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> code = fs.<span class="title function_">readFileSync</span>(<span class="string">&quot;hello.ts&quot;</span>, <span class="string">&quot;utf8&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="9-4-CommonJS-语法"><a href="#9-4-CommonJS-语法" class="headerlink" title="9.4 CommonJS 语法"></a>9.4 CommonJS 语法</h2><p>CommonJS是npm上大多数模块的交付格式。即使你使用上面的ES模块语法进行编写，对CommonJS语法的工作方式有一个简单的了解也会帮助你更容易地进行调试。</p><h3 id="9-4-1-导出"><a href="#9-4-1-导出" class="headerlink" title="9.4.1 导出"></a>9.4.1 导出</h3><p>标识符是通过在一个全局调用的 <code>module</code> 上设置 <code>exports</code> 属性来导出的。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">absolute</span>(<span class="params">num: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (num &lt; <span class="number">0</span>) <span class="keyword">return</span> num * -<span class="number">1</span>;</span><br><span class="line">  <span class="keyword">return</span> num;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">pi</span>: <span class="number">3.14</span>,</span><br><span class="line">  <span class="attr">squareTwo</span>: <span class="number">1.41</span>,</span><br><span class="line">  <span class="attr">phi</span>: <span class="number">1.61</span>,</span><br><span class="line">  absolute,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>然后这些文件可以通过<code>require</code>语句导入：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> maths = <span class="built_in">require</span>(<span class="string">&quot;maths&quot;</span>);</span><br><span class="line"><span class="comment">// pi: any</span></span><br><span class="line">maths.<span class="property">pi</span>;</span><br></pre></td></tr></table></figure><p>或者你可以使用JavaScript中的析构功能来简化一下：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; squareTwo &#125; = <span class="built_in">require</span>(<span class="string">&quot;maths&quot;</span>);</span><br><span class="line"><span class="comment">// const squareTwo: any</span></span><br><span class="line">squareTwo;</span><br></pre></td></tr></table></figure><h3 id="9-4-2-CommonJS和ES模块的互操作性"><a href="#9-4-2-CommonJS和ES模块的互操作性" class="headerlink" title="9.4.2 CommonJS和ES模块的互操作性"></a>9.4.2 CommonJS和ES模块的互操作性</h3><p>关于默认导入和模块命名空间对象导入之间的区别，CommonJS和ES Modules之间存在着功能上的不匹配。</p><p>这个后面章节会详细介绍。</p><h2 id="9-5-TypeScript的模块解析选项"><a href="#9-5-TypeScript的模块解析选项" class="headerlink" title="9.5 TypeScript的模块解析选项"></a>9.5 TypeScript的模块解析选项</h2><p>模块解析是指从<code>import</code>或<code>require</code>语句中获取一个字符串，并确定该字符串所指的文件的过程。</p><p>TypeScript包括两种解析策略。经典和Node。当编译器选项 <code>module</code>不是<code>commonjs</code>时，经典策略是默认的，是为了向后兼容。Node策略复制了Node.js在CommonJS模式下的工作方式，对<code>.ts</code>和<code>.d.ts</code>有额外的检查。</p><p>在TypeScript中，有许多TSConfig标志影响模块策略： <a href="https://www.typescriptlang.org/tsconfig#moduleResolution"><code>moduleResolution</code></a>, <a href="https://www.typescriptlang.org/tsconfig#baseUrl"><code>baseUrl</code></a>, <a href="https://www.typescriptlang.org/tsconfig#paths"><code>paths</code></a>, <a href="https://www.typescriptlang.org/tsconfig#rootDirs"><code>rootDirs</code></a>.</p><p>关于这些策略如何工作的全部细节，你可以参考《<a href="https://www.typescriptlang.org/docs/handbook/module-resolution.html">模块解析</a>》。</p><h2 id="9-6-TypeScript的模块输出选项"><a href="#9-6-TypeScript的模块输出选项" class="headerlink" title="9.6 TypeScript的模块输出选项"></a>9.6 TypeScript的模块输出选项</h2><p>有两个选项会影响JavaScript输出：</p><ul><li><code>target</code>，它决定了哪些JS功能被降级（转换为在旧的JavaScript运行时运行），哪些保持不变</li><li><code>module</code>，它决定了哪些代码用于模块之间的相互作用。</li></ul><p>你使用的<code>target</code>是由你期望运行TypeScript代码的JavaScript运行时中的可用功能决定的。这可能是：你支持的最古老的网络浏览器，你期望运行的最低版本的Node.js，或者可能来自于你的运行时的独特约束——比如Electron。</p><p>所有模块之间的通信都是通过模块加载器进行的，编译器选项 <code>module</code> 决定使用哪一个。在运行时，模块加载器负责在执行一个模块之前定位和执行该模块的所有依赖项。</p><p>例如，这里是一个使用ES模块语法的TypeScript文件，展示了<code>module</code>的一些不同选项：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; valueOfPi &#125; <span class="keyword">from</span> <span class="string">&quot;./constants.js&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> twoPi = valueOfPi * <span class="number">2</span>;</span><br></pre></td></tr></table></figure><ul><li>ES2020</li></ul><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; valueOfPi &#125; <span class="keyword">from</span> <span class="string">&quot;./constants.js&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> twoPi = valueOfPi * <span class="number">2</span>;</span><br></pre></td></tr></table></figure><ul><li>CommonJS</li></ul><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(<span class="built_in">exports</span>, <span class="string">&quot;__esModule&quot;</span>, &#123; <span class="attr">value</span>: <span class="literal">true</span> &#125;);</span><br><span class="line"><span class="built_in">exports</span>.<span class="property">twoPi</span> = <span class="built_in">void</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">const</span> constants_js_1 = <span class="built_in">require</span>(<span class="string">&quot;./constants.js&quot;</span>);</span><br><span class="line"><span class="built_in">exports</span>.<span class="property">twoPi</span> = constants_js_1.<span class="property">valueOfPi</span> * <span class="number">2</span>;</span><br></pre></td></tr></table></figure><ul><li><h4 id="UMD"><a href="#UMD" class="headerlink" title="UMD"></a>UMD</h4></li></ul><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line">(<span class="keyword">function</span> (<span class="params">factory</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="variable language_">module</span> === <span class="string">&quot;object&quot;</span> &amp;&amp; <span class="keyword">typeof</span> <span class="variable language_">module</span>.<span class="property">exports</span> === <span class="string">&quot;object&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> v = <span class="title function_">factory</span>(<span class="built_in">require</span>, <span class="built_in">exports</span>);</span><br><span class="line">    <span class="keyword">if</span> (v !== <span class="literal">undefined</span>) <span class="variable language_">module</span>.<span class="property">exports</span> = v;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> define === <span class="string">&quot;function&quot;</span> &amp;&amp; define.<span class="property">amd</span>) &#123;</span><br><span class="line">    <span class="title function_">define</span>([<span class="string">&quot;require&quot;</span>, <span class="string">&quot;exports&quot;</span>, <span class="string">&quot;./constants.js&quot;</span>], factory);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)(<span class="keyword">function</span> (<span class="params"><span class="built_in">require</span>, <span class="built_in">exports</span></span>) &#123;</span><br><span class="line">  <span class="string">&quot;use strict&quot;</span>;</span><br><span class="line">  <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(<span class="built_in">exports</span>, <span class="string">&quot;__esModule&quot;</span>, &#123; <span class="attr">value</span>: <span class="literal">true</span> &#125;);</span><br><span class="line">  <span class="built_in">exports</span>.<span class="property">twoPi</span> = <span class="built_in">void</span> <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">const</span> constants_js_1 = <span class="built_in">require</span>(<span class="string">&quot;./constants.js&quot;</span>);</span><br><span class="line">  <span class="built_in">exports</span>.<span class="property">twoPi</span> = constants_js_1.<span class="property">valueOfPi</span> * <span class="number">2</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>请注意，ES2020实际上与原来的index.ts相同。</p></blockquote><p>你可以在<a href="https://www.typescriptlang.org/tsconfig#module">TSConfig 模块参考</a> 中看到所有可用的选项以及它们发出的JavaScript代码是什么样子。</p><h2 id="9-7-TypeScript-命名空间"><a href="#9-7-TypeScript-命名空间" class="headerlink" title="9.7 TypeScript 命名空间"></a>9.7 TypeScript 命名空间</h2><p>TypeScript有自己的模块格式，称为 <code>命名空间(namespaces)</code>，这比ES模块标准要早。这种语法对于创建复杂的定义文件有很多有用的功能，并且在 <a href="https://www.typescriptlang.org/dt">DefinitelyTyped</a>中仍然被积极使用。虽然没有被废弃，但命名空间中的大部分功能都存在于ES Modules中，我们建议你使用它来与JavaScript的方向保持一致。你可以在 <a href="https://www.typescriptlang.org/docs/handbook/namespaces.html">namespaces参考页</a>中了解更多关于命名空间的信息。</p><p>——基础篇完——</p><h3 id="特别声明-本文转自-古艺散人老师-，如有需要可前往原文预览查看。"><a href="#特别声明-本文转自-古艺散人老师-，如有需要可前往原文预览查看。" class="headerlink" title="特别声明: 本文转自  古艺散人老师 ，如有需要可前往原文预览查看。"></a>特别声明: 本文转自 <a href="https://github.com/lurongtao/TypeScript"> 古艺散人老师 </a>，如有需要可前往原文预览查看。</h3>]]></content>
      
      
      <categories>
          
          <category> TypeScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> TypeScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1-8、基础篇：类</title>
      <link href="/article/55025/"/>
      <url>/article/55025/</url>
      
        <content type="html"><![CDATA[<h1 id="八、类"><a href="#八、类" class="headerlink" title="八、类"></a>八、类</h1><p>TypeScript提供了对ES2015中引入的 <code>class</code> 关键词的完全支持。</p><p>与其他JavaScript语言功能一样，TypeScript增加了类型注释和其他语法，允许你表达类和其他类型之间的关系。</p><h2 id="8-1-类成员"><a href="#8-1-类成员" class="headerlink" title="8.1 类成员"></a>8.1 类成员</h2><p>这里有一个最基本的类——一个空的类：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Point</span> &#123;&#125;</span><br></pre></td></tr></table></figure><p>这个类还不是很有用，所以我们开始添加一些成员。</p><h3 id="8-1-1-类属性"><a href="#8-1-1-类属性" class="headerlink" title="8.1.1 类属性"></a>8.1.1 类属性</h3><p>在一个类上声明字段，创建一个公共的可写属性：A mapped type is a generic type which uses a union of <code>PropertyKey</code>s (frequently created <a href="https://www.typescriptlang.org/docs/handbook/2/indexed-access-types.html">via a <code>keyof</code></a>) to iterate through keys to create a type:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Point</span> &#123;</span><br><span class="line">  <span class="attr">x</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">y</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> pt = <span class="keyword">new</span> <span class="title class_">Point</span>();</span><br><span class="line">pt.<span class="property">x</span> = <span class="number">0</span>;</span><br><span class="line">pt.<span class="property">y</span> = <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>与其他位置一样，类型注解是可选的，但如果不指定，将是一个隐含的 <code>any</code> 类型。</p><p>字段也可以有初始化器；这些初始化器将在类被实例化时自动运行。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Point</span> &#123;</span><br><span class="line">  x = <span class="number">0</span>;</span><br><span class="line">  y = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> pt = <span class="keyword">new</span> <span class="title class_">Point</span>();</span><br><span class="line"><span class="comment">// Prints 0, 0</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;pt.x&#125;</span>, <span class="subst">$&#123;pt.y&#125;</span>`</span>);</span><br></pre></td></tr></table></figure><p>就像 <code>const</code>、<code>let</code>和<code>var</code>一样，一个类属性的初始化器将被用来推断其类型。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> pt = <span class="keyword">new</span> <span class="title class_">Point</span>();</span><br><span class="line">pt.<span class="property">x</span> = <span class="string">&quot;0&quot;</span>;</span><br></pre></td></tr></table></figure><img src="/img/TypeScript/09-01.png" alt="image-20211129114803786" style="zoom:50%;" /><ul><li><code>--strictPropertyInitialization</code></li></ul><p><code>strictPropertyInitialization</code>设置控制是否需要在构造函数中初始化类字段。</p><img src="/img/TypeScript/09-02.png" alt="image-20211129115145529" style="zoom:50%;" /><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">BadGreeter</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/img/TypeScript/09-04.png" alt="image-20211129115341214" style="zoom:50%;" /><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">GoodGreeter</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>请注意，该字段需要在构造函数本身中初始化。TypeScript不会分析你从构造函数中调用的方法来检测初始化，因为派生类可能会覆盖这些方法而无法初始化成员。</p><p>如果你打算通过构造函数以外的方式来确定初始化一个字段（例如，也许一个外部库为你填充了你的类的一部分），你可以使用确定的赋值断言操作符 <code>！</code>。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">OKGreeter</span> &#123;</span><br><span class="line">  <span class="comment">// 没有初始化，但没报错。</span></span><br><span class="line">  name!: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-1-2-readonly"><a href="#8-1-2-readonly" class="headerlink" title="8.1.2 readonly"></a>8.1.2 <code>readonly</code></h3><p>字段的前缀可以是 <code>readonly</code> 修饰符。这可以防止在构造函数之外对该字段进行赋值。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Greeter</span> &#123;</span><br><span class="line">  <span class="keyword">readonly</span> <span class="attr">name</span>: <span class="built_in">string</span> = <span class="string">&quot;world&quot;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">otherName?: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (otherName !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">name</span> = otherName;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">err</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&quot;not ok&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> g = <span class="keyword">new</span> <span class="title class_">Greeter</span>();</span><br><span class="line">g.<span class="property">name</span> = <span class="string">&quot;also not ok&quot;</span>;</span><br></pre></td></tr></table></figure><img src="/img/TypeScript/09-05.png" alt="image-20211129120222803" style="zoom:50%;" /><h3 id="8-1-3-构造器"><a href="#8-1-3-构造器" class="headerlink" title="8.1.3 构造器"></a>8.1.3 构造器</h3><p>类构造函数与函数非常相似。你可以添加带有类型注释的参数、默认值和重载：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Point</span> &#123;</span><br><span class="line">  <span class="attr">x</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">y</span>: <span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 带默认值的正常签名</span></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">x = <span class="number">0</span>, y = <span class="number">0</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">x</span> = x;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">y</span> = y;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Point</span> &#123;</span><br><span class="line">  <span class="comment">// 重载</span></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">string</span></span>);</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">s: <span class="built_in">string</span></span>);</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">xs: <span class="built_in">any</span>, y?: <span class="built_in">any</span></span>) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>类的构造函数签名和函数签名之间只有一些区别：</p><ul><li><p>构造函数不能有类型参数–这属于外层类的声明，我们将在后面学习。</p></li><li><p>构造函数不能有返回类型注释——类的实例类型总是被返回的。</p></li></ul><p><strong>Super 调用</strong></p><p>就像在JavaScript中一样，如果你有一个基类，在使用任何 <code>this.</code>成员之前，你需要在构造器主体中调用<code>super();</code>。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span> &#123;</span><br><span class="line">  k = <span class="number">4</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Derived</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Base</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 在ES5中打印一个错误的值；在ES6中抛出异常。</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">k</span>);</span><br><span class="line">    <span class="variable language_">super</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/img/TypeScript/09-06.png" alt="image-20211129135259853" style="zoom:50%;" /><p>在JavaScript中，忘记调用 <code>super</code> 是一个很容易犯的错误，但TypeScript会在必要时告诉你。</p><h3 id="8-1-4-方法"><a href="#8-1-4-方法" class="headerlink" title="8.1.4 方法"></a>8.1.4 方法</h3><p>一个类上的函数属性被称为方法。方法可以使用与函数和构造函数相同的所有类型注释。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Point</span> &#123;</span><br><span class="line">  x = <span class="number">10</span>;</span><br><span class="line">  y = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">scale</span>(<span class="attr">n</span>: <span class="built_in">number</span>): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">x</span> *= n;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">y</span> *= n;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>除了标准的类型注解，TypeScript并没有为方法添加其他新的东西。</p><p>请注意，在一个方法体中，仍然必须通过<code>this</code>访问字段和其他方法。方法体中的非限定名称将总是指代包围范围内的东西。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">x</span>: <span class="built_in">number</span> = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span> &#123;</span><br><span class="line">  <span class="attr">x</span>: <span class="built_in">string</span> = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">m</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 这是在试图修改第1行的&#x27;x&#x27;，而不是类属性。</span></span><br><span class="line">    x = <span class="string">&quot;world&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-1-5-Getters-Setters"><a href="#8-1-5-Getters-Setters" class="headerlink" title="8.1.5 Getters &#x2F; Setters"></a>8.1.5 Getters &#x2F; Setters</h3><p>类也可以有访问器：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">C</span> &#123;</span><br><span class="line">  _length = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">length</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">_length</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">set</span> <span class="title function_">length</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_length</span> = value;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>请注意，一个没有额外逻辑的字段支持的<code>get/set</code>对在JavaScript中很少有用。如果你不需要在<code>get/set</code>操作中添加额外的逻辑，暴露公共字段也是可以的。</p></blockquote><p>TypeScript对访问器有一些特殊的推理规则：</p><ul><li><p>如果存在 <code>get</code>，但没有<code>set</code>，则该属性自动是只读的</p></li><li><p>如果没有指定<code>setter</code>参数的类型，它将从<code>getter</code>的返回类型中推断出来</p></li><li><p>访问器和设置器必须有相同的成员可见性</p></li></ul><p>从TypeScript 4.3开始，可以有不同类型的访问器用于获取和设置。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Thing</span> &#123;</span><br><span class="line">  _size = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">size</span>(): <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">_size</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">set</span> <span class="title function_">size</span>(<span class="params">value: <span class="built_in">string</span> | <span class="built_in">number</span> | <span class="built_in">boolean</span></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> num = <span class="title class_">Number</span>(value);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 不允许NaN、Infinity等</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!<span class="title class_">Number</span>.<span class="built_in">isFinite</span>(num)) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">_size</span> = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_size</span> = num;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-1-6-索引签名"><a href="#8-1-6-索引签名" class="headerlink" title="8.1.6 索引签名"></a>8.1.6 索引签名</h3><p>类可以声明索引签名；这些签名的作用与其他对象类型的索引签名相同。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line">  [<span class="attr">s</span>: <span class="built_in">string</span>]: <span class="built_in">boolean</span> | (<span class="function">(<span class="params">s: <span class="built_in">string</span></span>) =&gt;</span> <span class="built_in">boolean</span>);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">check</span>(<span class="params">s: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>[s] <span class="keyword">as</span> <span class="built_in">boolean</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为索引签名类型需要同时捕获方法的类型，所以要有用地使用这些类型并不容易。一般来说，最好将索引数据存储在另一个地方，而不是在类实例本身。</p><h2 id="8-2-类继承"><a href="#8-2-类继承" class="headerlink" title="8.2 类继承"></a>8.2 类继承</h2><p>像其他具有面向对象特性的语言一样，JavaScript中的类可以继承自基类。</p><h3 id="8-2-1-implements子句"><a href="#8-2-1-implements子句" class="headerlink" title="8.2.1 implements子句"></a>8.2.1 <code>implements</code>子句</h3><p>你可以使用一个 <code>implements</code> 子句来检查一个类，是否满足了一个特定的接口。如果一个类不能正确地实现它，就会发出一个错误。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Pingable</span> &#123;</span><br><span class="line">  <span class="title function_">ping</span>(): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Sonar</span> <span class="keyword">implements</span> <span class="title class_">Pingable</span> &#123;</span><br><span class="line">  <span class="title function_">ping</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;ping!&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Ball</span> <span class="keyword">implements</span> <span class="title class_">Pingable</span> &#123;</span><br><span class="line">  <span class="title function_">pong</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;pong!&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/img/TypeScript/09-07.png" alt="image-20211129154149915" style="zoom:50%;" /><p>类也可以实现多个接口，例如 <code>class C implements A, B &#123;</code></p><p><strong>注意事项</strong></p><p>重要的是要明白， <code>implements</code> 子句只是检查类是否可以被当作接口类型来对待。它根本不会改变类的类型或其方法。一个常见的错误来源是认为 <code>implements</code> 子句会改变类的类型–它不会！它不会。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Checkable</span> &#123;</span><br><span class="line">  <span class="title function_">check</span>(<span class="attr">name</span>: <span class="built_in">string</span>): <span class="built_in">boolean</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NameChecker</span> <span class="keyword">implements</span> <span class="title class_">Checkable</span> &#123;</span><br><span class="line">  <span class="title function_">check</span>(<span class="params">s</span>) &#123;</span><br><span class="line">    <span class="comment">// any：注意这里没有错误</span></span><br><span class="line">    <span class="keyword">return</span> s.<span class="title function_">toLowercse</span>() === <span class="string">&quot;ok&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/img/TypeScript/09-08.png" alt="image-20211129163841634" style="zoom:50%;" /><p>在这个例子中，我们也许期望 <code>s</code> 的类型会受到 <code>check</code>的<code>name: string</code>参数的影响。事实并非如此–实现子句并没有改变类主体的检查方式或其类型的推断。</p><p>同样地，实现一个带有可选属性的接口并不能创建该属性。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> A &#123;</span><br><span class="line">  <span class="attr">x</span>: <span class="built_in">number</span>;</span><br><span class="line">  y?: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span> <span class="keyword">implements</span> A &#123;</span><br><span class="line">  x = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> c = <span class="keyword">new</span> <span class="title function_">C</span>();</span><br><span class="line">c.<span class="property">y</span> = <span class="number">10</span>;</span><br></pre></td></tr></table></figure><img src="/img/TypeScript/09-09.png" alt="image-20211129164354121" style="zoom:50%;" /><h3 id="8-2-2-extends子句"><a href="#8-2-2-extends子句" class="headerlink" title="8.2.2 extends子句"></a>8.2.2 <code>extends</code>子句</h3><p>类可以从基类中扩展出来。派生类拥有其基类的所有属性和方法，也可以定义额外的成员。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">  <span class="title function_">move</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Moving along!&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Animal</span> &#123;</span><br><span class="line">  <span class="title function_">woof</span>(<span class="params">times: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; times; i++) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;woof!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> d = <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line"><span class="comment">// 基类的类方法</span></span><br><span class="line">d.<span class="title function_">move</span>();</span><br><span class="line"><span class="comment">// 派生的类方法</span></span><br><span class="line">d.<span class="title function_">woof</span>(<span class="number">3</span>);</span><br></pre></td></tr></table></figure><h3 id="8-2-3-重写方法"><a href="#8-2-3-重写方法" class="headerlink" title="8.2.3 重写方法"></a>8.2.3 重写方法</h3><p>派生类也可以覆盖基类的一个字段或属性。你可以使用<code>super.</code>语法来访问基类方法。注意，因为JavaScript类是一个简单的查找对象，没有 “超级字段 “的概念。</p><p>TypeScript强制要求派生类总是其基类的一个子类型。</p><p>例如，这里有一个合法的方法来覆盖一个方法。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span> &#123;</span><br><span class="line">  <span class="title function_">greet</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hello, world!&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Derived</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Base</span> &#123;</span><br><span class="line">  <span class="title function_">greet</span>(<span class="params">name?: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (name === <span class="literal">undefined</span>) &#123;</span><br><span class="line">      <span class="variable language_">super</span>.<span class="title function_">greet</span>();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Hello, <span class="subst">$&#123;name.toUpperCase()&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> d = <span class="keyword">new</span> <span class="title class_">Derived</span>();</span><br><span class="line">d.<span class="title function_">greet</span>();</span><br><span class="line">d.<span class="title function_">greet</span>(<span class="string">&quot;reader&quot;</span>);</span><br></pre></td></tr></table></figure><p>派生类遵循其基类契约是很重要的。请记住，通过基类引用来引用派生类实例是非常常见的（而且总是合法的！）。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 通过基类引用对派生实例进行取别名</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">b</span>: <span class="title class_">Base</span> = d;</span><br><span class="line"><span class="comment">// 没问题</span></span><br><span class="line">b.<span class="title function_">greet</span>();</span><br></pre></td></tr></table></figure><p>如果<code>Derived</code>没有遵守Base的约定怎么办？</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span> &#123;</span><br><span class="line">  <span class="title function_">greet</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hello, world!&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Derived</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Base</span> &#123;</span><br><span class="line">  <span class="comment">// 使这个参数成为必需的</span></span><br><span class="line">  <span class="title function_">greet</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Hello, <span class="subst">$&#123;name.toUpperCase()&#125;</span>`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/img/TypeScript/09-10.png" alt="image-20211129191159846" style="zoom:50%;" /><p>如果我们不顾错误编译这段代码，这个样本就会崩溃：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="attr">b</span>: <span class="title class_">Base</span> = <span class="keyword">new</span> <span class="title class_">Derived</span>();</span><br><span class="line"><span class="comment">// 崩溃，因为 &quot;名称 &quot;将是 undefined。</span></span><br><span class="line">b.<span class="title function_">greet</span>();</span><br></pre></td></tr></table></figure><img src="/img/TypeScript/09-11.png" alt="image-20211129191741373" style="zoom:50%;" /><h3 id="8-2-4-初始化顺序"><a href="#8-2-4-初始化顺序" class="headerlink" title="8.2.4 初始化顺序"></a>8.2.4 初始化顺序</h3><p>在某些情况下，JavaScript类的初始化顺序可能会令人惊讶。让我们考虑一下这段代码：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span> &#123;</span><br><span class="line">  name = <span class="string">&quot;base&quot;</span>;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;My name is &quot;</span> + <span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Derived</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Base</span> &#123;</span><br><span class="line">  name = <span class="string">&quot;derived&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印 &quot;base&quot;, 而不是 &quot;derived&quot;</span></span><br><span class="line"><span class="keyword">const</span> d = <span class="keyword">new</span> <span class="title class_">Derived</span>();</span><br></pre></td></tr></table></figure><p>这里发生了什么？</p><p>按照JavaScript的定义，类初始化的顺序是：</p><ul><li>基类的字段被初始化</li><li>基类构造函数运行</li><li>派生类的字段被初始化</li><li>派生类构造函数运行</li></ul><p>这意味着基类构造函数在自己的构造函数中看到了自己的name值，因为派生类的字段初始化还没有运行。</p><h3 id="8-2-5-继承内置类型"><a href="#8-2-5-继承内置类型" class="headerlink" title="8.2.5 继承内置类型"></a>8.2.5 继承内置类型</h3><blockquote><p>注意：如果你不打算继承Array、Error、Map等内置类型，或者你的编译目标明确设置为ES6&#x2F;ES2015或以上，你可以跳过本节。</p></blockquote><p>在ES2015中，返回对象的构造函数隐含地替代了<code>super(...)</code>的任何调用者的<code>this</code>的值。生成的构造函数代码有必要捕获<code>super(...)</code>的任何潜在返回值并将其替换为<code>this</code>。</p><p>因此，子类化<code>Error</code>、<code>Array</code>等可能不再像预期那样工作。这是由于<code>Error</code>、<code>Array</code>等的构造函数使用ECMAScript 6的<code>new.target</code>来调整原型链；然而，在ECMAScript 5中调用构造函数时，没有办法确保<code>new.target</code>的值。其他的下级编译器一般默认有同样的限制。</p><p>对于一个像下面这样的子类：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MsgError</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Error</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">m: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(m);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">sayHello</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello &quot;</span> + <span class="variable language_">this</span>.<span class="property">message</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>你可能会发现：</p><ul><li>方法在构造这些子类所返回的对象上可能是未定义的，所以调用 <code>sayHello</code> 会导致错误。</li></ul><img src="/img/TypeScript/09-12.png" alt="image-20211129205005544" style="zoom:50%;" /><ul><li><code>instanceof</code>将在子类的实例和它们的实例之间被打破，所以<code>（new MsgError()）instanceof MsgError</code>将返回<code>false</code>。</li></ul><img src="/img/TypeScript/09-13.png" alt="image-20211129205309009" style="zoom:50%;" /><p>作为建议，你可以在任何<code>super(...)</code>调用后立即手动调整原型。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MsgError</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Error</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">m: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(m);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 明确地设置原型。</span></span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">setPrototypeOf</span>(<span class="variable language_">this</span>, <span class="title class_">MsgError</span>.<span class="property"><span class="keyword">prototype</span></span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">sayHello</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello &quot;</span> + <span class="variable language_">this</span>.<span class="property">message</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/img/TypeScript/09-14.png" alt="image-20211129205721788" style="zoom:50%;" /><p>然而，<code>MsgError</code>的任何子类也必须手动设置原型。对于不支持<code>Object.setPrototypeOf</code>的运行时，你可以使用<code>__proto__</code>来代替。</p><p>不幸的是，这些变通方法在<code>Internet Explorer 10</code>和更早的版本上不起作用。我们可以手动将原型中的方法复制到实例本身（例如<code>MsgError.prototype</code>到<code>this</code>），但是原型链本身不能被修复。</p><h2 id="8-2-成员的可见性"><a href="#8-2-成员的可见性" class="headerlink" title="8.2 成员的可见性"></a>8.2 成员的可见性</h2><p>你可以使用TypeScript来控制某些方法或属性对类外的代码是否可见。</p><h3 id="8-2-1-public"><a href="#8-2-1-public" class="headerlink" title="8.2.1 public"></a>8.2.1 <code>public</code></h3><p>类成员的默认可见性是公共(<code>public</code>)的。一个公共(<code>public</code>)成员可以在任何地方被访问。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Greeter</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">greet</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hi!&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> g = <span class="keyword">new</span> <span class="title class_">Greeter</span>();</span><br><span class="line">g.<span class="title function_">greet</span>();</span><br></pre></td></tr></table></figure><p>因为<code>public</code>已经是默认的可见性修饰符，所以你永远不需要在类成员上写它，但为了风格&#x2F;可读性的原因，可能会选择这样做。</p><h3 id="8-2-2-protected"><a href="#8-2-2-protected" class="headerlink" title="8.2.2 protected"></a>8.2.2 <code>protected</code></h3><p>受保护的(<code>protected</code>)成员只对它们所声明的类的子类可见。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Greeter</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">greet</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hello, &quot;</span> + <span class="variable language_">this</span>.<span class="title function_">getName</span>());</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">protected</span> <span class="title function_">getName</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hi&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SpecialGreeter</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Greeter</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">howdy</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 在此可以访问受保护的成员</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Howdy, &quot;</span> + <span class="variable language_">this</span>.<span class="title function_">getName</span>());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> g = <span class="keyword">new</span> <span class="title class_">SpecialGreeter</span>();</span><br><span class="line">g.<span class="title function_">greet</span>(); <span class="comment">// 没有问题</span></span><br><span class="line">g.<span class="title function_">getName</span>(); <span class="comment">// 无权访问</span></span><br></pre></td></tr></table></figure><img src="/img/TypeScript/09-15.png" alt="image-20211130102051422" style="zoom:50%;" /><ul><li><strong>受保护成员的暴露</strong></li></ul><p>派生类需要遵循它们的基类契约，但可以选择公开具有更多能力的基类的子类型。这包括将受保护的成员变成公开。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span> &#123;</span><br><span class="line">  <span class="keyword">protected</span> m = <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Derived</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Base</span> &#123;</span><br><span class="line">  <span class="comment">// 没有修饰符，所以默认为&#x27;公共&#x27;(&#x27;public&#x27;)</span></span><br><span class="line">  m = <span class="number">15</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> d = <span class="keyword">new</span> <span class="title class_">Derived</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(d.<span class="property">m</span>); <span class="comment">// OK</span></span><br></pre></td></tr></table></figure><h3 id="8-2-3-private"><a href="#8-2-3-private" class="headerlink" title="8.2.3 private"></a>8.2.3 <code>private</code></h3><p><code>private</code>和<code>protected</code>一样，但不允许从子类中访问该成员。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> x = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> b = <span class="keyword">new</span> <span class="title class_">Base</span>();</span><br><span class="line"><span class="comment">// 不能从类外访问</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b.<span class="property">x</span>);</span><br></pre></td></tr></table></figure><img src="/img/TypeScript/09-17.png" alt="image-20211130104530638" style="zoom:50%;" /><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> x = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> b = <span class="keyword">new</span> <span class="title class_">Base</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Derived</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Base</span> &#123;</span><br><span class="line">  <span class="title function_">showX</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 不能在子类中访问</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">x</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为私有(<code>private</code>)成员对派生类是不可见的，所以派生类不能增加其可见性。</p><ul><li><strong>跨实例的私有访问</strong></li></ul><p>不同的OOP语言对同一个类的不同实例，是否可以访问对方的私有成员，有不同的处理方法。虽然像Java、C#、C++、Swift和PHP等语言允许这样做，但Ruby不允许。</p><p>TypeScript确实允许跨实例的私有访问：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> x = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">sameAs</span>(<span class="params">other: A</span>) &#123;</span><br><span class="line">    <span class="comment">// 可以访问</span></span><br><span class="line">    <span class="keyword">return</span> other.<span class="property">x</span> === <span class="variable language_">this</span>.<span class="property">x</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>注意事项</strong></li></ul><p>像TypeScript类型系统的其他方面一样，<code>private</code>和<code>protected</code>只在类型检查中被强制执行。</p><p>这意味着JavaScript的运行时结构，如<code>in</code>或简单的属性查询，仍然可以访问一个私有或保护的成员。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MySafe</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> secretKey = <span class="number">12345</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在JS环境中...</span></span><br><span class="line"><span class="keyword">const</span> s = <span class="keyword">new</span> <span class="title class_">MySafe</span>();</span><br><span class="line"><span class="comment">// 将打印 12345</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s.<span class="property">secretKey</span>);</span><br></pre></td></tr></table></figure><p><code>private</code>也允许在类型检查时使用括号符号进行访问。这使得私有声明的字段可能更容易被单元测试之类的东西所访问，缺点是这些字段是软性私有的，不能严格执行私有特性。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MySafe</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> secretKey = <span class="number">12345</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> s = <span class="keyword">new</span> <span class="title class_">MySafe</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在类型检查期间不允许</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s.<span class="property">secretKey</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 正确</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s[<span class="string">&quot;secretKey&quot;</span>]);</span><br></pre></td></tr></table></figure><img src="/img/TypeScript/09-19.png" alt="image-20211130135104155" style="zoom:50%;" /><p>与TypeScript的 <code>private</code>不同，JavaScript的<code>private</code>字段（#）在编译后仍然是<code>private</code>的，并且不提供前面提到的像括号符号访问那样的转义窗口，使其成为硬<code>private</code>。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> &#123;</span><br><span class="line">  #barkAmount = <span class="number">0</span>;</span><br><span class="line">  personality = <span class="string">&quot;happy&quot;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 0</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.#barkAmount);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> dog = <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line"><span class="comment">// undefined</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(dog.<span class="property">barkAmount</span>);</span><br></pre></td></tr></table></figure><img src="/img/TypeScript/09-20.png" alt="image-20211130154613004" style="zoom:50%;" /><p>当编译到ES2021或更少时，TypeScript将使用WeakMaps来代替 <code>#</code>。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> _Dog_barkAmount;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    _Dog_barkAmount.<span class="title function_">set</span>(<span class="variable language_">this</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">personality</span> = <span class="string">&quot;happy&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">_Dog_barkAmount = <span class="keyword">new</span> <span class="title class_">WeakMap</span>();</span><br></pre></td></tr></table></figure><p>如果你需要保护你的类中的值免受恶意行为的影响，你应该使用提供硬运行时隐私的机制，如闭包、<code>WeakMaps</code>或私有字段。请注意，这些在运行时增加的隐私检查可能会影响性能。</p><h2 id="8-3-静态成员"><a href="#8-3-静态成员" class="headerlink" title="8.3 静态成员"></a>8.3 静态成员</h2><p>类可以有静态成员。这些成员并不与类的特定实例相关联。它们可以通过类的构造函数对象本身来访问。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line">  <span class="keyword">static</span> x = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">printX</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">MyClass</span>.<span class="property">x</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">MyClass</span>.<span class="property">x</span>);</span><br><span class="line"><span class="title class_">MyClass</span>.<span class="title function_">printX</span>();</span><br></pre></td></tr></table></figure><p>静态成员也可以使用相同的<code>public</code>、<code>protected</code>和<code>private</code>可见性修饰符。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> x = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">MyClass</span>.<span class="property">x</span>);</span><br></pre></td></tr></table></figure><img src="/img/TypeScript/09-21.png" alt="image-20211130161046623" style="zoom:50%;" /><p>静态成员也会被继承。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span> &#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">getGreeting</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Hello world&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Derived</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Base</span> &#123;</span><br><span class="line">  myGreeting = <span class="title class_">Derived</span>.<span class="title function_">getGreeting</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-3-1-特殊静态名称"><a href="#8-3-1-特殊静态名称" class="headerlink" title="8.3.1 特殊静态名称"></a>8.3.1 特殊静态名称</h3><p>一般来说，从函数原型覆盖属性是不安全的&#x2F;不可能的。因为类本身就是可以用<code>new</code>调用的函数，所以某些静态名称不能使用。像<code>name</code>、<code>length</code>和<code>call</code>这样的函数属性，定义为静态成员是无效的。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">S</span> &#123;</span><br><span class="line">  <span class="keyword">static</span> name = <span class="string">&quot;S!&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/img/TypeScript/09-22.png" alt="image-20211203133418242" style="zoom:50%;" /><h3 id="8-3-2-为什么没有静态类？"><a href="#8-3-2-为什么没有静态类？" class="headerlink" title="8.3.2 为什么没有静态类？"></a>8.3.2 为什么没有静态类？</h3><p>TypeScript（和JavaScript）没有像C#和Java那样有一个叫做静态类的结构。</p><p>这些结构体的存在，只是因为这些语言强制所有的数据和函数都在一个类里面；因为这个限制在TypeScript中不存在，所以不需要它们。一个只有一个实例的类，在JavaScript&#x2F;TypeScript中通常只是表示为一个普通的对象。</p><p>例如，我们不需要TypeScript中的 “静态类 “语法，因为一个普通的对象（甚至是顶级函数）也可以完成这个工作。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 不需要 &quot;static&quot; class</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyStaticClass</span> &#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">doSomething</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 首选 (备选 1)</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">doSomething</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 首选 (备选 2)</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">MyHelperObject</span> = &#123;</span><br><span class="line">  <span class="title function_">dosomething</span>(<span class="params"></span>) &#123;&#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="8-4-类里的-static-区块"><a href="#8-4-类里的-static-区块" class="headerlink" title="8.4 类里的 static 区块"></a>8.4 类里的 <code>static </code>区块</h2><p>静态块允许你写一串有自己作用域的语句，可以访问包含类中的私有字段。这意味着我们可以用写语句的所有能力来写初始化代码，不泄露变量，并能完全访问我们类的内部结构。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Foo</span> &#123;</span><br><span class="line">  <span class="keyword">static</span> #count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">count</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Foo</span>.#count;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> lastInstances = &#123;</span><br><span class="line">        <span class="attr">length</span>: <span class="number">100</span>,</span><br><span class="line">      &#125;;</span><br><span class="line">      <span class="title class_">Foo</span>.#count += lastInstances.<span class="property">length</span>;</span><br><span class="line">    &#125; <span class="keyword">catch</span> &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8-5-泛型类"><a href="#8-5-泛型类" class="headerlink" title="8.5 泛型类"></a>8.5 泛型类</h2><p>类，和接口一样，可以是泛型的。当一个泛型类用new实例化时，其类型参数的推断方式与函数调用的方式相同。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Box</span>&lt;<span class="title class_">Type</span>&gt; &#123;</span><br><span class="line">  <span class="attr">contents</span>: <span class="title class_">Type</span>;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">value: Type</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">contents</span> = value;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// const b: Box&lt;string&gt;</span></span><br><span class="line"><span class="keyword">const</span> b = <span class="keyword">new</span> <span class="title class_">Box</span>(<span class="string">&quot;hello!&quot;</span>);</span><br></pre></td></tr></table></figure><p>类可以像接口一样使用通用约束和默认值。</p><ul><li>静态成员中的类型参数</li></ul><p>这段代码是不合法的，可能并不明显，为什么呢？</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Box</span>&lt;<span class="title class_">Type</span>&gt; &#123;</span><br><span class="line">  <span class="comment">// 静态成员不能引用类的类型参数。</span></span><br><span class="line">  <span class="keyword">static</span> <span class="attr">defaultValue</span>: <span class="title class_">Type</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Box&lt;string&gt;.defaultValue = &#x27;hello&#x27;</span></span><br><span class="line"><span class="comment">// console.log(Box&lt;number&gt;.defaultValue)</span></span><br></pre></td></tr></table></figure><p>请记住，类型总是被完全擦除的! 在运行时，只有一个Box.defaultValue属性。这意味着设置Box<string>.defaultValue（如果有可能的话）也会改变Box<number>.defaultValue，这可不是什么好事。一个泛型类的静态成员永远不能引用该类的类型参数。</p><h2 id="8-6-类运行时中的this"><a href="#8-6-类运行时中的this" class="headerlink" title="8.6 类运行时中的this"></a>8.6 类运行时中的<code>this</code></h2><p>重要的是要记住，TypeScript并没有改变JavaScript的运行时行为，而JavaScript的运行时行为偶尔很奇特。</p><p>比如，JavaScript对这一点的处理确实是不寻常的：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line">  name = <span class="string">&quot;MyClass&quot;</span>;</span><br><span class="line">  <span class="title function_">getName</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> c = <span class="keyword">new</span> <span class="title class_">MyClass</span>();</span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;obj&quot;</span>,</span><br><span class="line">  <span class="attr">getName</span>: c.<span class="property">getName</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出 &quot;obj&quot;, 而不是 &quot;MyClass&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="title function_">getName</span>());</span><br></pre></td></tr></table></figure><p>长话短说，默认情况下，函数内this的值取决于函数的调用方式。在这个例子中，因为函数是通过obj引用调用的，所以它的this值是obj而不是类实例。</p><p>这很少是你希望发生的事情! TypeScript提供了一些方法来减轻或防止这种错误。</p><p><strong>1、箭头函数</strong></p><p>如果你有一个经常会被调用的函数，失去了它的 <code>this</code> 上下文，那么使用一个箭头函数而不是方法定义是有意义的。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line">  name = <span class="string">&quot;MyClass&quot;</span>;</span><br><span class="line">  getName = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> c = <span class="keyword">new</span> <span class="title class_">MyClass</span>();</span><br><span class="line"><span class="keyword">const</span> g = c.<span class="property">getName</span>;</span><br><span class="line"><span class="comment">// 输出 &quot;MyClass&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">g</span>());</span><br></pre></td></tr></table></figure><p>这有一些权衡：</p><ul><li><p><code>this</code> 值保证在运行时是正确的，即使是没有经过TypeScript检查的代码也是如此。</p></li><li><p>这将使用更多的内存，因为每个类实例将有它自己的副本，每个函数都是这样定义的。</p></li><li><p>你不能在派生类中使用<code>super.getName</code>，因为在原型链中没有入口可以获取基类方法。</p></li></ul><p><strong>2、<code>this</code> 参数</strong></p><p>在方法或函数定义中，一个名为<code>this</code>的初始参数在TypeScript中具有特殊的意义。这些参数在编译过程中会被删除。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 带有 &quot;this&quot; 参数的 TypeScript 输入</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"><span class="variable language_">this</span>: SomeType, x: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">  <span class="comment">/* ... */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 编译后的JavaScript结果</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">x</span>) &#123;</span><br><span class="line">  <span class="comment">/* ... */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>TypeScript检查调用带有<code>this</code>参数的函数，是否在正确的上下文中进行。我们可以不使用箭头函数，而是在方法定义中添加一个<code>this</code>参数，以静态地确保方法被正确调用。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line">  name = <span class="string">&quot;MyClass&quot;</span>;</span><br><span class="line">  <span class="title function_">getName</span>(<span class="params"><span class="variable language_">this</span>: MyClass</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> c = <span class="keyword">new</span> <span class="title class_">MyClass</span>();</span><br><span class="line"><span class="comment">// 正确</span></span><br><span class="line">c.<span class="title function_">getName</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 错误</span></span><br><span class="line"><span class="keyword">const</span> g = c.<span class="property">getName</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">g</span>());</span><br></pre></td></tr></table></figure><img src="/img/TypeScript/09-23.png" alt="image-20211210093534818" style="zoom: 67%;" /><p>这种方法做出了与箭头函数方法相反的取舍：</p><ul><li>JavaScript调用者仍然可能在不知不觉中错误地使用类方法</li><li>每个类定义只有一个函数被分配，而不是每个类实例一个函数</li><li>基类方法定义仍然可以通过 <code>super</code>调用。</li></ul><h2 id="8-7-this类型"><a href="#8-7-this类型" class="headerlink" title="8.7 this类型"></a>8.7 <code>this</code>类型</h2><p>在类中，一个叫做 <code>this</code>的特殊类型动态地指向当前类的类型。让我们来看看这有什么用：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Box</span> &#123;</span><br><span class="line">  <span class="attr">contents</span>: <span class="built_in">string</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="comment">// (method) Box.set(value: string): this</span></span><br><span class="line">  <span class="title function_">set</span>(<span class="params">value: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">contents</span> = value;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这里，TypeScript推断出 <code>set</code>的返回类型是<code>this</code>，而不是<code>Box</code>。现在让我们做一个Box的子类：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ClearableBox</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Box</span> &#123;</span><br><span class="line">  <span class="title function_">clear</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">contents</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> a = <span class="keyword">new</span> <span class="title class_">ClearableBox</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// const b: ClearableBox</span></span><br><span class="line"><span class="keyword">const</span> b = a.<span class="title function_">set</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b);</span><br></pre></td></tr></table></figure><img src="/img/TypeScript/09-24.png" alt="image-20211210095241472" style="zoom:50%;" align="left" /><p>你也可以在参数类型注释中使用 <code>this</code>：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Box</span> &#123;</span><br><span class="line">  <span class="attr">content</span>: <span class="built_in">string</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="title function_">sameAs</span>(<span class="params">other: <span class="variable language_">this</span></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> other.<span class="property">content</span> === <span class="variable language_">this</span>.<span class="property">content</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> box = <span class="keyword">new</span> <span class="title class_">Box</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(box.<span class="title function_">sameAs</span>(box));</span><br></pre></td></tr></table></figure><p>这与其他写法不同：Box，如果你有一个派生类，它的 <code>sameAs</code> 方法现在只接受该同一派生类的其他实例。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Box</span> &#123;</span><br><span class="line">  <span class="attr">content</span>: <span class="built_in">string</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="title function_">sameAs</span>(<span class="params">other: <span class="variable language_">this</span></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> other.<span class="property">content</span> === <span class="variable language_">this</span>.<span class="property">content</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DerivedBox</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Box</span> &#123;</span><br><span class="line">  <span class="attr">otherContent</span>: <span class="built_in">string</span> = <span class="string">&quot;?&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> base = <span class="keyword">new</span> <span class="title class_">Box</span>();</span><br><span class="line"><span class="keyword">const</span> derived = <span class="keyword">new</span> <span class="title class_">DerivedBox</span>();</span><br><span class="line">derived.<span class="title function_">sameAs</span>(base);</span><br></pre></td></tr></table></figure><img src="/img/TypeScript/09-25.png" alt="image-20211210102234118" style="zoom:50%;" /><h2 id="8-8-基于类型守卫的this"><a href="#8-8-基于类型守卫的this" class="headerlink" title="8.8 基于类型守卫的this"></a>8.8 基于类型守卫的<code>this</code></h2><p>你可以在类和接口的方法的返回位置使用 <code>this is Type</code> 。当与类型缩小混合时（例如if语句），目标对象的类型将被缩小到指定的Type。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">FileSystemObject</span> &#123;</span><br><span class="line">  <span class="title function_">isFile</span>(): <span class="variable language_">this</span> is <span class="title class_">FileRep</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span> <span class="keyword">instanceof</span> <span class="title class_">FileRep</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">isDirectory</span>(): <span class="variable language_">this</span> is <span class="title class_">Directory</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span> <span class="keyword">instanceof</span> <span class="title class_">Directory</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">isNetworked</span>(): <span class="variable language_">this</span> is <span class="title class_">Networked</span> &amp; <span class="variable language_">this</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">networked</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span></span><br><span class="line"><span class="params">    <span class="keyword">public</span> path: <span class="built_in">string</span>,</span></span><br><span class="line"><span class="params">    <span class="keyword">private</span> networked: <span class="built_in">boolean</span>,</span></span><br><span class="line"><span class="params">  </span>) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FileRep</span> <span class="keyword">extends</span> <span class="title class_ inherited__">FileSystemObject</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span></span><br><span class="line"><span class="params">    path: <span class="built_in">string</span>,</span></span><br><span class="line"><span class="params">    <span class="keyword">public</span> content: <span class="built_in">string</span>,</span></span><br><span class="line"><span class="params">  </span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(path, <span class="literal">false</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Directory</span> <span class="keyword">extends</span> <span class="title class_ inherited__">FileSystemObject</span> &#123;</span><br><span class="line">  <span class="attr">children</span>: <span class="title class_">FileSystemObject</span>[];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Networked</span> &#123;</span><br><span class="line">  <span class="attr">host</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">fso</span>: <span class="title class_">FileSystemObject</span> = <span class="keyword">new</span> <span class="title class_">FileRep</span>(<span class="string">&quot;foo/bar.txt&quot;</span>, <span class="string">&quot;foo&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (fso.<span class="title function_">isFile</span>()) &#123;</span><br><span class="line">  <span class="comment">// const fso: FileRep</span></span><br><span class="line">  fso.<span class="property">content</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (fso.<span class="title function_">isDirectory</span>()) &#123;</span><br><span class="line">  <span class="comment">// const fso: Directory</span></span><br><span class="line">  fso.<span class="property">children</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (fso.<span class="title function_">isNetworked</span>()) &#123;</span><br><span class="line">  <span class="comment">// const fso: Networked &amp; FileSystemObject</span></span><br><span class="line">  fso.<span class="property">host</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>基于 <code>this</code> 的类型保护的一个常见用例，是允许对一个特定字段进行懒惰验证。例如，这种情况下，当 <code>hasValue</code>被验证为真时，就会从框内持有的值中删除一个未定义值。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Box</span>&lt;T&gt; &#123;</span><br><span class="line">  value?: T;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">hasValue</span>(): <span class="variable language_">this</span> is &#123; <span class="attr">value</span>: T &#125; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">value</span> !== <span class="literal">undefined</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> box = <span class="keyword">new</span> <span class="title class_">Box</span>();</span><br><span class="line">box.<span class="property">value</span> = <span class="string">&quot;Gameboy&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// (property) Box&lt;unknown&gt;.value?: unknownbox.value;</span></span><br><span class="line"><span class="keyword">if</span> (box.<span class="title function_">hasValue</span>()) &#123;</span><br><span class="line">  <span class="comment">// (property) value: unknown</span></span><br><span class="line">  box.<span class="property">value</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8-9-参数属性"><a href="#8-9-参数属性" class="headerlink" title="8.9 参数属性"></a>8.9 参数属性</h2><p>TypeScript提供了特殊的语法，可以将构造函数参数变成具有相同名称和值的类属性。这些被称为参数属性，通过在构造函数参数前加上可见性修饰符 <code>public</code>、<code>private</code>、<code>protected</code>或<code>readonly</code>中的一个来创建。由此产生的字段会得到这些修饰符。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Params</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span></span><br><span class="line"><span class="params">    <span class="keyword">public</span> <span class="keyword">readonly</span> x: <span class="built_in">number</span>,</span></span><br><span class="line"><span class="params">    <span class="keyword">protected</span> y: <span class="built_in">number</span>,</span></span><br><span class="line"><span class="params">    <span class="keyword">private</span> z: <span class="built_in">number</span>,</span></span><br><span class="line"><span class="params">  </span>) &#123;</span><br><span class="line">    <span class="comment">// No body necessary</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> a = <span class="keyword">new</span> <span class="title class_">Params</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// (property) Params.x: number</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a.<span class="property">x</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a.<span class="property">z</span>);</span><br></pre></td></tr></table></figure><img src="/img/TypeScript/10-01.png" alt="image-20211214162348578" style="zoom: 60%;" /><h2 id="8-10-类表达式"><a href="#8-10-类表达式" class="headerlink" title="8.10 类表达式"></a>8.10 类表达式</h2><p>类表达式与类声明非常相似。唯一真正的区别是，类表达式不需要一个名字，尽管我们可以通过它们最终绑定的任何标识符来引用它们。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> someClass = <span class="keyword">class</span>&lt;<span class="title class_">Type</span>&gt; &#123;</span><br><span class="line">  <span class="attr">content</span>: <span class="title class_">Type</span>;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">value: Type</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">content</span> = value;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// const m: someClass&lt;string&gt;</span></span><br><span class="line"><span class="keyword">const</span> m = <span class="keyword">new</span> <span class="title function_">someClass</span>(<span class="string">&quot;Hello, world&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="8-11-抽象类和成员"><a href="#8-11-抽象类和成员" class="headerlink" title="8.11 抽象类和成员"></a>8.11 抽象类和成员</h2><p>TypeScript中的类、方法和字段可以是抽象的。</p><p>一个抽象的方法或抽象的字段是一个没有提供实现的方法或字段。这些成员必须存在于一个抽象类中，不能直接实例化。</p><p>抽象类的作用是作为子类的基类，实现所有的抽象成员。当一个类没有任何抽象成员时，我们就说它是具体的。</p><p>让我们看一个例子：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Base</span> &#123;</span><br><span class="line">  <span class="keyword">abstract</span> <span class="title function_">getName</span>(): <span class="built_in">string</span>;</span><br><span class="line">  <span class="title function_">printName</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hello, &quot;</span> + <span class="variable language_">this</span>.<span class="title function_">getName</span>());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> b = <span class="keyword">new</span> <span class="title class_">Base</span>();</span><br></pre></td></tr></table></figure><img src="/img/TypeScript/10-02.png" alt="image-20211219063509036" style="zoom:60%;" /><p>我们不能用 <code>new</code>来实例化<code>Base</code>，因为它是抽象的。相反，我们需要创建一个派生类并实现抽象成员。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Derived</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Base</span> &#123;</span><br><span class="line">  <span class="title function_">getName</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;world&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> d = <span class="keyword">new</span> <span class="title class_">Derived</span>();</span><br><span class="line">d.<span class="title function_">printName</span>();</span><br></pre></td></tr></table></figure><img src="/img/TypeScript/10-03.png" alt="image-20211219064030984" style="zoom:60%;" /><ul><li><strong>抽象构造签名</strong></li></ul><p>有时你想接受一些类的构造函数，产生一个从某些抽象类派生出来的类的实例。</p><p>例如，你可能想写这样的代码：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">greet</span>(<span class="params">ctor: <span class="keyword">typeof</span> Base</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> instance = <span class="keyword">new</span> <span class="title function_">ctor</span>();</span><br><span class="line">  instance.<span class="title function_">printName</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/img/TypeScript/10-04.png" alt="image-20211219064506944" style="zoom:67%;" /><p>TypeScript正确地告诉你，你正试图实例化一个抽象类。毕竟，鉴于greet的定义，写这段代码是完全合法的，它最终会构造一个抽象类。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 槽糕</span></span><br><span class="line"><span class="title function_">greet</span>(<span class="title class_">Base</span>);</span><br></pre></td></tr></table></figure><p>相反，你想写一个函数，接受具有结构化签名的东西：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">greet</span>(<span class="params">ctor: <span class="keyword">new</span> () =&gt; Base</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> instance = <span class="keyword">new</span> <span class="title function_">ctor</span>();</span><br><span class="line">  instance.<span class="title function_">printName</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">greet</span>(<span class="title class_">Derived</span>);</span><br><span class="line"><span class="title function_">greet</span>(<span class="title class_">Base</span>);</span><br></pre></td></tr></table></figure><img src="/img/TypeScript/10-05.png" alt="image-20211219065154437" style="zoom:67%;" /><p>现在TypeScript正确地告诉你哪些类的构造函数可以被调用：<code>Derived</code>可以，因为它是具体的，但<code>Base</code>不能。</p><h2 id="8-12-类之间的关系"><a href="#8-12-类之间的关系" class="headerlink" title="8.12 类之间的关系"></a>8.12 类之间的关系</h2><p>在大多数情况下，TypeScript中的类在结构上与其他类型相同，是可以比较的。</p><p>例如，这两个类可以互相替代使用，因为它们是相同的：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Point1</span> &#123;</span><br><span class="line">  x = <span class="number">0</span>;</span><br><span class="line">  y = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Point2</span> &#123;</span><br><span class="line">  x = <span class="number">0</span>;</span><br><span class="line">  y = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 正确</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">p</span>: <span class="title class_">Point1</span> = <span class="keyword">new</span> <span class="title class_">Point2</span>();</span><br></pre></td></tr></table></figure><p>同样地，即使没有明确的继承，类之间的子类型关系也是存在的：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Employee</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">salary</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 正确</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">p</span>: <span class="title class_">Person</span> = <span class="keyword">new</span> <span class="title class_">Employee</span>();</span><br></pre></td></tr></table></figure><p>这听起来很简单，但有几种情况似乎比其他情况更奇怪。</p><p>空的类没有成员。在一个结构化类型系统中，一个没有成员的类型通常是其他任何东西的超类型。所以如果你写了一个空类（不要！），任何东西都可以用来代替它。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Empty</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">x: Empty</span>) &#123;</span><br><span class="line">  <span class="comment">// 不能用&#x27;x&#x27;做任何事</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 以下调用均可</span></span><br><span class="line">!<span class="title function_">fn</span>(<span class="variable language_">window</span>);</span><br><span class="line"><span class="title function_">fn</span>(&#123;&#125;);</span><br><span class="line"><span class="title function_">fn</span>(fn);</span><br></pre></td></tr></table></figure><h3 id="特别声明-本文转自-古艺散人老师-，如有需要可前往原文预览查看。"><a href="#特别声明-本文转自-古艺散人老师-，如有需要可前往原文预览查看。" class="headerlink" title="特别声明: 本文转自  古艺散人老师 ，如有需要可前往原文预览查看。"></a>特别声明: 本文转自 <a href="https://github.com/lurongtao/TypeScript"> 古艺散人老师 </a>，如有需要可前往原文预览查看。</h3>]]></content>
      
      
      <categories>
          
          <category> TypeScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> TypeScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1-7、基础篇：类型操纵</title>
      <link href="/article/2401/"/>
      <url>/article/2401/</url>
      
        <content type="html"><![CDATA[<h1 id="七、类型操纵"><a href="#七、类型操纵" class="headerlink" title="七、类型操纵"></a>七、类型操纵</h1><h2 id="7-0-从类型中创建类型"><a href="#7-0-从类型中创建类型" class="headerlink" title="7.0 从类型中创建类型"></a>7.0 从类型中创建类型</h2><p>TypeScript的类型系统非常强大，因为它允许用其他类型的术语来表达类型。</p><p>这个想法的最简单的形式是泛型，我们实际上有各种各样的类型操作符可以使用。也可以用我们已经有的值来表达类型。</p><p>通过结合各种类型操作符，我们可以用一种简洁、可维护的方式来表达复杂的操作和值。在本节中，我们将介绍用现有的类型或值来表达一个新类型的方法。</p><ul><li><p>泛型型 - 带参数的类型</p></li><li><p>Keyof 类型操作符- <code>keyof</code> 操作符创建新类型</p></li><li><p>Typeof 类型操作符 - 使用 <code>typeof</code> 操作符来创建新的类型&#96;</p></li><li><p>索引访问类型 - 使用 <code>Type[&#39;a&#39;]</code> 语法来访问一个类型的子集</p></li><li><p>条件类型 - 在类型系统中像if语句一样行事的类型</p></li><li><p>映射类型 - 通过映射现有类型中的每个属性来创建类型</p></li><li><p>模板字面量类型 - 通过模板字面字符串改变属性的映射类型</p></li></ul><h2 id="7-1-泛型"><a href="#7-1-泛型" class="headerlink" title="7.1 泛型"></a>7.1 泛型</h2><p>软件工程的一个主要部分是建立组件，这些组件不仅有定义明确和一致的API，而且还可以重复使用。能够处理今天的数据和明天的数据的组件将为你建立大型软件系统提供最灵活的能力。</p><p>在像C#和Java这样的语言中，创建可重用组件的工具箱中的主要工具之一是泛型，也就是说，能够创建一个在各种类型上工作的组件，而不是单一的类型。这使得用户可以消费这些组件并使用他们自己的类型。</p><h3 id="7-1-1-Hello-World"><a href="#7-1-1-Hello-World" class="headerlink" title="7.1.1 Hello World"></a>7.1.1 Hello World</h3><p>首先，让我们做一下泛型的 “ hello world”：身份函数。身份函数是一个函数，它将返回传入的任何内容。你可以用类似于echo命令的方式来考虑它。</p><p>如果没有泛型，我们将不得不给身份函数一个特定的类型。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">identity</span>(<span class="params">arg: <span class="built_in">number</span></span>): <span class="built_in">number</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或者，我们可以用任意类型来描述身份函数。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">identity</span>(<span class="params">arg: <span class="built_in">any</span></span>): <span class="built_in">any</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 <code>any</code> 当然是通用的，因为它将使函数接受 <code>arg</code>类型的任何和所有的类型，但实际上我们在函数返回时失去了关于该类型的信息。如果我们传入一个数字，我们唯一的信息就是任何类型都可以被返回。</p><p>相反，我们需要一种方法来捕获参数的类型，以便我们也可以用它来表示返回的内容。在这里，我们将使用一个类型变量，这是一种特殊的变量，对类型而不是数值起作用。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> identity&lt;<span class="title class_">Type</span>&gt;(<span class="attr">arg</span>: <span class="title class_">Type</span>): <span class="title class_">Type</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们现在已经在身份函数中添加了一个类型变量 <code>Type</code>。这个 <code>Type</code> 允许我们捕获用户提供的类型（例如数字），这样我们就可以在以后使用这些信息。这里，我们再次使用Type作为返回类型。经过检查，我们现在可以看到参数和返回类型使用的是相同的类型。这使得我们可以将类型信息从函数的一侧输入，然后从另一侧输出。</p><p>我们说这个版本的身份函数是通用的，因为它在一系列的类型上工作。与使用任何类型不同的是，它也和第一个使用数字作为参数和返回类型的身份函数一样精确（即，它不会丢失任何信息）。</p><p>一旦我们写好了通用身份函数，我们就可以用两种方式之一来调用它。第一种方式是将所有的参数，包括类型参数，都传递给函数：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> output = identity&lt;<span class="built_in">string</span>&gt;(<span class="string">&quot;myString&quot;</span>);</span><br></pre></td></tr></table></figure><p>这里我们明确地将 <code>Type</code> 设置为<code>string</code>，作为函数调用的参数之一，用参数周围的 <code>&lt;&gt;</code> 而不是 <code>()</code> 来表示。</p><p>第二种方式可能也是最常见的。这里我们使用类型参数推理——也就是说，我们希望编译器根据我们传入的参数的类型，自动为我们设置 <code>Type</code> 的值。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> output = <span class="title function_">identity</span>(<span class="string">&quot;myString&quot;</span>);</span><br></pre></td></tr></table></figure><p>注意，我们不必在角括号（&lt;&gt;）中明确地传递类型；编译器只是查看了 “myString “这个值，并将Type设置为其类型。虽然类型参数推断是一个有用的工具，可以使代码更短、更易读，但当编译器不能推断出类型时，你可能需要像我们在前面的例子中那样明确地传入类型参数，这在更复杂的例子中可能发生。</p><h3 id="7-1-2-使用通用类型变量"><a href="#7-1-2-使用通用类型变量" class="headerlink" title="7.1.2 使用通用类型变量"></a>7.1.2 使用通用类型变量</h3><p>当你开始使用泛型时，你会注意到，当你创建像<code>identity</code>这样的泛型函数时，编译器会强制要求你在函数主体中正确使用任何泛型参数。也就是说，你实际上是把这些参数当作是任何和所有的类型。</p><p>让我们来看看我们前面的 <code>identity</code> 函数。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> identity&lt;<span class="title class_">Type</span>&gt;(<span class="attr">arg</span>: <span class="title class_">Type</span>): <span class="title class_">Type</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果我们想在每次调用时将参数 <code>arg</code> 的长度记录到控制台，该怎么办？我们可能很想这样写：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> loggingIdentity&lt;<span class="title class_">Type</span>&gt;(<span class="attr">arg</span>: <span class="title class_">Type</span>): <span class="title class_">Type</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(arg.<span class="property">length</span>);</span><br><span class="line">  <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://s2.loli.net/2022/02/22/dqsOFKoSHTPJBMv.png" alt="image-20211127215153933" style="zoom:50%;" /><p>当我们这样做时，编译器会给我们一个错误，说我们在使用 <code>arg</code> 的 <code>.length</code> 成员，但我们没有说 <code>arg</code> 有这个成员。记住，我们在前面说过，这些类型的变量可以代表任何和所有的类型，所以使用这个函数的人可以传入一个<code>number</code> ，而这个数字没有一个 <code>.length</code> 成员。</p><p>比方说，我们实际上是想让这个函数在 <code>Type</code> 的数组上工作，而不是直接在 <code>Type</code>上工作。既然我们在处理数组，那么<code>.length</code>成员应该是可用的。我们可以像创建其他类型的数组那样来描述它。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> loggingIdentity&lt;<span class="title class_">Type</span>&gt;(<span class="attr">arg</span>: <span class="title class_">Type</span>[]): <span class="title class_">Type</span>[] &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(arg.<span class="property">length</span>);</span><br><span class="line">  <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>你可以把 <code>loggingIdentity</code> 的类型理解为 “通用函数 <code>loggingIdentity</code> 接收一个类型参数 <code>Type</code> 和一个参数 <code>arg</code>，<code>arg</code>是一个<code>Type</code>数组，并返回一个<code>Type</code>数组。” 如果我们传入一个数字数组，我们会得到一个数字数组，因为Type会绑定到数字。这允许我们使用我们的通用类型变量 <code>Type</code> 作为我们正在处理的类型的一部分，而不是整个类型，给我们更大的灵活性。</p><p>我们也可以这样来写这个例子：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> loggingIdentity&lt;<span class="title class_">Type</span>&gt;(<span class="attr">arg</span>: <span class="title class_">Array</span>&lt;<span class="title class_">Type</span>&gt;): <span class="title class_">Array</span>&lt;<span class="title class_">Type</span>&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(arg.<span class="property">length</span>); <span class="comment">// 数组有一个.length，所以不会再出错了</span></span><br><span class="line">  <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>你可能已经从其他语言中熟悉了这种类型的风格。在下一节中，我们将介绍如何创建你自己的通用类型，如<code>Array&lt;Type&gt;</code>。</p><h3 id="7-1-3-泛型类型"><a href="#7-1-3-泛型类型" class="headerlink" title="7.1.3 泛型类型"></a>7.1.3 泛型类型</h3><p>在前几节中，我们创建了在一系列类型上工作的通用身份函数。在这一节中，我们将探讨函数本身的类型以及如何创建通用接口。</p><p>泛型函数的类型与非泛型函数的类型一样，类型参数列在前面，与函数声明类似：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> identity&lt;<span class="title class_">Type</span>&gt;(<span class="attr">arg</span>: <span class="title class_">Type</span>): <span class="title class_">Type</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">myIdentity</span>: &lt;<span class="title class_">Type</span>&gt;<span class="function">(<span class="params">arg: Type</span>) =&gt;</span> <span class="title class_">Type</span> = identity;</span><br></pre></td></tr></table></figure><p>我们也可以为类型中的通用类型参数使用一个不同的名字，只要类型变量的数量和类型变量的使用方式一致。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> identity&lt;<span class="title class_">Type</span>&gt;(<span class="attr">arg</span>: <span class="title class_">Type</span>): <span class="title class_">Type</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">myIdentity</span>: &lt;<span class="title class_">Input</span>&gt;<span class="function">(<span class="params">arg: Input</span>) =&gt;</span> <span class="title class_">Input</span> = identity;</span><br></pre></td></tr></table></figure><p>我们也可以把泛型写成一个对象字面类型的调用签名。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> identity&lt;<span class="title class_">Type</span>&gt;(<span class="attr">arg</span>: <span class="title class_">Type</span>): <span class="title class_">Type</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">myIdentity</span>: &#123; &lt;<span class="title class_">Type</span>&gt;(<span class="attr">arg</span>: <span class="title class_">Type</span>): <span class="title class_">Type</span> &#125; = identity;</span><br></pre></td></tr></table></figure><p>这让我们开始编写我们的第一个泛型接口。让我们把前面例子中的对象字面意思移到一个接口中。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">GenericIdentityFn</span> &#123;</span><br><span class="line">  &lt;<span class="title class_">Type</span>&gt;(<span class="attr">arg</span>: <span class="title class_">Type</span>): <span class="title class_">Type</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> identity&lt;<span class="title class_">Type</span>&gt;(<span class="attr">arg</span>: <span class="title class_">Type</span>): <span class="title class_">Type</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">myIdentity</span>: <span class="title class_">GenericIdentityFn</span> = identity;</span><br></pre></td></tr></table></figure><p>在一个类似的例子中，我们可能想把通用参数移到整个接口的参数上。这可以让我们看到我们的泛型是什么类型（例如，<code>Dictionary&lt;string&gt;</code>而不是仅仅<code>Dictionary</code>）。这使得类型参数对接口的所有其他成员可见。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">GenericIdentityFn</span>&lt;<span class="title class_">Type</span>&gt; &#123;</span><br><span class="line">  (<span class="attr">arg</span>: <span class="title class_">Type</span>): <span class="title class_">Type</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> identity&lt;<span class="title class_">Type</span>&gt;(<span class="attr">arg</span>: <span class="title class_">Type</span>): <span class="title class_">Type</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">myIdentity</span>: <span class="title class_">GenericIdentityFn</span>&lt;<span class="built_in">number</span>&gt; = identity;</span><br></pre></td></tr></table></figure><p>请注意，我们的例子已经改变了，变成了稍微不同的东西。我们现在没有描述一个泛型函数，而是有一个非泛型的函数签名，它是泛型类型的一部分。当我们使用 <code>GenericIdentityFn</code> 时，我们现在还需要指定相应的类型参数（这里是：数字），有效地锁定了底层调用签名将使用什么。了解什么时候把类型参数直接放在调用签名上，什么时候把它放在接口本身，将有助于描述一个类型的哪些方面是通用的。</p><p>除了泛型接口之外，我们还可以创建泛型类。注意，不可能创建泛型枚举和命名空间。</p><h3 id="7-1-4-泛型类"><a href="#7-1-4-泛型类" class="headerlink" title="7.1.4 泛型类"></a>7.1.4 泛型类</h3><p>一个泛型类的形状与泛型接口相似。泛型类在类的名字后面有一个角括号（&lt;&gt;）中的泛型参数列表。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">GenericNumber</span>&lt;<span class="title class_">NumType</span>&gt; &#123;</span><br><span class="line">  <span class="attr">zeroValue</span>: <span class="title class_">NumType</span>;</span><br><span class="line">  <span class="attr">add</span>: <span class="function">(<span class="params">x: NumType, y: NumType</span>) =&gt;</span> <span class="title class_">NumType</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myGenericNumber = <span class="keyword">new</span> <span class="title class_">GenericNumber</span>&lt;<span class="built_in">number</span>&gt;();</span><br><span class="line">myGenericNumber.<span class="property">zeroValue</span> = <span class="number">0</span>;</span><br><span class="line">myGenericNumber.<span class="property">add</span> = <span class="keyword">function</span> (<span class="params">x, y</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这是对<code>GenericNumber</code>类相当直白的使用，但你可能已经注意到，没有任何东西限制它只能使用数字类型。我们本可以使用字符串或更复杂的对象。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> stringNumeric = <span class="keyword">new</span> <span class="title class_">GenericNumber</span>&lt;<span class="built_in">string</span>&gt;();</span><br><span class="line">stringNumeric.<span class="property">zeroValue</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">stringNumeric.<span class="property">add</span> = <span class="keyword">function</span> (<span class="params">x, y</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(stringNumeric.<span class="title function_">add</span>(stringNumeric.<span class="property">zeroValue</span>, <span class="string">&quot;test&quot;</span>));</span><br></pre></td></tr></table></figure><p>就像接口一样，把类型参数放在类本身，可以让我们确保类的所有属性都与相同的类型一起工作。</p><p>正如我们在关于类的章节中提到的，一个类的类型有两个方面：静态方面和实例方面。通用类只在其实例侧而非静态侧具有通用性，所以在使用类时，静态成员不能使用类的类型参数。</p><h3 id="7-1-5-泛型约束"><a href="#7-1-5-泛型约束" class="headerlink" title="7.1.5 泛型约束"></a>7.1.5 泛型约束</h3><p>如果你还记得前面的例子，你有时可能想写一个通用函数，在一组类型上工作，而你对这组类型会有什么能力有一定的了解。在我们的 <code>loggingIdentity</code> 例子中，我们希望能够访问 <code>arg.length</code> 属性，但是编译器无法证明每个类型都有一个 <code>.length</code> 属性，所以它警告我们不能做这个假设。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> loggingIdentity&lt;<span class="title class_">Type</span>&gt;(<span class="attr">arg</span>: <span class="title class_">Type</span>): <span class="title class_">Type</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(arg.<span class="property">length</span>);</span><br><span class="line">  <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://s2.loli.net/2022/02/22/gS8VUxOYPyER62K.png" alt="image-20211128095950588" style="zoom:50%;" /><p>我们希望限制这个函数与 <code>any</code> 和所有类型一起工作，而不是与 <code>any</code> 和所有同时具有 <code>.length</code> 属性的类型一起工作。只要这个类型有这个成员，我们就允许它，但它必须至少有这个成员。要做到这一点，我们必须把我们的要求作为一个约束条件列在 <code>Type</code> 可以是什么。</p><p>为了做到这一点，我们将创建一个接口来描述我们的约束。在这里，我们将创建一个接口，它有一个单一的 <code>.length</code> 属性，然后我们将使用这个接和 <code>extends</code> 关键字来表示我们的约束条件。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Lengthwise</span> &#123;</span><br><span class="line">  <span class="attr">length</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> loggingIdentity&lt;<span class="title class_">Type</span> <span class="keyword">extends</span> <span class="title class_">Lengthwise</span>&gt;(<span class="attr">arg</span>: <span class="title class_">Type</span>): <span class="title class_">Type</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(arg.<span class="property">length</span>); <span class="comment">// 现在我们知道它有一个 .length 属性，所以不再有错误了</span></span><br><span class="line">  <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为泛型函数现在被限制了，它将不再对 <code>any</code> 和 所有的类型起作用。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">loggingIdentity(3);</span><br></pre></td></tr></table></figure><img src="/img/TypeScript/07-03.png" alt="image-20211128102358263" style="zoom:50%;" /><p>相反，我们需要传入其类型具有所有所需属性的值。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="title function_">loggingIdentity</span>(&#123; <span class="attr">length</span>: <span class="number">10</span>, <span class="attr">value</span>: <span class="number">3</span> &#125;);</span><br></pre></td></tr></table></figure><h3 id="7-1-6-在泛型约束中使用类型参数"><a href="#7-1-6-在泛型约束中使用类型参数" class="headerlink" title="7.1.6 在泛型约束中使用类型参数"></a>7.1.6 在泛型约束中使用类型参数</h3><p>你可以声明一个受另一个类型参数约束的类型参数。例如，在这里我们想从一个给定名称的对象中获取一个属性。我们想确保我们不会意外地获取一个不存在于 <code>obj</code> 上的属性，所以我们要在这两种类型之间放置一个约束条件。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> getProperty&lt;<span class="title class_">Type</span>, <span class="title class_">Key</span> <span class="keyword">extends</span> keyof <span class="title class_">Type</span>&gt;(<span class="attr">obj</span>: <span class="title class_">Type</span>, <span class="attr">key</span>: <span class="title class_">Key</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> obj[key];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> x = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span>, <span class="attr">d</span>: <span class="number">4</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="title function_">getProperty</span>(x, <span class="string">&quot;a&quot;</span>);</span><br><span class="line"><span class="title function_">getProperty</span>(x, <span class="string">&quot;m&quot;</span>);</span><br></pre></td></tr></table></figure><img src="https://s2.loli.net/2022/02/22/MrLOcvzYgSbophf.png" alt="image-20211128103719103" style="zoom:50%;" /><h3 id="7-1-7-在泛型中使用类类型"><a href="#7-1-7-在泛型中使用类类型" class="headerlink" title="7.1.7 在泛型中使用类类型"></a>7.1.7 在泛型中使用类类型</h3><p>在TypeScript中使用泛型创建工厂时，有必要通过其构造函数来引用类的类型。比如说：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> create&lt;<span class="title class_">Type</span>&gt;(<span class="attr">c</span>: &#123; <span class="keyword">new</span> (): <span class="title class_">Type</span> &#125;): <span class="title class_">Type</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title function_">c</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一个更高级的例子，使用原型属性来推断和约束类类型的构造函数和实例方之间的关系。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">BeeKeeper</span> &#123;</span><br><span class="line">  <span class="attr">hasMask</span>: <span class="built_in">boolean</span> = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ZooKeeper</span> &#123;</span><br><span class="line">  <span class="attr">nametag</span>: <span class="built_in">string</span> = <span class="string">&quot;Mikle&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">  <span class="attr">numLegs</span>: <span class="built_in">number</span> = <span class="number">4</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Bee</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Animal</span> &#123;</span><br><span class="line">  <span class="attr">keeper</span>: <span class="title class_">BeeKeeper</span> = <span class="keyword">new</span> <span class="title class_">BeeKeeper</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Lion</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Animal</span> &#123;</span><br><span class="line">  <span class="attr">keeper</span>: <span class="title class_">ZooKeeper</span> = <span class="keyword">new</span> <span class="title class_">ZooKeeper</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> createInstance&lt;A <span class="keyword">extends</span> <span class="title class_">Animal</span>&gt;(<span class="attr">c</span>: <span class="keyword">new</span> () =&gt; A): A &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title function_">c</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">createInstance</span>(<span class="title class_">Lion</span>).<span class="property">keeper</span>.<span class="property">nametag</span>;</span><br><span class="line"><span class="title function_">createInstance</span>(<span class="title class_">Bee</span>).<span class="property">keeper</span>.<span class="property">hasMask</span>;</span><br></pre></td></tr></table></figure><h2 id="7-2-Keyof类型操作符"><a href="#7-2-Keyof类型操作符" class="headerlink" title="7.2 Keyof类型操作符"></a>7.2 <code>Keyof</code>类型操作符</h2><p><code>keyof</code>运算符接收一个对象类型，并产生其键的字符串或数字字面联合。下面的类型P与 “x”|”y “是同一类型。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Point</span> = &#123; <span class="attr">x</span>: <span class="built_in">number</span>; <span class="attr">y</span>: <span class="built_in">number</span> &#125;;</span><br><span class="line"><span class="keyword">type</span> P = keyof <span class="title class_">Point</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">p1</span>: P = <span class="string">&quot;x&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">p2</span>: P = <span class="string">&quot;y&quot;</span>;</span><br></pre></td></tr></table></figure><p>如果该类型有一个字符串或数字索引签名，<code>keyof</code> 将返回这些类型。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Arrayish</span> = &#123; [<span class="attr">n</span>: <span class="built_in">number</span>]: <span class="built_in">unknown</span> &#125;;</span><br><span class="line"><span class="keyword">type</span> A = keyof <span class="title class_">Arrayish</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">a</span>: A = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Mapish</span> = &#123; [<span class="attr">k</span>: <span class="built_in">string</span>]: <span class="built_in">boolean</span> &#125;;</span><br><span class="line"><span class="keyword">type</span> M = keyof <span class="title class_">Mapish</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">m</span>: M = <span class="string">&quot;a&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">m2</span>: M = <span class="number">10</span>;</span><br></pre></td></tr></table></figure><p>注意，在这个例子中，<code>M</code>是 <code>string|number</code>——这是因为JavaScript对象的键总是被强制为字符串，所以 <code>obj[0]</code>总是与<code>obj[&quot;0&quot;]</code>相同。</p><p><code>keyof</code>类型在与映射类型结合时变得特别有用，我们将在后面进一步了解。</p><h2 id="7-3-Typeof-类型操作符"><a href="#7-3-Typeof-类型操作符" class="headerlink" title="7.3 Typeof 类型操作符"></a>7.3 <code>Typeof</code> 类型操作符</h2><p>JavaScript已经有一个 <code>typeof</code> 操作符，你可以在表达式上下文中使用。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 输出 &quot;string&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="string">&quot;Hello world&quot;</span>);</span><br></pre></td></tr></table></figure><p>TypeScript添加了一个<code>typeof</code>操作符，你可以在类型上下文中使用它来引用一个变量或属性的类型。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> s = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">n</span>: <span class="keyword">typeof</span> s;</span><br><span class="line">n = <span class="string">&quot;world&quot;</span>;</span><br><span class="line">n = <span class="number">100</span>;</span><br></pre></td></tr></table></figure><img src="/img/TypeScript/07-05.png" alt="image-20211128110305093" style="zoom:50%;" /><p>这对基本类型来说不是很有用，但结合其他类型操作符，你可以使用typeof来方便地表达许多模式。举一个例子，让我们先看看预定义的类型<code>ReturnType&lt;T&gt;</code>。它接收一个函数类型并产生其返回类型：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Predicate</span> = <span class="function">(<span class="params">x: <span class="built_in">unknown</span></span>) =&gt;</span> <span class="built_in">boolean</span>;</span><br><span class="line"><span class="keyword">type</span> K = <span class="title class_">ReturnType</span>&lt;<span class="title class_">Predicate</span>&gt;;</span><br></pre></td></tr></table></figure><p>如果我们试图在一个函数名上使用 <code>ReturnType</code>，我们会看到一个指示性的错误。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123; <span class="attr">x</span>: <span class="number">10</span>, <span class="attr">y</span>: <span class="number">3</span> &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> P = <span class="title class_">ReturnType</span>&lt;f&gt;;</span><br></pre></td></tr></table></figure><img src="https://s2.loli.net/2022/02/22/foM6iTw7GecalgD.png" alt="image-20211128111022283" style="zoom:50%;" /><p>请记住，值和类型并不是一回事。为了指代值f的类型，我们使用 <code>typeof</code>。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123; <span class="attr">x</span>: <span class="number">10</span>, <span class="attr">y</span>: <span class="number">3</span> &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> P = <span class="title class_">ReturnType</span>&lt;<span class="keyword">typeof</span> f&gt;;</span><br></pre></td></tr></table></figure><p>TypeScript 故意限制了你可以使用 typeof 的表达式种类。</p><p>具体来说，只有在标识符（即变量名）或其属性上使用typeof是合法的。这有助于避免混乱的陷阱，即编写你认为是在执行的代码，但其实不是。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 我们认为使用 = ReturnType&lt;typeof msgbox&gt;</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">shouldContinue</span>: <span class="keyword">typeof</span> <span class="title function_">msgbox</span>(<span class="string">&quot;Are you sure you want to continue?&quot;</span>);</span><br></pre></td></tr></table></figure><img src="https://s2.loli.net/2022/02/22/AUnW94tZuiI2fLw.png" alt="image-20211128111627727" style="zoom:50%;" /><h2 id="7-4-索引访问类型"><a href="#7-4-索引访问类型" class="headerlink" title="7.4 索引访问类型"></a>7.4 索引访问类型</h2><p>我们可以使用一个索引访问类型来查询另一个类型上的特定属性：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Person</span> = &#123; <span class="attr">age</span>: <span class="built_in">number</span>; <span class="attr">name</span>: <span class="built_in">string</span>; <span class="attr">alive</span>: <span class="built_in">boolean</span> &#125;;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Age</span> = <span class="title class_">Person</span>[<span class="string">&quot;age&quot;</span>];</span><br></pre></td></tr></table></figure><img src="https://s2.loli.net/2022/02/22/vdRnGwYBI6r4Elx.png" alt="image-20211128114411725" style="zoom:50%;" /><p>索引类型本身就是一个类型，所以我们可以完全使用 unions、<code>keyof</code> 或者其他类型。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">alive</span>: <span class="built_in">boolean</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// type I1 = string | number</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">I1</span> = <span class="title class_">Person</span>[<span class="string">&quot;age&quot;</span> | <span class="string">&quot;name&quot;</span>];</span><br><span class="line"><span class="keyword">const</span> <span class="attr">i11</span>: <span class="variable constant_">I1</span> = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">i12</span>: <span class="variable constant_">I1</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// type I2 = string | number | boolean</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">I2</span> = <span class="title class_">Person</span>[keyof <span class="title class_">Person</span>];</span><br><span class="line"><span class="keyword">const</span> <span class="attr">i21</span>: <span class="variable constant_">I2</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">i22</span>: <span class="variable constant_">I2</span> = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">i23</span>: <span class="variable constant_">I2</span> = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// type I3 = Person[AliveOrName];</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">AliveOrName</span> = <span class="string">&quot;alive&quot;</span> | <span class="string">&quot;name&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">aon1</span>: <span class="title class_">AliveOrName</span> = <span class="string">&quot;alive&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">aon2</span>: <span class="title class_">AliveOrName</span> = <span class="string">&quot;name&quot;</span>;</span><br></pre></td></tr></table></figure><p>如果你试图索引一个不存在的属性，你甚至会看到一个错误：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="variable constant_">I1</span> = <span class="title class_">Person</span>[<span class="string">&quot;alve&quot;</span>];</span><br></pre></td></tr></table></figure><img src="https://s2.loli.net/2022/02/22/aKBPU27y5pJLQz3.png" alt="image-20211128115726772" style="zoom:50%;" /><p>另一个使用任意类型进行索引的例子是使用<code>number</code>来获取一个数组元素的类型。我们可以把它和 <code>typeof</code>结合起来，方便地获取一个数组字面的元素类型。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">MyArray</span> = [</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&quot;Alice&quot;</span>, <span class="attr">age</span>: <span class="number">15</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&quot;Bob&quot;</span>, <span class="attr">age</span>: <span class="number">23</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&quot;Eve&quot;</span>, <span class="attr">age</span>: <span class="number">38</span> &#125;,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment">/* type Person = &#123;</span></span><br><span class="line"><span class="comment">    name: string;</span></span><br><span class="line"><span class="comment">    age: number;</span></span><br><span class="line"><span class="comment">&#125; */</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Person</span> = (<span class="keyword">typeof</span> <span class="title class_">MyArray</span>)[<span class="built_in">number</span>];</span><br><span class="line"><span class="keyword">const</span> <span class="attr">p</span>: <span class="title class_">Person</span> = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;xiaoqian&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">11</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// type Age = number</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Age</span> = (<span class="keyword">typeof</span> <span class="title class_">MyArray</span>)[<span class="built_in">number</span>][<span class="string">&quot;age&quot;</span>];</span><br><span class="line"><span class="keyword">const</span> <span class="attr">age</span>: <span class="title class_">Age</span> = <span class="number">11</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line"><span class="comment">// type Age2 = number</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Age2</span> = <span class="title class_">Person</span>[<span class="string">&quot;age&quot;</span>];</span><br><span class="line"><span class="keyword">const</span> <span class="attr">age2</span>: <span class="title class_">Age2</span> = <span class="number">11</span>;</span><br></pre></td></tr></table></figure><p>你只能在索引时使用类型，这意味着你不能使用<code>const</code>来做一个变量引用：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> key = <span class="string">&quot;age&quot;</span>;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Age</span> = <span class="title class_">Person</span>[key];</span><br></pre></td></tr></table></figure><img src="/img/TypeScript/08-03.png" alt="image-20211128122324127" style="zoom:60%;" /><p>然而，你可以使用类型别名来实现类似的重构风格：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> key = <span class="string">&quot;age&quot;</span>;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Age</span> = <span class="title class_">Person</span>[key];</span><br></pre></td></tr></table></figure><h2 id="7-5-条件类型"><a href="#7-5-条件类型" class="headerlink" title="7.5 条件类型"></a>7.5 条件类型</h2><p>在大多数有用的程序的核心，我们必须根据输入来做决定。JavaScript程序也不例外，但鉴于数值可以很容易地被内省，这些决定也是基于输入的类型。条件类型有助于描述输入和输出的类型之间的关系。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">  <span class="title function_">live</span>(): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">  <span class="title function_">woof</span>(): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// type Example1 = number</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Example1</span> = <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> ? <span class="built_in">number</span> : <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// type Example2 = string</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Example2</span> = <span class="title class_">RegExp</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> ? <span class="built_in">number</span> : <span class="built_in">string</span>;</span><br></pre></td></tr></table></figure><p>条件类型的形式看起来有点像JavaScript中的条件表达式（<code>condition ? trueExpression : falseExpression</code>）。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="title class_">SomeType</span> <span class="keyword">extends</span> <span class="title class_">OtherType</span> ? <span class="title class_">TrueType</span> : <span class="title class_">FalseType</span>;</span><br></pre></td></tr></table></figure><p>当 <code>extends</code> 左边的类型可以赋值给右边的类型时，那么你将得到第一个分支中的类型（”真 “分支）；否则你将得到后一个分支中的类型（”假 “分支）。</p><p>从上面的例子来看，条件类型可能并不立即显得有用——我们可以告诉自己是否 <code>Dog extends Animal</code>，并选择 <code>number</code>或<code>string</code>！但条件类型的威力来自于它所带来的好处。条件类型的力量来自于将它们与泛型一起使用。</p><p>例如，让我们来看看下面这个 <code>createLabel</code> 函数：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">IdLabel</span> &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="built_in">number</span> <span class="comment">/* 一些字段 */</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">NameLabel</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span> <span class="comment">/* 另一些字段 */</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createLabel</span>(<span class="params">id: <span class="built_in">number</span></span>): <span class="title class_">IdLabel</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createLabel</span>(<span class="params">name: <span class="built_in">string</span></span>): <span class="title class_">NameLabel</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createLabel</span>(<span class="params">nameOrId: <span class="built_in">string</span> | <span class="built_in">number</span></span>): <span class="title class_">IdLabel</span> | <span class="title class_">NameLabel</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createLabel</span>(<span class="params">nameOrId: <span class="built_in">string</span> | <span class="built_in">number</span></span>): <span class="title class_">IdLabel</span> | <span class="title class_">NameLabel</span> &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="string">&quot;unimplemented&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>createLabel</code>的这些重载描述了一个单一的JavaScript函数，该函数根据其输入的类型做出选择。注意一些事情：</p><ul><li>如果一个库必须在其API中反复做出同样的选择，这就会变得很麻烦。</li><li>我们必须创建三个重载：一个用于确定类型的情况（一个用于 <code>string</code>，一个用于 <code>number</code>），一个用于最一般的情况（取一个 <code>string</code>| <code>number</code>）。对于 <code>createLabel</code>所能处理的每一种新类型，重载的数量都会呈指数级增长。</li></ul><p>相反，我们可以在一个条件类型中对该逻辑进行编码：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">NameOrId</span>&lt;T <span class="keyword">extends</span> <span class="built_in">number</span> | <span class="built_in">string</span>&gt; = T <span class="keyword">extends</span> <span class="built_in">number</span></span><br><span class="line">  ? <span class="title class_">IdLabel</span></span><br><span class="line">  : <span class="title class_">NameLabel</span>;</span><br></pre></td></tr></table></figure><p>然后我们可以使用该条件类型，将我们的重载简化为一个没有重载的单一函数。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">IdLabel</span> &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="built_in">number</span> <span class="comment">/* some fields */</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">NameLabel</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span> <span class="comment">/* other fields */</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">NameOrId</span>&lt;T <span class="keyword">extends</span> <span class="built_in">number</span> | <span class="built_in">string</span>&gt; = T <span class="keyword">extends</span> <span class="built_in">number</span></span><br><span class="line">  ? <span class="title class_">IdLabel</span></span><br><span class="line">  : <span class="title class_">NameLabel</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> createLabel&lt;T <span class="keyword">extends</span> <span class="built_in">number</span> | <span class="built_in">string</span>&gt;(<span class="attr">idOrName</span>: T): <span class="title class_">NameOrId</span>&lt;T&gt; &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="string">&quot;unimplemented&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// let a: NameLabel</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="title function_">createLabel</span>(<span class="string">&quot;typescript&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// let b: IdLabel</span></span><br><span class="line"><span class="keyword">let</span> b = <span class="title function_">createLabel</span>(<span class="number">2.8</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// let c: NameLabel | IdLabel</span></span><br><span class="line"><span class="keyword">let</span> c = <span class="title function_">createLabel</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() ? <span class="string">&quot;hello&quot;</span> : <span class="number">42</span>);</span><br></pre></td></tr></table></figure><h3 id="7-5-1-条件类型约束"><a href="#7-5-1-条件类型约束" class="headerlink" title="7.5.1 条件类型约束"></a>7.5.1 条件类型约束</h3><p>通常，条件类型中的检查会给我们提供一些新的信息。就像用类型守卫缩小范围可以给我们一个更具体的类型一样，条件类型的真正分支将通过我们检查的类型进一步约束泛型。</p><p>例如，让我们来看看下面的例子：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">MessageOf</span>&lt;T&gt; = T[<span class="string">&quot;message&quot;</span>];</span><br></pre></td></tr></table></figure><img src="https://s2.loli.net/2022/02/22/GEXfr1zpLO2ghPw.png" alt="image-20211129092739341" style="zoom:50%;" /><p>在这个例子中，TypeScript出错是因为 <code>T</code> 不知道有一个叫做 <code>message</code> 的属性。我们可以对 <code>T</code> 进行约束，TypeScript就不会再抱怨。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">MessageOf</span>&lt;T <span class="keyword">extends</span> &#123; <span class="attr">message</span>: <span class="built_in">unknown</span> &#125;&gt; = T[<span class="string">&quot;message&quot;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Email</span> &#123;</span><br><span class="line">  <span class="attr">message</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">EmailMessageContents</span> = <span class="title class_">MessageOf</span>&lt;<span class="title class_">Email</span>&gt;;</span><br></pre></td></tr></table></figure><p>然而，如果我们想让 <code>MessageOf</code> 接受任何类型，并在消息属性不可用的情况下，默认为 <code>never</code>类型呢？我们可以通过将约束条件移出，并引入一个条件类型来做到这一点。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">MessageOf</span>&lt;T&gt; = T <span class="keyword">extends</span> &#123; <span class="attr">message</span>: <span class="built_in">unknown</span> &#125; ? T[<span class="string">&quot;message&quot;</span>] : <span class="built_in">never</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Email</span> &#123;</span><br><span class="line">  <span class="attr">message</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Dog</span> &#123;</span><br><span class="line">  <span class="title function_">bark</span>(): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// type EmailMessageContents = string</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">EmailMessageContents</span> = <span class="title class_">MessageOf</span>&lt;<span class="title class_">Email</span>&gt;;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">emc</span>: <span class="title class_">EmailMessageContents</span> = <span class="string">&quot;balabala...&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// type DogMessageContents = never</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">DogMessageContents</span> = <span class="title class_">MessageOf</span>&lt;<span class="title class_">Dog</span>&gt;;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">dmc</span>: <span class="title class_">DogMessageContents</span> = <span class="string">&quot;error&quot;</span> <span class="keyword">as</span> <span class="built_in">never</span>;</span><br></pre></td></tr></table></figure><p>在真正的分支中，TypeScript知道 <code>T</code>会有一个消息属性。</p><p>作为另一个例子，我们也可以写一个叫做 <code>Flatten</code> 的类型，将数组类型平铺到它们的元素类型上，但在其他方面则不做处理。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Flatten</span>&lt;T&gt; = T <span class="keyword">extends</span> <span class="built_in">any</span>[] ? T[<span class="built_in">number</span>] : T;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 提取出元素类型。</span></span><br><span class="line"><span class="comment">// type Str = string</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Str</span> = <span class="title class_">Flatten</span>&lt;<span class="built_in">string</span>[]&gt;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 单独一个类型。</span></span><br><span class="line"><span class="comment">// type Num = number</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Num</span> = <span class="title class_">Flatten</span>&lt;<span class="built_in">number</span>&gt;;</span><br></pre></td></tr></table></figure><p>当 <code>Flatten</code> 被赋予一个数组类型时，它使用一个带有数字的索引访问来获取 <code>string[]</code> 的元素类型。否则，它只是返回它被赋予的类型。</p><h3 id="7-5-2-在条件类型内进行推理"><a href="#7-5-2-在条件类型内进行推理" class="headerlink" title="7.5.2 在条件类型内进行推理"></a>7.5.2 在条件类型内进行推理</h3><p>我们只是发现自己使用条件类型来应用约束条件，然后提取出类型。这最终成为一种常见的操作，而条件类型使它变得更容易。</p><p>条件类型为我们提供了一种方法来推断我们在真实分支中使用 <code>infer</code> 关键字进行对比的类型。例如，我们可以在<code>Flatten</code> 中推断出元素类型，而不是用索引访问类型 “手动 “提取出来。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Flatten</span>&lt;<span class="title class_">Type</span>&gt; = <span class="title class_">Type</span> <span class="keyword">extends</span> <span class="title class_">Array</span>&lt;infer <span class="title class_">Item</span>&gt; ? <span class="title class_">Item</span> : <span class="title class_">Type</span>;</span><br></pre></td></tr></table></figure><p>在这里，我们使用 <code>infer</code> 关键字来声明性地引入一个名为 <code>Item</code> 的新的通用类型变量，而不是指定如何在真实分支中检索 <code>T</code> 的元素类型。这使我们不必考虑如何挖掘和探测我们感兴趣的类型的结构。</p><p>我们可以使用 <code>infer</code> 关键字编写一些有用的辅助类型别名。例如，对于简单的情况，我们可以从函数类型中提取出返回类型。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">GetReturnType</span>&lt;<span class="title class_">Type</span>&gt; = <span class="title class_">Type</span> <span class="keyword">extends</span> (...<span class="attr">args</span>: <span class="built_in">never</span>[]) =&gt; infer <span class="title class_">Return</span></span><br><span class="line">  ? <span class="title class_">Return</span></span><br><span class="line">  : <span class="built_in">never</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// type Num = number</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Num</span> = <span class="title class_">GetReturnType</span>&lt;<span class="function">() =&gt;</span> <span class="built_in">number</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// type Str = string</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Str</span> = <span class="title class_">GetReturnType</span>&lt;<span class="function">(<span class="params">x: <span class="built_in">string</span></span>) =&gt;</span> <span class="built_in">string</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// type Bools = boolean[]</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Bools</span> = <span class="title class_">GetReturnType</span>&lt;<span class="function">(<span class="params">a: <span class="built_in">boolean</span>, b: <span class="built_in">boolean</span></span>) =&gt;</span> <span class="built_in">boolean</span>[]&gt;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 给泛型传入 string 类型，条件类型会返回 never</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Never</span> = <span class="title class_">GetReturnType</span>&lt;<span class="built_in">string</span>&gt;;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">nev</span>: <span class="title class_">Never</span> = <span class="string">&quot;error&quot;</span> <span class="keyword">as</span> <span class="built_in">never</span>;</span><br></pre></td></tr></table></figure><p>当从一个具有多个调用签名的类型（如重载函数的类型）进行推断时，从最后一个签名进行推断（据推测，这是最容许的万能情况）。不可能根据参数类型的列表来执行重载解析。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="keyword">function</span> <span class="title function_">stringOrNum</span>(<span class="params">x: <span class="built_in">string</span></span>): <span class="built_in">number</span>;</span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">function</span> <span class="title function_">stringOrNum</span>(<span class="params">x: <span class="built_in">number</span></span>): <span class="built_in">string</span>;</span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">function</span> <span class="title function_">stringOrNum</span>(<span class="params">x: <span class="built_in">string</span> | <span class="built_in">number</span></span>): <span class="built_in">string</span> | <span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// type T1 = string | number</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T1</span> = <span class="title class_">ReturnType</span>&lt;<span class="keyword">typeof</span> stringOrNum&gt;;</span><br></pre></td></tr></table></figure><h3 id="7-5-3-分布式条件类型"><a href="#7-5-3-分布式条件类型" class="headerlink" title="7.5.3 分布式条件类型"></a>7.5.3 分布式条件类型</h3><p>当条件类型作用于一个通用类型时，当给定一个联合类型时，它们就变成了分布式的。例如，以下面的例子为例：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">ToArray</span>&lt;<span class="title class_">Type</span>&gt; = <span class="title class_">Type</span> <span class="keyword">extends</span> <span class="built_in">any</span> ? <span class="title class_">Type</span>[] : <span class="built_in">never</span>;</span><br></pre></td></tr></table></figure><p>如果我们将一个联合类型插入ToArray，那么条件类型将被应用于该联合的每个成员。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">ToArray</span>&lt;<span class="title class_">Type</span>&gt; = <span class="title class_">Type</span> <span class="keyword">extends</span> <span class="built_in">any</span> ? <span class="title class_">Type</span>[] : <span class="built_in">never</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// type StrArrOrNumArr = string[] | number[]</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">StrArrOrNumArr</span> = <span class="title class_">ToArray</span>&lt;<span class="built_in">string</span> | <span class="built_in">number</span>&gt;;</span><br></pre></td></tr></table></figure><p>这里发生的情况是，StrArrOrNumArr分布在：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="built_in">string</span> | <span class="built_in">number</span>;</span><br></pre></td></tr></table></figure><p>并对联合的每个成员类型进行映射，以达到有效的目的：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="title class_">ToArray</span>&lt;<span class="built_in">string</span>&gt; | <span class="title class_">ToArray</span>&lt;<span class="built_in">number</span>&gt;;</span><br></pre></td></tr></table></figure><p>这给我们留下了：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="built_in">string</span>[] | <span class="built_in">number</span>[];</span><br></pre></td></tr></table></figure><p>通常情况下，分布性是需要的行为。为了避免这种行为，你可以用方括号包围 <code>extends</code>关键字的每一边。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">ToArrayNonDist</span>&lt;<span class="title class_">Type</span>&gt; = [<span class="title class_">Type</span>] <span class="keyword">extends</span> [<span class="built_in">any</span>] ? <span class="title class_">Type</span>[] : <span class="built_in">never</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// &#x27;StrArrOrNumArr&#x27;不再是一个联合类型</span></span><br><span class="line"><span class="comment">// type StrArrOrNumArr = (string | number)[]</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">StrArrOrNumArr</span> = <span class="title class_">ToArrayNonDist</span>&lt;<span class="built_in">string</span> | <span class="built_in">number</span>&gt;;</span><br></pre></td></tr></table></figure><h2 id="7-6-映射类型"><a href="#7-6-映射类型" class="headerlink" title="7.6 映射类型"></a>7.6 映射类型</h2><p>当你不想重复定义类型，一个类型可以以另一个类型为基础创建新类型。</p><p>映射类型建立在索引签名的语法上，索引签名用于声明没有被提前声明的属性类型。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">OnlyBoolsAndHorses</span> = &#123;</span><br><span class="line">  [<span class="attr">key</span>: <span class="built_in">string</span>]: <span class="built_in">boolean</span> | <span class="title class_">Horse</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">conforms</span>: <span class="title class_">OnlyBoolsAndHorses</span> = &#123;</span><br><span class="line">  <span class="attr">del</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">rodney</span>: <span class="literal">false</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>映射类型是一种通用类型，它使用 <code>PropertyKeys</code>的联合（经常通过<code>keyof</code>创建）迭代键来创建一个类型。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">OptionsFlags</span>&lt;<span class="title class_">Type</span>&gt; = &#123;</span><br><span class="line">  [<span class="title class_">Property</span> <span class="keyword">in</span> keyof <span class="title class_">Type</span>]: <span class="built_in">boolean</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在这个例子中，<code>OptionsFlags</code>将从<code>Type</code>类型中获取所有属性，并将它们的值改为布尔值。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">FeatureFlags</span> = &#123;</span><br><span class="line">  <span class="attr">darkMode</span>: <span class="function">() =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line">  <span class="attr">newUserProfile</span>: <span class="function">() =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">type FeatureOptions = &#123;</span></span><br><span class="line"><span class="comment">    darkMode: boolean;</span></span><br><span class="line"><span class="comment">    newUserProfile: boolean;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">FeatureOptions</span> = <span class="title class_">OptionsFlags</span>&lt;<span class="title class_">FeatureFlags</span>&gt;;</span><br></pre></td></tr></table></figure><h3 id="7-6-1-映射修改器"><a href="#7-6-1-映射修改器" class="headerlink" title="7.6.1 映射修改器"></a>7.6.1 映射修改器</h3><p>在映射过程中，有两个额外的修饰符可以应用：<code>readonly</code>和<code>?</code> ，它们分别影响可变性和可选性。</p><p>你可以通过用<code>-</code>或<code>+</code>作为前缀来删除或添加这些修饰语。如果你不加前缀，那么就假定是<code>+</code>。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">CreateMutable</span>&lt;<span class="title class_">Type</span>&gt; = &#123;</span><br><span class="line">  <span class="comment">// 从一个类型的属性中删除 &quot;readonly&quot;属性</span></span><br><span class="line">  -<span class="keyword">readonly</span> [<span class="title class_">Property</span> <span class="keyword">in</span> keyof <span class="title class_">Type</span>]: <span class="title class_">Type</span>[<span class="title class_">Property</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">LockedAccount</span> = &#123;</span><br><span class="line">  <span class="keyword">readonly</span> <span class="attr">id</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="keyword">readonly</span> <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">type UnlockedAccount = &#123;</span></span><br><span class="line"><span class="comment">    id: string;</span></span><br><span class="line"><span class="comment">    name: string;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">UnlockedAccount</span> = <span class="title class_">CreateMutable</span>&lt;<span class="title class_">LockedAccount</span>&gt;;</span><br></pre></td></tr></table></figure><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 从一个类型的属性中删除 &quot;可选&quot; 属性</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Concrete</span>&lt;<span class="title class_">Type</span>&gt; = &#123;</span><br><span class="line">  [<span class="title class_">Property</span> <span class="keyword">in</span> keyof <span class="title class_">Type</span>]-?: <span class="title class_">Type</span>[<span class="title class_">Property</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">MaybeUser</span> = &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="built_in">string</span>;</span><br><span class="line">  name?: <span class="built_in">string</span>;</span><br><span class="line">  age?: <span class="built_in">number</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">type User = &#123;</span></span><br><span class="line"><span class="comment">    id: string;</span></span><br><span class="line"><span class="comment">    name: string;</span></span><br><span class="line"><span class="comment">    age: number;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">User</span> = <span class="title class_">Concrete</span>&lt;<span class="title class_">MaybeUser</span>&gt;;</span><br></pre></td></tr></table></figure><h3 id="7-6-2-通过-as-做-key-重映射"><a href="#7-6-2-通过-as-做-key-重映射" class="headerlink" title="7.6.2 通过 as 做 key 重映射"></a>7.6.2 通过 <code>as</code> 做 <code>key</code> 重映射</h3><p>在TypeScript 4.1及以后的版本中，你可以通过映射类型中的as子句重新映射映射类型中的键。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">MappedTypeWithNewProperties</span>&lt;<span class="title class_">Type</span>&gt; = &#123;</span><br><span class="line">  [<span class="title class_">Properties</span> <span class="keyword">in</span> keyof <span class="title class_">Type</span> <span class="keyword">as</span> <span class="title class_">NewKeyType</span>]: <span class="title class_">Type</span>[<span class="title class_">Properties</span>];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>你可以利用<a href="https://www.typescriptlang.org/docs/handbook/2/template-literal-types.html">模板字面类型</a>等功能，从先前的属性名称中创建新的属性名称。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Getters</span>&lt;<span class="title class_">Type</span>&gt; = &#123;</span><br><span class="line">  [<span class="title class_">Property</span> <span class="keyword">in</span> keyof <span class="title class_">Type</span> <span class="keyword">as</span> <span class="string">`get<span class="subst">$&#123;Capitalize&lt;<span class="built_in">string</span> &amp; Property&gt;&#125;</span>`</span>]: <span class="function">() =&gt;</span> <span class="title class_">Type</span>[<span class="title class_">Property</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">location</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">type LazyPerson = &#123;</span></span><br><span class="line"><span class="comment">  getName: () =&gt; string;</span></span><br><span class="line"><span class="comment">  getAge: () =&gt; number;</span></span><br><span class="line"><span class="comment">  getLocation: () =&gt; string;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">LazyPerson</span> = <span class="title class_">Getters</span>&lt;<span class="title class_">Person</span>&gt;;</span><br></pre></td></tr></table></figure><p>你可以通过条件类型产生<code>never</code>滤掉的键。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 删除 &quot;kind&quot;属性</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">RemoveKindField</span>&lt;<span class="title class_">Type</span>&gt; = &#123;</span><br><span class="line">  [<span class="title class_">Property</span> <span class="keyword">in</span> keyof <span class="title class_">Type</span> <span class="keyword">as</span> <span class="title class_">Exclude</span>&lt;<span class="title class_">Property</span>, <span class="string">&quot;kind&quot;</span>&gt;]: <span class="title class_">Type</span>[<span class="title class_">Property</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">type KindlessCircle = &#123;</span></span><br><span class="line"><span class="comment">    radius: number;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Circle</span> &#123;</span><br><span class="line">  <span class="attr">kind</span>: <span class="string">&quot;circle&quot;</span>;</span><br><span class="line">  <span class="attr">radius</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">KindlessCircle</span> = <span class="title class_">RemoveKindField</span>&lt;<span class="title class_">Circle</span>&gt;;</span><br></pre></td></tr></table></figure><p>你可以映射任意的联合体，不仅仅是<code>string | number | symbol</code>的联合体，还有任何类型的联合体。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">EventConfig</span>&lt;<span class="title class_">Events</span> <span class="keyword">extends</span> &#123; <span class="attr">kind</span>: <span class="built_in">string</span> &#125;&gt; = &#123;</span><br><span class="line">  [E <span class="keyword">in</span> <span class="title class_">Events</span> <span class="keyword">as</span> E[<span class="string">&quot;kind&quot;</span>]]: <span class="function">(<span class="params">event: E</span>) =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">SquareEvent</span> = &#123; <span class="attr">kind</span>: <span class="string">&quot;square&quot;</span>; <span class="attr">x</span>: <span class="built_in">number</span>; <span class="attr">y</span>: <span class="built_in">number</span> &#125;;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">CircleEvent</span> = &#123; <span class="attr">kind</span>: <span class="string">&quot;circle&quot;</span>; <span class="attr">radius</span>: <span class="built_in">number</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">type Config = &#123;</span></span><br><span class="line"><span class="comment">    square: (event: SquareEvent) =&gt; void;</span></span><br><span class="line"><span class="comment">    circle: (event: CircleEvent) =&gt; void;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Config</span> = <span class="title class_">EventConfig</span>&lt;<span class="title class_">SquareEvent</span> | <span class="title class_">CircleEvent</span>&gt;;</span><br></pre></td></tr></table></figure><h3 id="7-6-3-进一步探索"><a href="#7-6-3-进一步探索" class="headerlink" title="7.6.3 进一步探索"></a>7.6.3 进一步探索</h3><p>映射类型与本类型操作部分的其他功能配合得很好，例如，这里有一个<a href="https://www.typescriptlang.org/docs/handbook/2/conditional-types.html">使用条件类型的映射类型</a> ，它根据一个对象的属性<code>pii</code>是否被设置为字面意义上的 <code>true</code>，返回<code>true</code>或<code>false</code>。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">ExtractPII</span>&lt;<span class="title class_">Type</span>&gt; = &#123;</span><br><span class="line">  [<span class="title class_">Property</span> <span class="keyword">in</span> keyof <span class="title class_">Type</span>]: <span class="title class_">Type</span>[<span class="title class_">Property</span>] <span class="keyword">extends</span> &#123; <span class="attr">pii</span>: <span class="literal">true</span> &#125; ? <span class="literal">true</span> : <span class="literal">false</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">type ObjectsNeedingGDPRDeletion = &#123;</span></span><br><span class="line"><span class="comment">  id: false;</span></span><br><span class="line"><span class="comment">  name: true;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">DBFields</span> = &#123;</span><br><span class="line">  <span class="attr">id</span>: &#123; <span class="attr">format</span>: <span class="string">&quot;incrementing&quot;</span> &#125;;</span><br><span class="line">  <span class="attr">name</span>: &#123; <span class="attr">type</span>: <span class="built_in">string</span>; <span class="attr">pii</span>: <span class="literal">true</span> &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">ObjectsNeedingGDPRDeletion</span> = <span class="title class_">ExtractPII</span>&lt;<span class="title class_">DBFields</span>&gt;;</span><br></pre></td></tr></table></figure><h3 id="特别声明-本文转自-古艺散人老师-，如有需要可前往原文预览查看。"><a href="#特别声明-本文转自-古艺散人老师-，如有需要可前往原文预览查看。" class="headerlink" title="特别声明: 本文转自  古艺散人老师 ，如有需要可前往原文预览查看。"></a>特别声明: 本文转自 <a href="https://github.com/lurongtao/TypeScript"> 古艺散人老师 </a>，如有需要可前往原文预览查看。</h3>]]></content>
      
      
      <categories>
          
          <category> TypeScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> TypeScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1-6、基础篇：对象类型</title>
      <link href="/article/59398/"/>
      <url>/article/59398/</url>
      
        <content type="html"><![CDATA[<h1 id="六、对象类型"><a href="#六、对象类型" class="headerlink" title="六、对象类型"></a>六、对象类型</h1><p>在JavaScript中，我们分组和传递数据的基本方式是通过对象。在TypeScript中，我们通过对象类型来表示这些对象。</p><p>正如我们所见，它们可以是匿名的：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">greet</span>(<span class="params">person: &#123; name: <span class="built_in">string</span>; age: <span class="built_in">number</span> &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;Hello &quot;</span> + person.<span class="property">name</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或者可以通过使用一个接口来命名它们：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">greet</span>(<span class="params">person: Person</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;Hello &quot;</span> + person.<span class="property">name</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或一个类型别名：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Person</span> = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">greet</span>(<span class="params">person: Person</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;Hello &quot;</span> + person.<span class="property">name</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面的三个例子中，我们写了一些函数，这些函数接收包含属性 <code>name</code>（必须是一个 <code>string</code>）和 <code>age</code>（必须是一个 <code>number</code>）的对象。</p><h2 id="6-1-属性修改器"><a href="#6-1-属性修改器" class="headerlink" title="6.1 属性修改器"></a>6.1 属性修改器</h2><p>对象类型中的每个属性都可以指定几件事：类型、属性是否是可选的，以及属性是否可以被写入。</p><h3 id="6-1-1-可选属性"><a href="#6-1-1-可选属性" class="headerlink" title="6.1.1 可选属性"></a>6.1.1 可选属性</h3><p>很多时候，我们会发现自己处理的对象可能有一个属性设置。在这些情况下，我们可以在这些属性的名字后面加上一个问号（？），把它们标记为可选的。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Shape</span> = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">PaintOptions</span> &#123;</span><br><span class="line">  <span class="attr">shape</span>: <span class="title class_">Shape</span>;</span><br><span class="line">  xPos?: <span class="built_in">number</span>;</span><br><span class="line">  yPos?: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">paintShape</span>(<span class="params">opts: PaintOptions</span>) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">shape</span>: <span class="title class_">Shape</span> = &#123;&#125;;</span><br><span class="line"><span class="title function_">paintShape</span>(&#123; shape &#125;);</span><br><span class="line"><span class="title function_">paintShape</span>(&#123; shape, <span class="attr">xPos</span>: <span class="number">100</span> &#125;);</span><br><span class="line"><span class="title function_">paintShape</span>(&#123; shape, <span class="attr">yPos</span>: <span class="number">100</span> &#125;);</span><br><span class="line"><span class="title function_">paintShape</span>(&#123; shape, <span class="attr">xPos</span>: <span class="number">100</span>, <span class="attr">yPos</span>: <span class="number">100</span> &#125;);</span><br></pre></td></tr></table></figure><p>在这个例子中，<code>xPos</code>和<code>yPos</code>都被认为是可选的。我们可以选择提供它们中的任何一个，所以上面对<code>paintShape</code>的每个调用都是有效的。所有的可选性实际上是说，如果属性被设置，它最好有一个特定的类型。</p><p>我们也可以从这些属性中读取，但当我们在<code>strictNullChecks</code>下读取时，TypeScript会告诉我们它们可能是未定义的。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">paintShape</span>(<span class="params">opts: PaintOptions</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> xPos = opts.<span class="property">xPos</span>;</span><br><span class="line">  <span class="keyword">let</span> yPos = opts.<span class="property">yPos</span>;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在JavaScript中，即使该属性从未被设置过，我们仍然可以访问它–它只是会给我们未定义的值。我们可以专门处理未定义。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">paintShape</span>(<span class="params">opts: PaintOptions</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> xPos = opts.<span class="property">xPos</span> === <span class="literal">undefined</span> ? <span class="number">0</span> : opts.<span class="property">xPos</span>;</span><br><span class="line">  <span class="keyword">let</span> yPos = opts.<span class="property">yPos</span> === <span class="literal">undefined</span> ? <span class="number">0</span> : opts.<span class="property">yPos</span>;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>请注意，这种为未指定的值设置默认值的模式非常普遍，以至于JavaScript有语法来支持它。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">paintShape</span>(<span class="params">&#123; shape, xPos = <span class="number">0</span>, yPos = <span class="number">0</span> &#125;: PaintOptions</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;x coordinate at&quot;</span>, xPos);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;y coordinate at&quot;</span>, yPos);</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这里，我们为 <code>paintShape</code> 的参数使用了一个解构模式，并为 <code>xPos</code> 和 <code>yPos</code> 提供了默认值。现在 <code>xPos</code> 和 <code>yPos</code> 都肯定存在于 <code>paintShape</code> 的主体中，但对于 <code>paintShape</code> 的任何调用者来说是可选的。</p><blockquote><p>请注意，目前还没有办法将类型注释放在解构模式中。这是因为下面的语法在JavaScript中已经有了不同的含义。</p></blockquote><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">draw</span>(<span class="params">&#123; shape: Shape, xPos: <span class="built_in">number</span> = <span class="number">100</span> /*...*/ &#125;</span>) &#123;</span><br><span class="line">  <span class="title function_">render</span>(shape);</span><br><span class="line">  <span class="title function_">render</span>(xPos);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://s2.loli.net/2022/02/22/GItsFTdQPJl9Svf.png" alt="image-20211127082617191" style="zoom:50%;" /><p>在一个对象解构模式中，<code>shape: Shape</code> 意味着 “获取属性 <code>shape</code>，并在本地重新定义为一个名为 <code>Shape</code> 的变量。同样，<code>xPos: number</code> 创建一个名为number的变量，其值基于参数的 <code>xPos</code>。</p><h3 id="6-1-2-只读属性"><a href="#6-1-2-只读属性" class="headerlink" title="6.1.2 只读属性"></a>6.1.2 只读属性</h3><p>对于TypeScript，属性也可以被标记为只读。虽然它不会在运行时改变任何行为，但在类型检查期间，一个标记为只读的属性不能被写入。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">SomeType</span> &#123;</span><br><span class="line">  <span class="keyword">readonly</span> <span class="attr">prop</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">doSomething</span>(<span class="params">obj: SomeType</span>) &#123;</span><br><span class="line">  <span class="comment">// 可以读取 &#x27;obj.prop&#x27;.</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`prop has the value &#x27;<span class="subst">$&#123;obj.prop&#125;</span>&#x27;.`</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 但不能重新设置值</span></span><br><span class="line">  obj.<span class="property">prop</span> = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/img/TypeScript/06-02.png" alt="image-20211127083551809" style="zoom:50%;" /><p>使用 <code>readonly</code> 修饰符并不一定意味着一个值是完全不可改变的。或者换句话说，它的内部内容不能被改变，它只是意味着该属性本身不能被重新写入。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Home</span> &#123;</span><br><span class="line">  <span class="keyword">readonly</span> <span class="attr">resident</span>: &#123; <span class="attr">name</span>: <span class="built_in">string</span>; <span class="attr">age</span>: <span class="built_in">number</span> &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">visitForBirthday</span>(<span class="params">home: Home</span>) &#123;</span><br><span class="line">  <span class="comment">// 我们可以从&#x27;home.resident&#x27;读取和更新属性。</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Happy birthday <span class="subst">$&#123;home.resident.name&#125;</span>!`</span>);</span><br><span class="line">  home.<span class="property">resident</span>.<span class="property">age</span>++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">evict</span>(<span class="params">home: Home</span>) &#123;</span><br><span class="line">  <span class="comment">// 但是我们不能写到&#x27;home&#x27;上的&#x27;resident&#x27;属性本身。</span></span><br><span class="line">  home.<span class="property">resident</span> = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;Victor the Evictor&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">42</span>,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/img/TypeScript/06-03.png" alt="image-20211127084012491" style="zoom:50%;" /><p>管理对 <code>readonly</code> 含义的预期是很重要的。在TypeScript的开发过程中，对于一个对象应该如何被使用的问题，它是有用的信号。TypeScript在检查两个类型的属性是否兼容时，并不考虑这些类型的属性是否是 <code>readonly</code>，所以 <code>readony</code> 属性也可以通过别名来改变。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">ReadonlyPerson</span> &#123;</span><br><span class="line">  <span class="keyword">readonly</span> <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="keyword">readonly</span> <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">writablePerson</span>: <span class="title class_">Person</span> = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;Person McPersonface&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">42</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 正常工作</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">readonlyPerson</span>: <span class="title class_">ReadonlyPerson</span> = writablePerson;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(readonlyPerson.<span class="property">age</span>); <span class="comment">// 打印 &#x27;42&#x27;</span></span><br><span class="line">writablePerson.<span class="property">age</span>++;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(readonlyPerson.<span class="property">age</span>); <span class="comment">// 打印 &#x27;43&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="6-1-3-索引签名"><a href="#6-1-3-索引签名" class="headerlink" title="6.1.3 索引签名"></a>6.1.3 索引签名</h3><p>有时你并不提前知道一个类型的所有属性名称，但你知道值的形状。</p><p>在这些情况下，你可以使用一个索引签名来描述可能的值的类型，比如说：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">StringArray</span> &#123;</span><br><span class="line">  [<span class="attr">index</span>: <span class="built_in">number</span>]: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">myArray</span>: <span class="title class_">StringArray</span> = [<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>];</span><br><span class="line"><span class="keyword">const</span> secondItem = myArray[<span class="number">1</span>];</span><br></pre></td></tr></table></figure><p>上面，我们有一个 <code>StringArray</code> 接口，它有一个索引签名。这个索引签名指出，当一个 <code>StringArray</code> 被数字索引时，它将返回一个字符串。</p><p>索引签名的属性类型必须是 <code>string</code> 或 <code>number</code>。</p><p>支持两种类型的索引器是可能的，但是从数字索引器返回的类型必须是字符串索引器返回的类型的子类型。这是因为当用 “数字 “进行索引时，JavaScript实际上会在索引到一个对象之前将其转换为 “字符串”。这意味着用<code>100</code>（一个<code>数字</code>）进行索引和用<code>&quot;100&quot;</code>（一个<code>字符串</code>）进行索引是一样的，所以两者需要一致。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">  <span class="attr">breed</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">NotOkay</span> &#123;</span><br><span class="line">  [<span class="attr">x</span>: <span class="built_in">number</span>]: <span class="title class_">Animal</span>;</span><br><span class="line">  [<span class="attr">x</span>: <span class="built_in">string</span>]: <span class="title class_">Dog</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://s2.loli.net/2022/02/22/a2rzdbJlqtuoXFw.png" alt="image-20211127090502640" style="zoom:50%;" /><p>虽然字符串索引签名是描述 “字典 “模式的一种强大方式，但它也强制要求所有的属性与它们的返回类型相匹配。这是因为字符串索引声明 <code>obj.property</code> 也可以作为 <code>obj[&quot;property&quot;]</code>。在下面的例子中，<code>name</code>的类型与字符串索引的类型不匹配，类型检查器会给出一个错误：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">NumberDictionary</span> &#123;</span><br><span class="line">  [<span class="attr">index</span>: <span class="built_in">string</span>]: <span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line">  <span class="attr">length</span>: <span class="built_in">number</span>; <span class="comment">// ok</span></span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://s2.loli.net/2022/02/22/AzHPBUGvK5JbQpw.png" alt="image-20211127091044224" style="zoom:50%;" /><p>然而，如果索引签名是属性类型的联合，不同类型的属性是可以接受的：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">NumberOrStringDictionary</span> &#123;</span><br><span class="line">  [<span class="attr">index</span>: <span class="built_in">string</span>]: <span class="built_in">number</span> | <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">length</span>: <span class="built_in">number</span>; <span class="comment">// 正确, length 是 number 类型</span></span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>; <span class="comment">// 正确, name 是 string 类型</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后，你可以使索引签名为只读，以防止对其索引的赋值：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">ReadonlyStringArray</span> &#123;</span><br><span class="line">  <span class="keyword">readonly</span> [<span class="attr">index</span>: <span class="built_in">number</span>]: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">myArray</span>: <span class="title class_">ReadonlyStringArray</span> = <span class="title function_">getReadOnlyStringArray</span>();</span><br><span class="line">myArray[<span class="number">2</span>] = <span class="string">&quot;Mallory&quot;</span>;</span><br></pre></td></tr></table></figure><img src="/img/TypeScript/06-06.png" alt="image-20211127091423550" style="zoom:50%;" /><p>你不能设置 <code>myArray[2]</code>，因为这个索引签名是只读的。</p><h2 id="6-2-扩展类型"><a href="#6-2-扩展类型" class="headerlink" title="6.2 扩展类型"></a>6.2 扩展类型</h2><p>有一些类型可能是其他类型的更具体的版本，这是很常见的。例如，我们可能有一个<code>BasicAddress</code>类型，描述发送信件和包裹所需的字段。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">BasicAddress</span> &#123;</span><br><span class="line">  name?: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">street</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">city</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">country</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">postalCode</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在某些情况下，这就足够了，但是如果一个地址的小区内有多个单元，那么地址往往有一个单元号与之相关。我们就可以描述一个 <code>AddressWithUnit</code>：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">AddressWithUnit</span> &#123;</span><br><span class="line">  name?: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">unit</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">street</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">city</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">country</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">postalCode</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这就完成了工作，但这里的缺点是，当我们的变化是纯粹的加法时，我们不得不重复 <code>BasicAddress</code> 的所有其他字段。相反，我们可以扩展原始的 <code>BasicAddress</code> 类型，只需添加 <code>AddressWithUnit</code> 特有的新字段：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">BasicAddress</span> &#123;</span><br><span class="line">  name?: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">street</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">city</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">country</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">postalCode</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">AddressWithUnit</span> <span class="keyword">extends</span> <span class="title class_">BasicAddress</span> &#123;</span><br><span class="line">  <span class="attr">unit</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接口上的 <code>extends</code> 关键字，允许我们有效地从其他命名的类型中复制成员，并添加我们想要的任何新成员。这对于减少我们不得不写的类型声明模板，以及表明同一属性的几个不同声明可能是相关的意图来说，是非常有用的。例如，<code>AddressWithUnit</code> 不需要重复 <code>street</code> 属性，而且因为 <code>street</code> 源于 <code>BasicAddress</code>，我们会知道这两种类型在某种程度上是相关的。</p><p>接口也可以从多个类型中扩展。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Colorful</span> &#123;</span><br><span class="line">  <span class="attr">color</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Circle</span> &#123;</span><br><span class="line">  <span class="attr">radius</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">ColorfulCircle</span> <span class="keyword">extends</span> <span class="title class_">Colorful</span>, <span class="title class_">Circle</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">cc</span>: <span class="title class_">ColorfulCircle</span> = &#123;</span><br><span class="line">  <span class="attr">color</span>: <span class="string">&quot;red&quot;</span>,</span><br><span class="line">  <span class="attr">radius</span>: <span class="number">42</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="6-3-交叉类型"><a href="#6-3-交叉类型" class="headerlink" title="6.3 交叉类型"></a>6.3 交叉类型</h2><p>接口允许我们通过扩展其他类型建立起新的类型。TypeScript提供了另一种结构，称为交叉类型，主要用于组合现有的对象类型。</p><p>交叉类型是用 <code>&amp;</code> 操作符定义的。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Colorful</span> &#123;</span><br><span class="line">  <span class="attr">color</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Circle</span> &#123;</span><br><span class="line">  <span class="attr">radius</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">ColorfulCircle</span> = <span class="title class_">Colorful</span> &amp; <span class="title class_">Circle</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">cc</span>: <span class="title class_">ColorfulCircle</span> = &#123;</span><br><span class="line">  <span class="attr">color</span>: <span class="string">&quot;red&quot;</span>,</span><br><span class="line">  <span class="attr">radius</span>: <span class="number">42</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在这里，我们将 <code>Colorful</code> 和 <code>Circle</code> 相交，产生了一个新的类型，它拥有 <code>Colorful</code> 和 <code>Circle</code> 的所有成员。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">draw</span>(<span class="params">circle: Colorful &amp; Circle</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Color was <span class="subst">$&#123;circle.color&#125;</span>`</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Radius was <span class="subst">$&#123;circle.radius&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 正确</span></span><br><span class="line"><span class="title function_">draw</span>(&#123; <span class="attr">color</span>: <span class="string">&quot;blue&quot;</span>, <span class="attr">radius</span>: <span class="number">42</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 错误</span></span><br><span class="line"><span class="title function_">draw</span>(&#123; <span class="attr">color</span>: <span class="string">&quot;red&quot;</span>, <span class="attr">raidus</span>: <span class="number">42</span> &#125;);</span><br></pre></td></tr></table></figure><img src="https://s2.loli.net/2022/02/22/EwehSBGIodpYQfj.png" alt="image-20211127095046044" style="zoom:50%;" /><h2 id="6-7-接口与交叉类型"><a href="#6-7-接口与交叉类型" class="headerlink" title="6.7 接口与交叉类型"></a>6.7 接口与交叉类型</h2><p>我们刚刚看了两种组合类型的方法，它们很相似，但实际上有细微的不同。对于接口，我们可以使用 <code>extends</code>子句来扩展其他类型，而对于交叉类型，我们也可以做类似的事情，并用类型别名来命名结果。两者之间的主要区别在于如何处理冲突，这种区别通常是你在接口和交叉类型的类型别名之间选择一个的主要原因之一。</p><img src="https://s2.loli.net/2022/02/22/tYex2cry6HGUgfT.png" alt="image-20211127101912142" style="zoom:50%;" /><p>接口可以定义多次，多次的声明会自动合并：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Sister</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Sister</span> &#123;</span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">sisterAn</span>: <span class="title class_">Sister</span> = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;sisterAn&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">sisterRan</span>: <span class="title class_">Sister</span> = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;sisterRan&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">12</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><img src="/img/TypeScript/06-09.png" alt="image-20211127102424559" style="zoom:50%;" /><p>但是类型别名如果定义多次，会报错：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Sister</span> = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Sister</span> = &#123;</span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><img src="/img/TypeScript/06-10.png" alt="image-20211127102801182" style="zoom:50%;" /><h2 id="6-8-泛型对象类型"><a href="#6-8-泛型对象类型" class="headerlink" title="6.8 泛型对象类型"></a>6.8 泛型对象类型</h2><p>让我们想象一下，一个可以包含任何数值的盒子类型：字符串、数字、长颈鹿，等等。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Box</span> &#123;</span><br><span class="line">  <span class="attr">contents</span>: <span class="built_in">any</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在，内容属性的类型是任意，这很有效，但会导致下一步的意外。</p><p>我们可以使用 <code>unknown</code>，但这意味着在我们已经知道内容类型的情况下，我们需要做预防性检查，或者使用容易出错的类型断言。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Box</span> &#123;</span><br><span class="line">  <span class="attr">contents</span>: <span class="built_in">unknown</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">x</span>: <span class="title class_">Box</span> = &#123;</span><br><span class="line">  <span class="attr">contents</span>: <span class="string">&quot;hello world&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 我们需要检查 &#x27;x.contents&#x27;</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> x.<span class="property">contents</span> === <span class="string">&quot;string&quot;</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(x.<span class="property">contents</span>.<span class="title function_">toLowerCase</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或者用类型断言</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>((x.<span class="property">contents</span> <span class="keyword">as</span> <span class="built_in">string</span>).<span class="title function_">toLowerCase</span>());</span><br></pre></td></tr></table></figure><p>一种安全的方法是为每一种类型的内容搭建不同的盒子类型：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">NumberBox</span> &#123;</span><br><span class="line">  <span class="attr">contents</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">StringBox</span> &#123;</span><br><span class="line">  <span class="attr">contents</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">BooleanBox</span> &#123;</span><br><span class="line">  <span class="attr">contents</span>: <span class="built_in">boolean</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但这意味着我们必须创建不同的函数，或函数的重载，以对这些类型进行操作：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">setContents</span>(<span class="params">box: StringBox, newContents: <span class="built_in">string</span></span>): <span class="built_in">void</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">setContents</span>(<span class="params">box: NumberBox, newContents: <span class="built_in">number</span></span>): <span class="built_in">void</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">setContents</span>(<span class="params">box: BooleanBox, newContents: <span class="built_in">boolean</span></span>): <span class="built_in">void</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">setContents</span>(<span class="params">box: &#123; contents: <span class="built_in">any</span> &#125;, newContents: <span class="built_in">any</span></span>) &#123;</span><br><span class="line">  box.<span class="property">contents</span> = newContents;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那是一个很大的模板。此外，我们以后可能需要引入新的类型和重载。这是令人沮丧的，因为我们的盒子类型和重载实际上都是一样的。</p><p>相反，我们可以做一个通用的 <code>Box</code> 类型，声明一个类型参数：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Box</span>&lt;<span class="title class_">Type</span>&gt; &#123;</span><br><span class="line">  <span class="attr">contents</span>: <span class="title class_">Type</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>你可以把这句话理解为：”一个类型的盒子，是它的内容具有类型的东西”。以后，当我们引用 <code>Box</code> 时，我们必须给一个类型参数来代替 <code> Type</code>。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">box</span>: <span class="title class_">Box</span>&lt;<span class="built_in">string</span>&gt;;</span><br></pre></td></tr></table></figure><p>把 <code>Box</code> 想象成一个真实类型的模板，其中 <code>Type</code> 是一个占位符，会被替换成其他类型。当 TypeScript 看到 <code>Box&lt;string&gt;</code> 时，它将用字符串替换 <code>Box&lt;Type&gt;</code> 中的每个 <code>Type</code> 实例，并最终以 <code>&#123; contents: string &#125;</code> 这样的方式工作。换句话说，<code>Box&lt;string&gt;</code>和我们之前的<code>StringBox</code>工作起来是一样的。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Box</span>&lt;<span class="title class_">Type</span>&gt; &#123;</span><br><span class="line">  <span class="attr">contents</span>: <span class="title class_">Type</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">StringBox</span> &#123;</span><br><span class="line">  <span class="attr">contents</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">boxA</span>: <span class="title class_">Box</span>&lt;<span class="built_in">string</span>&gt; = &#123; <span class="attr">contents</span>: <span class="string">&quot;hello&quot;</span> &#125;;</span><br><span class="line">boxA.<span class="property">contents</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">boxB</span>: <span class="title class_">StringBox</span> = &#123; <span class="attr">contents</span>: <span class="string">&quot;world&quot;</span> &#125;;</span><br><span class="line">boxB.<span class="property">contents</span>;</span><br></pre></td></tr></table></figure><p>盒子是可重用的，因为Type可以用任何东西来代替。这意味着当我们需要一个新类型的盒子时，我们根本不需要声明一个新的盒子类型（尽管如果我们想的话，我们当然可以）。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Box</span>&lt;<span class="title class_">Type</span>&gt; &#123;</span><br><span class="line">  <span class="attr">contents</span>: <span class="title class_">Type</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Apple</span> &#123;</span><br><span class="line">  <span class="comment">// ....</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等价于 &#x27;&#123; contents: Apple &#125;&#x27;.</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">AppleBox</span> = <span class="title class_">Box</span>&lt;<span class="title class_">Apple</span>&gt;;</span><br></pre></td></tr></table></figure><p>这也意味着我们可以完全避免重载，而是使用通用函数。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> setContents&lt;<span class="title class_">Type</span>&gt;(<span class="attr">box</span>: <span class="title class_">Box</span>&lt;<span class="title class_">Type</span>&gt;, <span class="attr">newContents</span>: <span class="title class_">Type</span>) &#123;</span><br><span class="line">  box.<span class="property">contents</span> = newContents;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>值得注意的是，类型别名也可以是通用的。我们可以定义我们新的 <code>Box&lt;Type&gt;</code>接口：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Box</span>&lt;<span class="title class_">Type</span>&gt; &#123;</span><br><span class="line">  <span class="attr">contents</span>: <span class="title class_">Type</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过使用一个类型别名来代替：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Box</span>&lt;<span class="title class_">Type</span>&gt; = &#123;</span><br><span class="line">  <span class="attr">contents</span>: <span class="title class_">Type</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>由于类型别名与接口不同，它不仅可以描述对象类型，我们还可以用它来编写其他类型的通用辅助类型。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">OrNull</span>&lt;<span class="title class_">Type</span>&gt; = <span class="title class_">Type</span> | <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">OneOrMany</span>&lt;<span class="title class_">Type</span>&gt; = <span class="title class_">Type</span> | <span class="title class_">Type</span>[];</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">OneOrManyOrNull</span>&lt;<span class="title class_">Type</span>&gt; = <span class="title class_">OrNull</span>&lt;<span class="title class_">OneOrMany</span>&lt;<span class="title class_">Type</span>&gt;&gt;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">OneOrManyOrNullStrings</span> = <span class="title class_">OneOrManyOrNull</span>&lt;<span class="built_in">string</span>&gt;;</span><br></pre></td></tr></table></figure><p>我们将在稍后回到类型别名。</p><p>通用对象类型通常是某种容器类型，它的工作与它们所包含的元素类型无关。数据结构以这种方式工作是很理想的，这样它们就可以在不同的数据类型中重复使用。</p><h2 id="6-9-数组类型"><a href="#6-9-数组类型" class="headerlink" title="6.9 数组类型"></a>6.9 数组类型</h2><p>我们一直在使用这样一种类型：数组类型。每当我们写出 <code>number[]</code> 或 <code>string[]</code> 这样的类型时，这实际上只是 <code>Array&lt;number&gt;</code>和<code>Array&lt;string&gt;</code>的缩写。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">doSomething</span>(<span class="params">value: <span class="built_in">Array</span>&lt;<span class="built_in">string</span>&gt;</span>) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">myArray</span>: <span class="built_in">string</span>[] = [<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;world&quot;</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这两样都能用</span></span><br><span class="line"><span class="title function_">doSomething</span>(myArray);</span><br><span class="line"><span class="title function_">doSomething</span>(<span class="keyword">new</span> <span class="title class_">Array</span>(<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;world&quot;</span>));</span><br></pre></td></tr></table></figure><p>和上面的 <code>Box</code> 类型一样，<code>Array</code> 本身也是一个通用类型。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Array</span>&lt;<span class="title class_">Type</span>&gt; &#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 获取或设置数组的长度。</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="attr">length</span>: <span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 移除数组中的最后一个元素并返回。</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="title function_">pop</span>(): <span class="title class_">Type</span> | <span class="literal">undefined</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 向一个数组添加新元素，并返回数组的新长度。</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="title function_">push</span>(...<span class="attr">items</span>: <span class="title class_">Type</span>[]): <span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现代JavaScript还提供了其他通用的数据结构，比如 <code>Map&lt;K, V&gt; </code>, <code>Set&lt;T&gt;</code>, 和 <code>Promise&lt;T&gt;</code>。这实际上意味着，由于<code>Map</code>、<code>Set</code>和<code>Promise</code>的行为方式，它们可以与任何类型的集合一起工作。</p><h2 id="6-10-只读数组类型"><a href="#6-10-只读数组类型" class="headerlink" title="6.10 只读数组类型"></a>6.10 只读数组类型</h2><p><code>ReadonlyArray</code>是一个特殊的类型，描述了不应该被改变的数组。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">doStuff</span>(<span class="params">values: ReadonlyArray&lt;<span class="built_in">string</span>&gt;</span>) &#123;</span><br><span class="line">  <span class="comment">// 我们可以从 &#x27;values&#x27; 读数据...</span></span><br><span class="line">  <span class="keyword">const</span> copy = values.<span class="title function_">slice</span>();</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`第一个值是 <span class="subst">$&#123;values[<span class="number">0</span>]&#125;</span>`</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...但我们不能改变 &#x27;vulues&#x27; 的值。</span></span><br><span class="line">  values.<span class="title function_">push</span>(<span class="string">&quot;hello!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://s2.loli.net/2022/02/22/bBVuXOf5oQqIMgG.png" alt="image-20211127191529424" style="zoom:50%;" /><p>和属性的 <code>readonly</code> 修饰符一样，它主要是一个我们可以用来了解意图的工具。当我们看到一个返回<code>ReadonlyArrays</code> 的函数时，它告诉我们我们根本不打算改变其内容，而当我们看到一个消耗 <code>ReadonlyArrays</code>的函数时，它告诉我们可以将任何数组传入该函数，而不用担心它会改变其内容。</p><p>与 <code>Array</code> 不同，没有一个我们可以使用的 <code>ReadonlyArray</code>构造函数。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">ReadonlyArray</span>(<span class="string">&quot;red&quot;</span>, <span class="string">&quot;green&quot;</span>, <span class="string">&quot;blue&quot;</span>);</span><br></pre></td></tr></table></figure><img src="https://s2.loli.net/2022/02/22/3S2e6YC9UQKbGNy.png" alt="image-20211127191946986" style="zoom: 67%;" /><p>相反，我们可以将普通的 <code>Array</code> 分配给 <code>ReadonlyArray</code>。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="attr">roArray</span>: <span class="title class_">ReadonlyArray</span>&lt;<span class="built_in">string</span>&gt; = [<span class="string">&quot;red&quot;</span>, <span class="string">&quot;green&quot;</span>, <span class="string">&quot;blue&quot;</span>];</span><br></pre></td></tr></table></figure><p>正如 TypeScript为 <code>Array&lt;Type&gt;</code> 提供了 <code>Type[]</code> 的速记语法一样，它也为 <code>ReadonlyArray&lt;Type&gt;</code>提供了只读<code>Type[]</code>的速记语法。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">doStuff</span>(<span class="params">values: <span class="keyword">readonly</span> <span class="built_in">string</span>[]</span>) &#123;</span><br><span class="line">  <span class="comment">// 我们可以从 &#x27;values&#x27; 读数据...</span></span><br><span class="line">  <span class="keyword">const</span> copy = values.<span class="title function_">slice</span>();</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`The first value is <span class="subst">$&#123;values[<span class="number">0</span>]&#125;</span>`</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 但我们不能改变 &#x27;vulues&#x27; 的值。</span></span><br><span class="line">  values.<span class="title function_">push</span>(<span class="string">&quot;hello!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/02/22/TngAvtrq5W1LQhc.png" alt="image-20211127192458009"></p><p>最后要注意的是，与 <code>readony</code> 属性修改器不同，可分配性在普通 <code>Array</code> 和 <code>ReadonlyArray</code> 之间不是双向的。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">x</span>: <span class="keyword">readonly</span> <span class="built_in">string</span>[] = [];</span><br><span class="line"><span class="keyword">let</span> <span class="attr">y</span>: <span class="built_in">string</span>[] = [];</span><br><span class="line"></span><br><span class="line">x = y;</span><br><span class="line">y = x;</span><br></pre></td></tr></table></figure><img src="https://s2.loli.net/2022/02/22/fwveBsiLpA7FqNK.png" alt="image-20211127192932203" style="zoom:50%;" /><h2 id="6-11-元组类型"><a href="#6-11-元组类型" class="headerlink" title="6.11 元组类型"></a>6.11 元组类型</h2><p><code>Tuple</code> 类型是另一种 <code>Array</code> 类型，它确切地知道包含多少个元素，以及它在特定位置包含哪些类型。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">StringNumberPair</span> = [<span class="built_in">string</span>, <span class="built_in">number</span>];</span><br></pre></td></tr></table></figure><p>这里，<code>StringNumberPair</code> 是一个 <code>string</code> 和 <code>number</code> 的元组类型。像 <code>ReadonlyArray</code> 一样，它在运行时没有表示，但对TypeScript来说是重要的。对于类型系统来说，<code>StringNumberPair</code> 描述了其 索引 0 包含字符串和 索引1 包含数字的数组。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">doSomething</span>(<span class="params">pair: [<span class="built_in">string</span>, <span class="built_in">number</span>]</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> a = pair[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">const</span> b = pair[<span class="number">1</span>];</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">doSomething</span>([<span class="string">&quot;hello&quot;</span>, <span class="number">42</span>]);</span><br></pre></td></tr></table></figure><p>如果我们试图索引超过元素的数量，我们会得到一个错误：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">doSomething</span>(<span class="params">pair: [<span class="built_in">string</span>, <span class="built_in">number</span>]</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> c = pair[<span class="number">2</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/02/22/9nMPvE3DZpdRuTA.png" alt="image-20211127202845783"></p><p>我们还可以使用JavaScript的数组析构来对元组进行解构。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">doSomething</span>(<span class="params">stringHash: [<span class="built_in">string</span>, <span class="built_in">number</span>]</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [inputString, hash] = stringHash;</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(inputString);</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(hash);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>除了这些长度检查，像这样的简单元组类型等同于 <code>Array</code> 的版本，它为特定的索引声明属性，并且用数字字面类型声明长度。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">StringNumberPair</span> &#123;</span><br><span class="line">  <span class="comment">// 专有属性</span></span><br><span class="line">  <span class="attr">length</span>: <span class="number">2</span>;</span><br><span class="line">  <span class="number">0</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="number">1</span>: <span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 其他 &#x27;Array&lt;string | number&gt;&#x27; 成员...</span></span><br><span class="line">  <span class="title function_">slice</span>(start?: <span class="built_in">number</span>, end?: <span class="built_in">number</span>): <span class="title class_">Array</span>&lt;<span class="built_in">string</span> | <span class="built_in">number</span>&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另一件你可能感兴趣的事情是，元组可以通过在元素的类型后面写出问号（？）—— 可选的元组，元素只能出现在末尾，而且还影响到长度的类型。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Either2</span>dOr3d = [<span class="built_in">number</span>, <span class="built_in">number</span>, <span class="built_in">number</span>?];</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">setCoordinate</span>(<span class="params">coord: Either2dOr3d</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [x, y, z] = coord;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`提供的坐标有 <span class="subst">$&#123;coord.length&#125;</span> 个维度`</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://s2.loli.net/2022/02/22/fPVJp1tlRhyHYsW.png" alt="image-20211127204518693" style="zoom:50%;" /><p>图元也可以有其余元素，这些元素必须是 <code>array/tuple</code> 类型。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">StringNumberBooleans</span> = [<span class="built_in">string</span>, <span class="built_in">number</span>, ...<span class="built_in">boolean</span>[]];</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">StringBooleansNumber</span> = [<span class="built_in">string</span>, ...<span class="built_in">boolean</span>[], <span class="built_in">number</span>];</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">BooleansStringNumber</span> = [...<span class="built_in">boolean</span>[], <span class="built_in">string</span>, <span class="built_in">number</span>];</span><br></pre></td></tr></table></figure><ul><li><p><code>StringNumberBooleans</code> 描述了一个元组，其前两个元素分别是字符串和数字，但后面可以有任意数量的布尔。</p></li><li><p><code>StringBooleansNumber</code> 描述了一个元组，其第一个元素是字符串，然后是任意数量的布尔运算，最后是一个数字。</p></li><li><p><code>BooleansStringNumber</code> 描述了一个元组，其起始元素是任意数量的布尔运算，最后是一个字符串，然后是一个数字。</p></li></ul><p>一个有其余元素的元组没有集合的 “长度”——它只有一组不同位置的知名元素。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="attr">a</span>: <span class="title class_">StringNumberBooleans</span> = [<span class="string">&quot;hello&quot;</span>, <span class="number">1</span>];</span><br><span class="line"><span class="keyword">const</span> <span class="attr">b</span>: <span class="title class_">StringNumberBooleans</span> = [<span class="string">&quot;beautiful&quot;</span>, <span class="number">2</span>, <span class="literal">true</span>];</span><br><span class="line"><span class="keyword">const</span> <span class="attr">c</span>: <span class="title class_">StringNumberBooleans</span> = [<span class="string">&quot;world&quot;</span>, <span class="number">3</span>, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">true</span>];</span><br></pre></td></tr></table></figure><p>为什么可选元素和其余元素可能是有用的？它允许TypeScript将 <code>tuples</code> 与参数列表相对应。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">readButtonInput</span>(<span class="params">...args: [<span class="built_in">string</span>, <span class="built_in">number</span>, ...<span class="built_in">boolean</span>[]]</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [name, version, ...input] = args;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>基本上等同于：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">readButtonInput</span>(<span class="params">name: <span class="built_in">string</span>, version: <span class="built_in">number</span>, ...input: <span class="built_in">boolean</span>[]</span>) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当你想用一个其余(rest)参数接受可变数量的参数，并且你需要一个最小的元素数量，但你不想引入中间变量时，这很方便。</p><h2 id="6-12-只读元组类型"><a href="#6-12-只读元组类型" class="headerlink" title="6.12 只读元组类型"></a>6.12 只读元组类型</h2><p>关于 <code>tuple</code> 类型的最后一点说明：<code>tuple</code> 类型有只读特性，可以通过在它们前面粘贴一个<code>readonly</code>修饰符来指定——就像数组的速记语法一样。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">doSomething</span>(<span class="params">pair: <span class="keyword">readonly</span> [<span class="built_in">string</span>, <span class="built_in">number</span>]</span>) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>正如你所期望的，在TypeScript中不允许向只读元组的任何属性写入。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">doSomething</span>(<span class="params">pair: <span class="keyword">readonly</span> [<span class="built_in">string</span>, <span class="built_in">number</span>]</span>) &#123;</span><br><span class="line">  pair[<span class="number">0</span>] = <span class="string">&quot;hello!&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://s2.loli.net/2022/02/22/mZUgrFvnJG2a9Qw.png" alt="image-20211127210344032" style="zoom:50%;" /><p>在大多数代码中，元组往往被创建并不被修改，所以在可能的情况下，将类型注释为只读元组是一个很好的默认。这一点也很重要，因为带有 <code>const</code> 断言的数组字面量将被推断为只读元组类型。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> point = [<span class="number">3</span>, <span class="number">4</span>] <span class="keyword">as</span> <span class="keyword">const</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">distanceFromOrigin</span>(<span class="params">[x, y]: [<span class="built_in">number</span>, <span class="built_in">number</span>]</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">sqrt</span>(x ** <span class="number">2</span> + y ** <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">distanceFromOrigin</span>(point);</span><br></pre></td></tr></table></figure><img src="https://s2.loli.net/2022/02/22/GOd6ieyPvTsaxrw.png" alt="image-20211127210654160" style="zoom:50%;" /><p>在这里，<code>distanceFromOrigin</code> 从未修改过它的元素，而是期望一个可变的元组。由于 <code>point</code>的类型被推断为只读的 <code>[3, 4]</code>，它与 <code>[number, number]</code> 不兼容，因为该类型不能保证 <code>point</code> 的元素不被修改。</p><h3 id="特别声明-本文转自-古艺散人老师-，如有需要可前往原文预览查看。"><a href="#特别声明-本文转自-古艺散人老师-，如有需要可前往原文预览查看。" class="headerlink" title="特别声明: 本文转自  古艺散人老师 ，如有需要可前往原文预览查看。"></a>特别声明: 本文转自 <a href="https://github.com/lurongtao/TypeScript"> 古艺散人老师 </a>，如有需要可前往原文预览查看。</h3>]]></content>
      
      
      <categories>
          
          <category> TypeScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> TypeScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1-5、基础篇：函数更多</title>
      <link href="/article/30791/"/>
      <url>/article/30791/</url>
      
        <content type="html"><![CDATA[<h1 id="五、函数更多"><a href="#五、函数更多" class="headerlink" title="五、函数更多"></a>五、函数更多</h1><p>函数是任何应用程序的基本构件，无论它们是本地函数，从另一个模块导入，还是一个类上的方法。它们也是值，就像其他值一样，TypeScript有很多方法来描述如何调用函数。让我们来学习一下如何编写描述函数的类型。</p><h2 id="5-1-函数类型表达式"><a href="#5-1-函数类型表达式" class="headerlink" title="5.1 函数类型表达式"></a>5.1 函数类型表达式</h2><p>描述一个函数的最简单方法是用一个函数类型表达式。这些类型在语法上类似于箭头函数。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">greeter</span>(<span class="params">fn: (a: <span class="built_in">string</span>) =&gt; <span class="built_in">void</span></span>) &#123;</span><br><span class="line">  <span class="title function_">fn</span>(<span class="string">&quot;Hello, World&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">printToConsole</span>(<span class="params">s: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(s);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">greeter</span>(printToConsole);</span><br></pre></td></tr></table></figure><p>语法<code>(a: string) =&gt; void</code>意味着 “有一个参数的函数，名为 <code>a</code>，类型为字符串，没有返回值”。就像函数声明一样，如果没有指定参数类型，它就隐含为 <code>any</code> 类型。</p><p>当然，我们可以用一个类型别名来命名一个函数类型。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">GreetFunction</span> = <span class="function">(<span class="params">a: <span class="built_in">string</span></span>) =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">greeter</span>(<span class="params">fn: GreetFunction</span>) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-2-调用签名"><a href="#5-2-调用签名" class="headerlink" title="5.2 调用签名"></a>5.2 调用签名</h2><p>在JavaScript中，除了可调用之外，函数还可以有属性。然而，函数类型表达式的语法不允许声明属性。如果我们想用属性来描述可调用的东西，我们可以在一个对象类型中写一个<em>调用签名</em>。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">DescribableFunction</span> = &#123;</span><br><span class="line">  <span class="attr">description</span>: <span class="built_in">string</span>;</span><br><span class="line">  (<span class="attr">someArg</span>: <span class="built_in">number</span>): <span class="built_in">boolean</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">doSomething</span>(<span class="params">fn: DescribableFunction</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(fn.<span class="property">description</span> + <span class="string">&quot; returned &quot;</span> + <span class="title function_">fn</span>(<span class="number">6</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn1</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">fn1.<span class="property">description</span> = <span class="string">&quot;balabala...&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">doSomething</span>(fn1);</span><br></pre></td></tr></table></figure><p>注意，与函数类型表达式相比，语法略有不同：在参数列表和返回类型之间使用<code>:</code>而不是<code>=&gt;</code>。</p><h2 id="5-3-构造签名"><a href="#5-3-构造签名" class="headerlink" title="5.3 构造签名"></a>5.3 构造签名</h2><p>JavaScript函数也可以用 <code>new</code> 操作符来调用。TypeScript将这些称为构造函数，因为它们通常会创建一个新的对象。你可以通过在调用签名前面添加 <code>new</code> 关键字来写一个构造签名。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Ctor</span> &#123;</span><br><span class="line">  <span class="attr">s</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">s: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">s</span> = s;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">SomeConstructor</span> = &#123;</span><br><span class="line">  <span class="keyword">new</span> (<span class="attr">s</span>: <span class="built_in">string</span>): <span class="title class_">Ctor</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">ctor: SomeConstructor</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title function_">ctor</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> f = <span class="title function_">fn</span>(<span class="title class_">Ctor</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(f.<span class="property">s</span>);</span><br></pre></td></tr></table></figure><p>有些对象，如 JavaScript 的 <code>Date</code> 对象，可以在有 <code>new</code> 或没有 <code>new</code> 的情况下被调用。你可以在同一类型中任意地结合调用和构造签名。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">CallOrConstruct</span> &#123;</span><br><span class="line">  <span class="keyword">new</span> (<span class="attr">s</span>: <span class="built_in">string</span>): <span class="title class_">Date</span>;</span><br><span class="line">  (n?: <span class="built_in">number</span>): <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">date: CallOrConstruct</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> d = <span class="keyword">new</span> <span class="title function_">date</span>(<span class="string">&quot;2021-11-20&quot;</span>);</span><br><span class="line">  <span class="keyword">let</span> n = <span class="title function_">date</span>(<span class="number">100</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再举一个例子：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">ClockConstructor</span> &#123;</span><br><span class="line">  <span class="keyword">new</span> (<span class="attr">hour</span>: <span class="built_in">number</span>, <span class="attr">minute</span>: <span class="built_in">number</span>): <span class="title class_">ClockInterface</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">ClockInterface</span> &#123;</span><br><span class="line">  <span class="title function_">tick</span>(): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createClock</span>(<span class="params"></span></span><br><span class="line"><span class="params">  ctor: ClockConstructor,</span></span><br><span class="line"><span class="params">  hour: <span class="built_in">number</span>,</span></span><br><span class="line"><span class="params">  minute: <span class="built_in">number</span>,</span></span><br><span class="line"><span class="params"></span>): <span class="title class_">ClockInterface</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title function_">ctor</span>(hour, minute);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DigitalClock</span> <span class="keyword">implements</span> <span class="title class_">ClockInterface</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">h: <span class="built_in">number</span>, m: <span class="built_in">number</span></span>) &#123;&#125;</span><br><span class="line">  <span class="title function_">tick</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;beep beep&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AnalogClock</span> <span class="keyword">implements</span> <span class="title class_">ClockInterface</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">h: <span class="built_in">number</span>, m: <span class="built_in">number</span></span>) &#123;&#125;</span><br><span class="line">  <span class="title function_">tick</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;tick tock&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> digital = <span class="title function_">createClock</span>(<span class="title class_">DigitalClock</span>, <span class="number">12</span>, <span class="number">17</span>);</span><br><span class="line"><span class="keyword">let</span> analog = <span class="title function_">createClock</span>(<span class="title class_">AnalogClock</span>, <span class="number">7</span>, <span class="number">32</span>);</span><br></pre></td></tr></table></figure><h2 id="5-4-泛型函数"><a href="#5-4-泛型函数" class="headerlink" title="5.4 泛型函数"></a>5.4 泛型函数</h2><p>在写一个函数时，输入的类型与输出的类型有关，或者两个输入的类型以某种方式相关，这是常见的。让我们考虑一下一个返回数组中第一个元素的函数。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">firstElement</span>(<span class="params">arr: <span class="built_in">any</span>[]</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> arr[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个函数完成了它的工作，但不幸的是它的返回类型是 <code>any</code>。如果该函数返回数组元素的类型会更好。</p><p>在TypeScript中，当我们想描述两个值之间的对应关系时，会使用泛型。我们通过在函数签名中声明一个类型参数来做到这一点：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> firstElement&lt;<span class="title class_">Type</span>&gt;(<span class="attr">arr</span>: <span class="title class_">Type</span>[]): <span class="title class_">Type</span> | <span class="literal">undefined</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> arr[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过给这个函数添加一个类型参数 <code>Type</code>，并在两个地方使用它，我们已经在函数的输入（数组）和输出（返回值）之间建立了一个联系。现在当我们调用它时，一个更具体的类型就出来了：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// s 是 &#x27;string&#x27; 类型</span></span><br><span class="line"><span class="keyword">const</span> s = <span class="title function_">firstElement</span>([<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>]);</span><br><span class="line"><span class="comment">// n 是 &#x27;number&#x27; 类型</span></span><br><span class="line"><span class="keyword">const</span> n = <span class="title function_">firstElement</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</span><br><span class="line"><span class="comment">// u 是 undefined 类型</span></span><br><span class="line"><span class="keyword">const</span> u = <span class="title function_">firstElement</span>([]);</span><br></pre></td></tr></table></figure><h3 id="5-4-1-类型推断"><a href="#5-4-1-类型推断" class="headerlink" title="5.4.1 类型推断"></a>5.4.1 类型推断</h3><p>请注意，在这个例子中，我们没有必要指定类型。类型是由TypeScript推断出来的–自动选择。</p><p>我们也可以使用多个类型参数。例如，一个独立版本的map看起来是这样的。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> map&lt;<span class="title class_">Input</span>, <span class="title class_">Output</span>&gt;(</span><br><span class="line">  <span class="attr">arr</span>: <span class="title class_">Input</span>[],</span><br><span class="line">  <span class="attr">func</span>: <span class="function">(<span class="params">arg: Input</span>) =&gt;</span> <span class="title class_">Output</span>,</span><br><span class="line">): <span class="title class_">Output</span>[] &#123;</span><br><span class="line">  <span class="keyword">return</span> arr.<span class="title function_">map</span>(func);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 参数&#x27;n&#x27;是&#x27;字符串&#x27;类型。</span></span><br><span class="line"><span class="comment">// &#x27;parsed&#x27;是&#x27;number[]&#x27;类型。</span></span><br><span class="line"><span class="keyword">const</span> parsed = <span class="title function_">map</span>([<span class="string">&quot;1&quot;</span>, <span class="string">&quot;2&quot;</span>, <span class="string">&quot;3&quot;</span>], <span class="function">(<span class="params">n</span>) =&gt;</span> <span class="built_in">parseInt</span>(n));</span><br></pre></td></tr></table></figure><p>请注意，在这个例子中，TypeScript可以推断出输入类型参数的类型（从给定的字符串数组），以及基于函数表达式的返回值（数字）的输出类型参数。</p><h3 id="5-4-2-限制条件"><a href="#5-4-2-限制条件" class="headerlink" title="5.4.2 限制条件"></a>5.4.2 限制条件</h3><p>我们已经写了一些通用函数，可以对任何类型的值进行操作。有时我们想把两个值联系起来，但只能对某个值的子集进行操作。在这种情况下，我们可以使用一个约束条件来限制一个类型参数可以接受的类型。</p><p>让我们写一个函数，返回两个值中较长的值。要做到这一点，我们需要一个长度属性，是一个数字。我们通过写一个扩展子句将类型参数限制在这个类型上。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> longest&lt;<span class="title class_">Type</span> <span class="keyword">extends</span> &#123; <span class="attr">length</span>: <span class="built_in">number</span> &#125;&gt;(<span class="attr">a</span>: <span class="title class_">Type</span>, <span class="attr">b</span>: <span class="title class_">Type</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (a.<span class="property">length</span> &gt;= b.<span class="property">length</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> b;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// longerArray 的类型是 &#x27;number[]&#x27;</span></span><br><span class="line"><span class="keyword">const</span> longerArray = <span class="title function_">longest</span>([<span class="number">1</span>, <span class="number">2</span>], [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</span><br><span class="line"><span class="comment">// longerString 是 &#x27;alice&#x27;|&#x27;bob&#x27; 的类型。</span></span><br><span class="line"><span class="keyword">const</span> longerString = <span class="title function_">longest</span>(<span class="string">&quot;alice&quot;</span>, <span class="string">&quot;bob&quot;</span>);</span><br><span class="line"><span class="comment">// 错误! 数字没有&#x27;长度&#x27;属性</span></span><br><span class="line"><span class="keyword">const</span> notOK = <span class="title function_">longest</span>(<span class="number">10</span>, <span class="number">100</span>);</span><br></pre></td></tr></table></figure><img src="https://s2.loli.net/2022/02/22/WjBVzACtyJ87q1H.png" alt="image-20211121103833933" style="zoom:50%;" /><p>在这个例子中，有一些有趣的事情需要注意。我们允许TypeScript推断 <code>longest</code> 的返回类型。返回类型推断也适用于通用函数。</p><p>因为我们将 Type 约束为<code> &#123; length: number &#125;</code>，所以我们被允许访问 <code>a</code> 和 <code>b</code> 参数的 <code>.length</code> 属性。如果没有类型约束，我们就不能访问这些属性，因为这些值可能是一些没有长度属性的其他类型。</p><p><code>longerArray</code> 和 <code>longerString</code> 的类型是根据参数推断出来的。记住，泛型就是把两个或多个具有相同类型的值联系起来。</p><p>最后，正如我们所希望的，对 <code>longest(10, 100)</code> 的调用被拒绝了，因为数字类型没有一个<code>.length</code>属性。</p><h3 id="5-4-3-使用受限值"><a href="#5-4-3-使用受限值" class="headerlink" title="5.4.3 使用受限值"></a>5.4.3 使用受限值</h3><p>这里有一个使用通用约束条件时的常见错误。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> minimumLength&lt;<span class="title class_">Type</span> <span class="keyword">extends</span> &#123; <span class="attr">length</span>: <span class="built_in">number</span> &#125;&gt;(</span><br><span class="line">  <span class="attr">obj</span>: <span class="title class_">Type</span>,</span><br><span class="line">  <span class="attr">minimum</span>: <span class="built_in">number</span>,</span><br><span class="line">): <span class="title class_">Type</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (obj.<span class="property">length</span> &gt;= minimum) &#123;</span><br><span class="line">    <span class="keyword">return</span> obj;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="attr">length</span>: minimum &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/img/TypeScript/04-12.png" alt="image-20211121104538424" style="zoom:40%;" /><p>看起来这个函数没有问题–Type被限制为{ length: number }，而且这个函数要么返回Type，要么返回一个与该限制相匹配的值。问题是，该函数承诺返回与传入的对象相同的类型，而不仅仅是与约束条件相匹配的一些对象。如果这段代码是合法的，你可以写出肯定无法工作的代码。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// &#x27;arr&#x27; 获得值： &#123; length: 6 &#125;</span></span><br><span class="line"><span class="keyword">const</span> arr = <span class="title function_">minimumLength</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="number">6</span>);</span><br><span class="line"><span class="comment">//在此崩溃，因为数组有一个&#x27;切片&#x27;方法，但没有返回对象!</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">slice</span>(<span class="number">0</span>));</span><br></pre></td></tr></table></figure><p>![image-20211121105340359](Users&#x2F;felix&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20211121105340359.png)</p><h3 id="5-4-4-指定类型参数"><a href="#5-4-4-指定类型参数" class="headerlink" title="5.4.4 指定类型参数"></a>5.4.4 指定类型参数</h3><p>TypeScript 通常可以推断出通用调用中的预期类型参数，但并非总是如此。例如，假设你写了一个函数来合并两个数组：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> combine&lt;<span class="title class_">Type</span>&gt;(<span class="attr">arr1</span>: <span class="title class_">Type</span>[], <span class="attr">arr2</span>: <span class="title class_">Type</span>[]): <span class="title class_">Type</span>[] &#123;</span><br><span class="line">  <span class="keyword">return</span> arr1.<span class="title function_">concat</span>(arr2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通常情况下，用不匹配的数组调用这个函数是一个错误：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = <span class="title function_">combine</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="string">&quot;hello&quot;</span>]);</span><br></pre></td></tr></table></figure><img src="https://s2.loli.net/2022/02/22/a7IfnzN9h3mAHKk.png" alt="image-20211121110056686" style="zoom:40%;" /><p>然而，如果你打算这样做，你可以手动指定类型：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = combine&lt;<span class="built_in">string</span> | <span class="built_in">number</span>&gt;([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="string">&quot;hello&quot;</span>]);</span><br></pre></td></tr></table></figure><h3 id="5-4-5-编写优秀通用函数的准则"><a href="#5-4-5-编写优秀通用函数的准则" class="headerlink" title="5.4.5 编写优秀通用函数的准则"></a>5.4.5 编写优秀通用函数的准则</h3><p>编写泛型函数很有趣，而且很容易被类型参数所迷惑。有太多的类型参数或在不需要的地方使用约束，会使推理不那么成功，使你的函数的调用者感到沮丧。</p><ul><li><strong>类型参数下推</strong></li></ul><p>下面是两种看似相似的函数写法。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> firstElement1&lt;<span class="title class_">Type</span>&gt;(<span class="attr">arr</span>: <span class="title class_">Type</span>[]) &#123;</span><br><span class="line">  <span class="keyword">return</span> arr[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> firstElement2&lt;<span class="title class_">Type</span> <span class="keyword">extends</span> <span class="built_in">any</span>[]&gt;(<span class="attr">arr</span>: <span class="title class_">Type</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> arr[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// a: number (推荐)</span></span><br><span class="line"><span class="keyword">const</span> a = <span class="title function_">firstElement1</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</span><br><span class="line"><span class="comment">// b: any (不推荐)</span></span><br><span class="line"><span class="keyword">const</span> b = <span class="title function_">firstElement2</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</span><br></pre></td></tr></table></figure><p>乍一看，这些可能是相同的，但 <code>firstElement1</code> 是写这个函数的一个更好的方法。它的推断返回类型是Type，但 <code>firstElement2</code> 的推断返回类型是 <code>any</code>，因为TypeScript必须使用约束类型来解析<code>arr[0]</code>表达式，而不是在调用期间 “等待 “解析该元素。</p><blockquote><p><strong>规则：</strong>在可能的情况下，使用类型参数本身，而不是对其进行约束</p></blockquote><ul><li><strong>使用更少的类型参数</strong></li></ul><p>下面是另一对类似的函数。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> filter1&lt;<span class="title class_">Type</span>&gt;(<span class="attr">arr</span>: <span class="title class_">Type</span>[], <span class="attr">func</span>: <span class="function">(<span class="params">arg: Type</span>) =&gt;</span> <span class="built_in">boolean</span>): <span class="title class_">Type</span>[] &#123;</span><br><span class="line">  <span class="keyword">return</span> arr.<span class="title function_">filter</span>(func);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> filter2&lt;<span class="title class_">Type</span>, <span class="title class_">Func</span> <span class="keyword">extends</span> (<span class="attr">arg</span>: <span class="title class_">Type</span>) =&gt; <span class="built_in">boolean</span>&gt;(</span><br><span class="line">  <span class="attr">arr</span>: <span class="title class_">Type</span>[],</span><br><span class="line">  <span class="attr">func</span>: <span class="title class_">Func</span>,</span><br><span class="line">): <span class="title class_">Type</span>[] &#123;</span><br><span class="line">  <span class="keyword">return</span> arr.<span class="title function_">filter</span>(func);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们已经创建了一个类型参数 <code>Func</code>，它并不涉及两个值。这总是一个值得标记的坏习惯，因为它意味着想要指定类型参数的调用者必须无缘无故地手动指定一个额外的类型参数。<code>Func</code>除了使函数更难阅读和推理外，什么也没做。</p><blockquote><p><strong>规则：</strong>总是尽可能少地使用类型参数</p></blockquote><ul><li><strong>类型参数应出现两次</strong></li></ul><p>有时我们会忘记，一个函数可能不需要是通用的：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> greet&lt;<span class="title class_">Str</span> <span class="keyword">extends</span> <span class="built_in">string</span>&gt;(<span class="attr">s</span>: <span class="title class_">Str</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hello, &quot;</span> + s);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">greet</span>(<span class="string">&quot;world&quot;</span>);</span><br></pre></td></tr></table></figure><p>我们完全可以写一个更简单的版本：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">greet</span>(<span class="params">s: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hello, &quot;</span> + s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>记住，类型参数是用来关联多个值的类型的。如果一个类型参数在函数签名中只使用一次，那么它就没有任何关系。</p><blockquote><p><strong>规则：</strong>如果一个类型的参数只出现在一个地方，请重新考虑你是否真的需要它</p></blockquote><h2 id="5-5-可选参数"><a href="#5-5-可选参数" class="headerlink" title="5.5 可选参数"></a>5.5 可选参数</h2><p>JavaScript中的函数经常需要一个可变数量的参数。例如，<code>number</code> 的 <code>toFixed</code>方法需要一个可选的数字计数。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params">n: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(n.<span class="title function_">toFixed</span>()); <span class="comment">// 0 个参数</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(n.<span class="title function_">toFixed</span>(<span class="number">3</span>)); <span class="comment">// 1 个参数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以在TypeScript中通过将参数用 <code>?</code>标记：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params">x?: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">f</span>(); <span class="comment">// 正确</span></span><br><span class="line"><span class="title function_">f</span>(<span class="number">10</span>); <span class="comment">// 正确</span></span><br></pre></td></tr></table></figure><p>虽然参数被指定为 <code>number</code> 类型，但 <code>x</code> 参数实际上将具有 <code>number | undefined</code> 类型，因为在JavaScript中未指定的参数会得到 <code>undefined</code> 的值。</p><p>你也可以提供一个参数默认值。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params">x = <span class="number">10</span></span>) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在在 <code>f</code> 的主体中，<code>x</code> 将具有 <code>number</code> 类型，因为任何 <code>undefined</code> 的参数将被替换为 <code>10</code>。请注意，当一个参数是可选的，调用者总是可以传递未定义的参数，因为这只是模拟一个 “丢失 “的参数：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="keyword">function</span> <span class="title function_">f</span>(<span class="params">x?: <span class="built_in">number</span></span>): <span class="built_in">void</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 以下调用都是正确的</span></span><br><span class="line"><span class="title function_">f</span>();</span><br><span class="line"><span class="title function_">f</span>(<span class="number">10</span>);</span><br><span class="line"><span class="title function_">f</span>(<span class="literal">undefined</span>);</span><br></pre></td></tr></table></figure><h3 id="5-5-1-回调中的可选参数"><a href="#5-5-1-回调中的可选参数" class="headerlink" title="5.5.1 回调中的可选参数"></a>5.5.1 回调中的可选参数</h3><p>一旦你了解了可选参数和函数类型表达式，在编写调用回调的函数时就很容易犯以下错误：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">myForEach</span>(<span class="params">arr: <span class="built_in">any</span>[], callback: (arg: <span class="built_in">any</span>, index?: <span class="built_in">number</span>) =&gt; <span class="built_in">void</span></span>) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="title function_">callback</span>(arr[i], i);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们在写 <code>index?</code> 作为一个可选参数时，通常是想让这些调用都是合法的：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="title function_">myForEach</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="function">(<span class="params">a</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(a));</span><br><span class="line"><span class="title function_">myForEach</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="function">(<span class="params">a, i</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(a, i));</span><br></pre></td></tr></table></figure><p>这实际上意味着回调可能会被调用，只有一个参数。换句话说，该函数定义说，实现可能是这样的：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">myForEach</span>(<span class="params">arr: <span class="built_in">any</span>[], callback: (arg: <span class="built_in">any</span>, index?: <span class="built_in">number</span>) =&gt; <span class="built_in">void</span></span>) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="comment">// 我现在不想提供索引</span></span><br><span class="line">    <span class="title function_">callback</span>(arr[i]);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>反过来，TypeScript会强制执行这个意思，并发出实际上不可能的错误：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="title function_">myForEach</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="function">(<span class="params">a, i</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(i.<span class="title function_">toFixed</span>());</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><img src="/img/TypeScript/04-14.png" alt="image-20211121151911039" style="zoom:40%;" /><p>在JavaScript中，如果你调用一个形参多于实参的函数，额外的参数会被简单地忽略。TypeScript的行为也是如此。参数较少的函数（相同的类型）总是可以取代参数较多的函数的位置。</p><blockquote><p>当为回调写一个函数类型时，永远不要写一个可选参数，除非你打算在不传递该参数的情况下调用函数。</p></blockquote><h2 id="5-6-函数重载"><a href="#5-6-函数重载" class="headerlink" title="5.6 函数重载"></a>5.6 函数重载</h2><p>一些 JavaScript 函数可以在不同的参数数量和类型中被调用。例如，你可能会写一个函数来产生一个Date，它需要一个时间戳（一个参数）或一个月&#x2F;日&#x2F;年规格（三个参数）。</p><p>在TypeScript中，我们可以通过编写重载签名来指定一个可以以不同方式调用的函数。要做到这一点，要写一些数量的函数签名（通常是两个或更多），然后是函数的主体：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">makeDate</span>(<span class="params">timestamp: <span class="built_in">number</span></span>): <span class="title class_">Date</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">makeDate</span>(<span class="params">m: <span class="built_in">number</span>, d: <span class="built_in">number</span>, y: <span class="built_in">number</span></span>): <span class="title class_">Date</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">makeDate</span>(<span class="params">mOrTimestamp: <span class="built_in">number</span>, d?: <span class="built_in">number</span>, y?: <span class="built_in">number</span></span>): <span class="title class_">Date</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (d !== <span class="literal">undefined</span> &amp;&amp; y !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Date</span>(y, mOrTimestamp, d);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Date</span>(mOrTimestamp);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> d1 = <span class="title function_">makeDate</span>(<span class="number">12345678</span>);</span><br><span class="line"><span class="keyword">const</span> d2 = <span class="title function_">makeDate</span>(<span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>);</span><br><span class="line"><span class="keyword">const</span> d3 = <span class="title function_">makeDate</span>(<span class="number">1</span>, <span class="number">3</span>);</span><br></pre></td></tr></table></figure><img src="/img/TypeScript/04-15.png" alt="image-20211121153802236" style="zoom:42%;" /><p>在这个例子中，我们写了两个重载：一个接受一个参数，另一个接受三个参数。这前两个签名被称为重载签名。</p><p>然后，我们写了一个具有兼容签名的函数实现。函数有一个实现签名，但这个签名不能被直接调用。即使我们写了一个在所需参数之后有两个可选参数的函数，它也不能以两个参数被调用！</p><h3 id="5-6-1-重载签名和实现签名"><a href="#5-6-1-重载签名和实现签名" class="headerlink" title="5.6.1 重载签名和实现签名"></a>5.6.1 重载签名和实现签名</h3><p>这是一个常见的混乱来源。通常我们会写这样的代码，却不明白为什么会出现错误：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">x: <span class="built_in">string</span></span>): <span class="built_in">void</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 期望能够以零参数调用</span></span><br><span class="line"><span class="title function_">fn</span>();</span><br></pre></td></tr></table></figure><img src="https://s2.loli.net/2022/02/22/2PbtdUgEz5Ts3Dr.png" alt="image-20211121154720160" style="zoom:50%;" /><p>同样，用于编写函数体的签名不能从外面 “看到”。</p><blockquote><p>实现的签名从外面是看不到的。在编写重载函数时，你应该总是在函数的实现上面有两个或多个签名。</p></blockquote><p>实现签名也必须与重载签名兼容。例如，这些函数有错误，因为实现签名没有以正确的方式匹配重载：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">x: <span class="built_in">boolean</span></span>): <span class="built_in">void</span>;</span><br><span class="line"><span class="comment">// 参数类型不正确</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">x: <span class="built_in">string</span></span>): <span class="built_in">void</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">x: <span class="built_in">boolean</span></span>) &#123;&#125;</span><br></pre></td></tr></table></figure><img src="https://s2.loli.net/2022/02/22/saCfOyHuShpilg3.png" alt="image-20211121160302934" style="zoom:50%;" /><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">x: <span class="built_in">string</span></span>): <span class="built_in">string</span>;</span><br><span class="line"><span class="comment">// 返回类型不正确</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">x: <span class="built_in">number</span></span>): <span class="built_in">boolean</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">x: <span class="built_in">string</span> | <span class="built_in">number</span></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;oops&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://s2.loli.net/2022/02/22/4OAqJInZEdRftuv.png" alt="image-20211121160413329" style="zoom: 50%;" /><h3 id="5-6-2-编写好的重载"><a href="#5-6-2-编写好的重载" class="headerlink" title="5.6.2 编写好的重载"></a>5.6.2 编写好的重载</h3><p>和泛型一样，在使用函数重载时，有一些准则是你应该遵循的。遵循这些原则将使你的函数更容易调用，更容易理解，更容易实现。</p><p>让我们考虑一个返回字符串或数组长度的函数：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">len</span>(<span class="params">s: <span class="built_in">string</span></span>): <span class="built_in">number</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">len</span>(<span class="params">arr: <span class="built_in">any</span>[]</span>): <span class="built_in">number</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">len</span>(<span class="params">x: <span class="built_in">any</span></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> x.<span class="property">length</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个函数是好的；我们可以用字符串或数组来调用它。然而，我们不能用一个可能是字符串或数组的值来调用它，因为TypeScript只能将一个函数调用解析为一个重载：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="title function_">len</span>(<span class="string">&quot;&quot;</span>); <span class="comment">// OK</span></span><br><span class="line"><span class="title function_">len</span>([<span class="number">0</span>]); <span class="comment">// OK</span></span><br><span class="line"><span class="title function_">len</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() &gt; <span class="number">0.5</span> ? <span class="string">&quot;hello&quot;</span> : [<span class="number">0</span>]);</span><br></pre></td></tr></table></figure><img src="https://s2.loli.net/2022/02/22/6NRbiq5Dp3ulKhg.png" alt="image-20211121161500523" style="zoom:50%;" /><p>因为两个重载都有相同的参数数量和相同的返回类型，我们可以改写一个非重载版本的函数：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">len</span>(<span class="params">x: <span class="built_in">any</span>[] | <span class="built_in">string</span></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> x.<span class="property">length</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">len</span>(<span class="string">&quot;&quot;</span>); <span class="comment">// OK</span></span><br><span class="line"><span class="title function_">len</span>([<span class="number">0</span>]); <span class="comment">// OK</span></span><br><span class="line"><span class="title function_">len</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() &gt; <span class="number">0.5</span> ? <span class="string">&quot;hello&quot;</span> : [<span class="number">0</span>]); <span class="comment">// OK</span></span><br></pre></td></tr></table></figure><p>这就好得多了! 调用者可以用任何一种值来调用它，而且作为额外的奖励，我们不需要找出一个正确的实现签名。</p><blockquote><p>在可能的情况下，总是倾向于使用联合类型的参数而不是重载参数</p></blockquote><h3 id="5-6-3-函数内This的声明"><a href="#5-6-3-函数内This的声明" class="headerlink" title="5.6.3 函数内This的声明"></a>5.6.3 函数内<code>This</code>的声明</h3><p>TypeScript会通过代码流分析来推断函数中的 <code>this</code> 应该是什么，比如下面的例子：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> user = &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="number">123</span>,</span><br><span class="line"></span><br><span class="line">  <span class="attr">admin</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">becomeAdmin</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">admin</span> = <span class="literal">true</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>TypeScript理解函数 <code>user.becomeAdmin</code> 有一个对应的 <code>this</code>，它是外部对象 <code>user</code>。这个对于很多情况来说已经足够了，但是有很多情况下你需要更多的控制 <code>this</code> 代表什么对象。JavaScript规范规定，你不能有一个叫 <code>this</code>的参数，所以TypeScript使用这个语法空间，让你在函数体中声明<code>this</code>的类型。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">User</span> &#123;</span><br><span class="line">  <span class="attr">admin</span>: <span class="built_in">boolean</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> DB &#123;</span><br><span class="line">  <span class="title function_">filterUsers</span>(<span class="attr">filter</span>: <span class="function">(<span class="params"><span class="variable language_">this</span>: User</span>) =&gt;</span> <span class="built_in">boolean</span>): <span class="title class_">User</span>[];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">db</span>: <span class="variable constant_">DB</span> = &#123;</span><br><span class="line">  <span class="attr">filterUsers</span>: <span class="function">(<span class="params">filter: (<span class="variable language_">this</span>: User) =&gt; <span class="built_in">boolean</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> user1 = &#123;</span><br><span class="line">      <span class="attr">admin</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">let</span> user2 = &#123;</span><br><span class="line">      <span class="attr">admin</span>: <span class="literal">false</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> [user1, user2];</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> admins = db.<span class="title function_">filterUsers</span>(<span class="keyword">function</span> (<span class="params"><span class="variable language_">this</span>: User</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">admin</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>这种模式在回调式API中很常见，另一个对象通常控制你的函数何时被调用。注意，你需要使用函数而不是箭头函数来获得这种行为。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">User</span> &#123;</span><br><span class="line">  <span class="attr">admin</span>: <span class="built_in">boolean</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> DB &#123;</span><br><span class="line">  <span class="title function_">filterUsers</span>(<span class="attr">filter</span>: <span class="function">(<span class="params"><span class="variable language_">this</span>: User</span>) =&gt;</span> <span class="built_in">boolean</span>): <span class="title class_">User</span>[];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">db</span>: <span class="variable constant_">DB</span> = &#123;</span><br><span class="line">  <span class="attr">filterUsers</span>: <span class="function">(<span class="params">filter: (<span class="variable language_">this</span>: User) =&gt; <span class="built_in">boolean</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> user1 = &#123;</span><br><span class="line">      <span class="attr">admin</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">let</span> user2 = &#123;</span><br><span class="line">      <span class="attr">admin</span>: <span class="literal">false</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> [user1, user2];</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 不能为箭头函数</span></span><br><span class="line"><span class="keyword">const</span> admins = db.<span class="title function_">filterUsers</span>(<span class="function">() =&gt;</span> <span class="variable language_">this</span>.<span class="property">admin</span>);</span><br></pre></td></tr></table></figure><img src="https://s2.loli.net/2022/02/22/vYImhS8FQOHgJfT.png" alt="image-20211121164923229" style="zoom:40%;" /><h2 id="5-7-需要了解的其他类型"><a href="#5-7-需要了解的其他类型" class="headerlink" title="5.7 需要了解的其他类型"></a>5.7 需要了解的其他类型</h2><p>有一些额外的类型你会想要认识，它们在处理函数类型时经常出现。像所有的类型一样，你可以在任何地方使用它们，但这些类型在函数的上下文中特别相关。</p><h3 id="5-7-1-void"><a href="#5-7-1-void" class="headerlink" title="5.7.1 void"></a>5.7.1 <code>void</code></h3><p><code>void</code>表示没有返回值的函数的返回值。当一个函数没有任何返回语句，或者没有从这些返回语句中返回任何明确的值时，它都是推断出来的类型。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 推断出的返回类型是void</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">noop</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在JavaScript中，一个不返回任何值的函数将隐含地返回<code>undefinded</code>的值。然而，在TypeScript中，<code>void</code>和<code>undefined</code>是不一样的。在本章末尾有进一步的细节。</p><blockquote><p><code>void</code>与<code>undefined</code>不一样。</p></blockquote><h3 id="5-7-2-object"><a href="#5-7-2-object" class="headerlink" title="5.7.2 object"></a>5.7.2 <code>object</code></h3><p>特殊类型 <code>object</code> 指的是任何不是基元的值（<code>string</code>、<code>number</code>、<code>bigint</code>、<code>boolean</code>、<code>symbol</code>、<code>null </code>或 <code>undefined</code>）。这与空对象类型<code>&#123; &#125;</code>不同，也与全局类型 <code>Object</code> 不同。你很可能永远不会使用 <code>Object</code>。</p><blockquote><p><code>object</code>不是<code>Object</code>。始终使用<code>object</code>!</p></blockquote><p>请注意，在JavaScript中，函数值是对象。它们有属性，在它们的原型链中有<code>Object.prototype</code>，是 <code>Object</code>的实例，你可以对它们调用 <code>Object.key</code>，等等。由于这个原因，函数类型在TypeScript中被认为是<code>object</code>。</p><h3 id="5-7-3-unknown"><a href="#5-7-3-unknown" class="headerlink" title="5.7.3 unknown"></a>5.7.3 <code>unknown</code></h3><p><code>unknown</code>类型代表任何值。这与 <code>any</code> 类型类似，但更安全，因为对未知 <code>unknown</code> 值做任何事情都是不合法的。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">f1</span>(<span class="params">a: <span class="built_in">any</span></span>) &#123;</span><br><span class="line">  a.<span class="title function_">b</span>(); <span class="comment">// 正确</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f2</span>(<span class="params">a: <span class="built_in">unknown</span></span>) &#123;</span><br><span class="line">  a.<span class="title function_">b</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://s2.loli.net/2022/02/22/pl7s6ZDr8QKAJgh.png" alt="image-20211121172520948" style="zoom:50%;" /><p>这在描述函数类型时很有用，因为你可以描述接受任何值的函数，而不需要在函数体中有 <code>any</code> 值。</p><p>反之，你可以描述一个返回未知类型的值的函数：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">safeParse</span>(<span class="params">s: <span class="built_in">string</span></span>): <span class="built_in">unknown</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">JSON</span>.<span class="title function_">parse</span>(s);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 需要小心对待&#x27;obj&#x27;!</span></span><br><span class="line"><span class="keyword">const</span> obj = <span class="title function_">safeParse</span>(someRandomString);</span><br></pre></td></tr></table></figure><h3 id="5-7-4-never"><a href="#5-7-4-never" class="headerlink" title="5.7.4 never"></a>5.7.4 <code>never</code></h3><p>有些函数永远不会返回一个值：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fail</span>(<span class="params">msg: <span class="built_in">string</span></span>): <span class="built_in">never</span> &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(msg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>never</code>类型表示永远不会被观察到的值。在一个返回类型中，这意味着函数抛出一个异常或终止程序的执行。</p><p><code>never</code>也出现在TypeScript确定一个 <code>union</code> 中没有任何东西的时候。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">x: <span class="built_in">string</span> | <span class="built_in">number</span></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> x === <span class="string">&quot;string&quot;</span>) &#123;</span><br><span class="line">    <span class="comment">// 做一些事</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> x === <span class="string">&quot;number&quot;</span>) &#123;</span><br><span class="line">    <span class="comment">// 再做一些事</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    x; <span class="comment">// &#x27;never&#x27;!</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-7-5-Function"><a href="#5-7-5-Function" class="headerlink" title="5.7.5 Function"></a>5.7.5 <code>Function</code></h3><p>全局性的 <code>Function</code> 类型描述了诸如 <code>bind</code>、<code>call</code>、<code>apply</code>和其他存在于JavaScript中所有函数值的属性。它还有一个特殊的属性，即 <code>Function</code> 类型的值总是可以被调用；这些调用返回 <code>any</code>。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">doSomething</span>(<span class="params">f: <span class="built_in">Function</span></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">f</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是一个无类型的函数调用，一般来说最好避免，因为 <code>any</code> 返回类型都不安全。</p><p>如果你需要接受一个任意的函数，但不打算调用它，一般来说，<code>() =&gt; void</code>的类型比较安全。</p><h2 id="5-8-参数展开运算符"><a href="#5-8-参数展开运算符" class="headerlink" title="5.8 参数展开运算符"></a>5.8 参数展开运算符</h2><h3 id="5-8-1-形参展开-Rest-Parameters"><a href="#5-8-1-形参展开-Rest-Parameters" class="headerlink" title="5.8.1 形参展开(Rest Parameters)"></a>5.8.1 形参展开(Rest Parameters)</h3><p>除了使用可选参数或重载来制作可以接受各种固定参数数量的函数之外，我们还可以使用休止参数来定义接受无限制数量的参数的函数。</p><p><code>rest</code>参数出现在所有其他参数之后，并使用<code>...</code>的语法：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">multiply</span>(<span class="params">n: <span class="built_in">number</span>, ...m: <span class="built_in">number</span>[]</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> m.<span class="title function_">map</span>(<span class="function">(<span class="params">x</span>) =&gt;</span> n * x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// &#x27;a&#x27; 获得的值 [10, 20, 30, 40]</span></span><br><span class="line"><span class="keyword">const</span> a = <span class="title function_">multiply</span>(<span class="number">10</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>);</span><br></pre></td></tr></table></figure><p>在TypeScript中，这些参数的类型注解是隐含的 <code>any[]</code>，而不是<code>any</code>，任何给出的类型注解必须是<code>Array&lt;T&gt;</code>或<code>T[]</code>的形式，或一个元组类型（我们将在后面学习）。</p><h3 id="5-8-2-实参展开-Rest-Arguments"><a href="#5-8-2-实参展开-Rest-Arguments" class="headerlink" title="5.8.2 实参展开(Rest Arguments)"></a>5.8.2 实参展开(Rest Arguments)</h3><p>反之，我们可以使用 <code>spread</code> 语法从数组中提供可变数量的参数。例如，数组的 <code>push</code> 方法需要任意数量的参数。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">const</span> arr2 = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line">arr1.<span class="title function_">push</span>(...arr2);</span><br></pre></td></tr></table></figure><p>请注意，一般来说，TypeScript并不假定数组是不可变的。这可能会导致一些令人惊讶的行为。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 推断的类型是 number[] -- &quot;一个有零或多个数字的数组&quot;。</span></span><br><span class="line"><span class="comment">// 不专指两个数字</span></span><br><span class="line"><span class="keyword">const</span> args = [<span class="number">8</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">const</span> angle = <span class="title class_">Math</span>.<span class="title function_">atan2</span>(...args);</span><br></pre></td></tr></table></figure><img src="/img/TypeScript/05-06.png" alt="image-20211122191044837" style="zoom: 50%;" /><p>这种情况的最佳解决方案取决于你的代码，但一般来说，<code>const context</code> 是最直接的解决方案。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 推断为2个长度的元组</span></span><br><span class="line"><span class="keyword">const</span> args = [<span class="number">8</span>, <span class="number">5</span>] <span class="keyword">as</span> <span class="keyword">const</span>;</span><br><span class="line"><span class="comment">// 正确</span></span><br><span class="line"><span class="keyword">const</span> angle = <span class="title class_">Math</span>.<span class="title function_">atan2</span>(...args);</span><br></pre></td></tr></table></figure><h2 id="5-9-参数解构"><a href="#5-9-参数解构" class="headerlink" title="5.9 参数解构"></a>5.9 参数解构</h2><p>你可以使用参数重构来方便地将作为参数提供的对象，解压到函数主体的一个或多个局部变量中。在JavaScript中，它看起来像这样：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">&#123; a, b, c &#125;</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a + b + c);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">sum</span>(&#123; <span class="attr">a</span>: <span class="number">10</span>, <span class="attr">b</span>: <span class="number">3</span>, <span class="attr">c</span>: <span class="number">9</span> &#125;);</span><br></pre></td></tr></table></figure><p>对象的类型注解在解构的语法之后：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">&#123; a, b, c &#125;: &#123; a: <span class="built_in">number</span>; b: <span class="built_in">number</span>; c: <span class="built_in">number</span> &#125;</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a + b + c);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这看起来有点啰嗦，但你也可以在这里使用一个命名的类型：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 与之前的例子相同</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">ABC</span> = &#123; <span class="attr">a</span>: <span class="built_in">number</span>; <span class="attr">b</span>: <span class="built_in">number</span>; <span class="attr">c</span>: <span class="built_in">number</span> &#125;;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">&#123; a, b, c &#125;: ABC</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a + b + c);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-10-函数的可分配性"><a href="#5-10-函数的可分配性" class="headerlink" title="5.10 函数的可分配性"></a>5.10 函数的可分配性</h2><h3 id="5-10-1-返回-void-类型"><a href="#5-10-1-返回-void-类型" class="headerlink" title="5.10.1 返回 void 类型"></a>5.10.1 返回 <code>void</code> 类型</h3><p>函数的 <code>void</code> 返回类型可以产生一些不寻常的，但却是预期的行为。</p><p>返回类型为 <code>void</code> 的上下文类型并不强迫函数不返回东西。另一种说法是，一个具有 <code>void</code>返回类型的上下文函数类型（<code>type vf = () =&gt; void</code>），在实现时，可以返回任何其他的值，但它会被忽略。</p><p>因此，以下<code>（）=&gt; void</code>类型的实现是有效的：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> voidFunc = <span class="function">() =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">f1</span>: voidFunc = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">f2</span>: voidFunc = <span class="function">() =&gt;</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">f3</span>: voidFunc = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>而当这些函数之一的返回值被分配给另一个变量时，它将保留 <code>void</code> 的类型：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> v1 = <span class="title function_">f1</span>();</span><br><span class="line"><span class="keyword">const</span> v2 = <span class="title function_">f2</span>();</span><br><span class="line"><span class="keyword">const</span> v3 = <span class="title function_">f3</span>();</span><br></pre></td></tr></table></figure><p>这种行为的存在使得下面的代码是有效的，即使 <code>Array.prototype.push</code>返回一个数字，而<code>Array.prototype.forEach</code>方法期望一个返回类型为<code>void</code>的函数：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> src = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">const</span> dst = [<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">src.<span class="title function_">forEach</span>(<span class="function">(<span class="params">el</span>) =&gt;</span> dst.<span class="title function_">push</span>(el));</span><br></pre></td></tr></table></figure><p>还有一个需要注意的特殊情况，当一个字面的函数定义有一个 <code>void</code> 的返回类型时，该函数必须不返回任何东西。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">f2</span>(<span class="params"></span>): <span class="built_in">void</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> f3 = <span class="keyword">function</span> (<span class="params"></span>): <span class="built_in">void</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><img src="https://s2.loli.net/2022/02/22/t7q4nWcpJxZz12D.png" alt="image-20211122220703542" style="zoom:50%;" /><h3 id="特别声明-本文转自-古艺散人老师-，如有需要可前往原文预览查看。"><a href="#特别声明-本文转自-古艺散人老师-，如有需要可前往原文预览查看。" class="headerlink" title="特别声明: 本文转自  古艺散人老师 ，如有需要可前往原文预览查看。"></a>特别声明: 本文转自 <a href="https://github.com/lurongtao/TypeScript"> 古艺散人老师 </a>，如有需要可前往原文预览查看。</h3>]]></content>
      
      
      <categories>
          
          <category> TypeScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> TypeScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1-4、基础篇：类型缩小</title>
      <link href="/article/23966/"/>
      <url>/article/23966/</url>
      
        <content type="html"><![CDATA[<h1 id="四、类型缩小"><a href="#四、类型缩小" class="headerlink" title="四、类型缩小"></a>四、类型缩小</h1><p>假设我们有一个名为<code>padLeft</code>的函数：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">padLeft</span>(<span class="params">padding: <span class="built_in">number</span> | <span class="built_in">string</span>, input: <span class="built_in">string</span></span>): <span class="built_in">string</span> &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;尚未实现!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们来扩充一下功能：如果<code>padding</code>是 <code>number</code>，它会将其视为我们想要添加到<code>input</code>的空格数；如果<code>padding</code>是 <code>string</code>，它只在<code>input</code>上做<code>padding</code> 。让我们尝试实现：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">padLeft</span>(<span class="params">padding: <span class="built_in">number</span> | <span class="built_in">string</span>, input: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Array</span>(padding + <span class="number">1</span>).<span class="title function_">join</span>(<span class="string">&quot; &quot;</span>) + input;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/img/TypeScript/04-01.png" alt="image-20211114161343249"></p><p>呃-哦，在<code>padding + 1</code>处我们遇到错误。TypeScript 警告我们，运算符 <code>+</code> 不能应用于类型 <code>string | number</code>和 <code>number</code>，这是对的。换句话说，我们没有明确检查 <code>padding</code>是否为 <code>number</code>，也没有处理它是 <code>string</code> 的情况，所以我们这样做：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">padLeft</span>(<span class="params">padding: <span class="built_in">number</span> | <span class="built_in">string</span>, input: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> padding === <span class="string">&quot;number&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Array</span>(padding + <span class="number">1</span>).<span class="title function_">join</span>(<span class="string">&quot; &quot;</span>) + input;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> padding + input;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果这大部分看起来像无趣的JavaScript代码，这也算是重点吧。除了我们设置的注解之外，这段TypeScript代码看起来就像JavaScript。我们的想法是，TypeScript的类型系统旨在使编写典型的JavaScript代码变得尽可能容易，而不需要弯腰去获得类型安全。</p><p>虽然看起来不多，但实际上有很多东西在这里。就像TypeScript使用静态类型分析运行时的值一样，它在JavaScript的运行时控制流构造上叠加了类型分析，如if&#x2F;else、条件三元组、循环、真实性检查等，这些都会影响到这些类型。</p><p>在我们的if检查中，TypeScript看到 <code>typeof padding ===&quot;number&quot;</code>，并将其理解为一种特殊形式的代码，称为类型保护。TypeScript遵循我们的程序可能采取的执行路径，以分析一个值在特定位置的最具体的可能类型。它查看这些特殊的检查（称为类型防护）和赋值，将类型细化为比声明的更具体的类型的过程被称为缩小。在许多编辑器中，我们可以观察这些类型的变化，我们甚至会在我们的例子中这样做。</p><p>TypeScript 可以理解几种不同的缩小结构。</p><h2 id="4-1-typeof类型守卫"><a href="#4-1-typeof类型守卫" class="headerlink" title="4.1 typeof类型守卫"></a>4.1 <code>typeof</code>类型守卫</h2><p>正如我们所见，JavaScript 支持一个<code>typeof</code>运算符，它可以提供有关我们在运行时拥有的值类型的非常基本的信息。TypeScript 期望它返回一组特定的字符串：</p><ul><li><code>&quot;string&quot;</code></li><li><code>&quot;number&quot;</code></li><li><code>&quot;bigint&quot;</code></li><li><code>&quot;boolean&quot;</code></li><li><code>&quot;symbol&quot;</code></li><li><code>&quot;undefined&quot;</code></li><li><code>&quot;object&quot;</code></li><li><code>&quot;function&quot;</code></li></ul><p>就像我们在 <code>padLeft</code> 中看到的那样，这个运算符经常出现在许多 JavaScript 库中，TypeScript 可以理解为，它缩小在不同分支中的类型。</p><p>在 TypeScript 中，检查<code>typeof</code>的返回值是一种类型保护。因为 TypeScript 对<code>typeof</code>操作进行编码，从而返回不同的值，所以它知道对 JavaScript 做了什么。例如，请注意在上面的列表中，<code>typeof</code>不返回 string <code>null</code>。查看以下示例：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">printAll</span>(<span class="params">strs: <span class="built_in">string</span> | <span class="built_in">string</span>[] | <span class="literal">null</span></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> strs === <span class="string">&quot;object&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> s <span class="keyword">of</span> strs) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(s);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> strs === <span class="string">&quot;string&quot;</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(strs);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 做点事</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://s2.loli.net/2022/02/22/vqyDfKRPZkdzX7j.png" alt="image-20211114164143361" style="zoom:50%;" /><p>在<code>printAll</code>函数中，我们尝试检查<code>strs</code>是否为对象，来代替检查它是否为数组类型（现在可能是强调数组是 JavaScript 中的对象类型的好时机）。但事实证明，在 JavaScript 中，<code>typeof null</code>实际上也是<code>&quot;object&quot;</code>! 这是历史上的不幸事故之一。</p><p>有足够经验的用户可能不会感到惊讶，但并不是每个人都在 JavaScript 中遇到过这种情况；幸运的是，typescript 让我们知道，<code>strs</code>只缩小到<code>string[] | null</code>，而不仅仅是<code>string[]</code>。</p><p>这可能是我们所谓的“真实性”检查的一个很好的过渡。</p><h2 id="4-2-真值缩小"><a href="#4-2-真值缩小" class="headerlink" title="4.2 真值缩小"></a>4.2 真值缩小</h2><p>真值检查是我们在 JavaScript 中经常做的一件事。在 JavaScript 中，我们可以在条件、<code>&amp;&amp;</code>、<code>||</code>、<code>if</code>语句、布尔否定 ( <code>!</code>) 等中使用任何表达式。例如，<code>if</code>语句不希望它们的条件总是具有类型<code>boolean</code>。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getUsersOnlineMessage</span>(<span class="params">numUsersOnline: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (numUsersOnline) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`现在共有 <span class="subst">$&#123;numUsersOnline&#125;</span> 人在线!`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;现在没有人在线. :(&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 JavaScript 中，像这样的<code>if</code>条件语句，首先将它们的条件“强制”转化为<code>boolean</code> 以使其有意义，然后根据结果是<code>true</code>还是<code>false</code>来选择它们的分支。像这面这些值：</p><ul><li><code>0</code></li><li><code>NaN</code></li><li><code>&quot;&quot;</code> （空字符串）</li><li><code>0n</code>（<code>bigint</code>零的版本）</li><li><code>null</code></li><li><code>undefined</code></li></ul><p>以上所有值强制都转换为<code>false</code>，其他值被强制转化为<code>true</code>。你始终可以在<code>Boolean</code>函数中运行值获得<code>boolean</code>，或使用较短的双布尔否定将值强制转换为<code>boolean</code>。（后者的优点是 TypeScript 推断出一个狭窄的文字布尔类型<code>true</code>，而将第一个推断为 <code>boolean</code>类型。）</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 这两个结果都返回 true</span></span><br><span class="line"><span class="title class_">Boolean</span>(<span class="string">&quot;hello&quot;</span>); <span class="comment">// type: boolean, value: true</span></span><br><span class="line">!!<span class="string">&quot;world&quot;</span>; <span class="comment">// type: true, value: true</span></span><br></pre></td></tr></table></figure><p>利用这种行为是相当流行的，尤其是在防范诸如<code>null</code>或<code>undefined</code>之类的值时。例如，让我们尝试将它用于我们的<code>printAll</code>函数。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">printAll</span>(<span class="params">strs: <span class="built_in">string</span> | <span class="built_in">string</span>[] | <span class="literal">null</span></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (strs &amp;&amp; <span class="keyword">typeof</span> strs === <span class="string">&quot;object&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> s <span class="keyword">of</span> strs) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(s);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> strs === <span class="string">&quot;string&quot;</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(strs);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>你会注意到我们已经通过检查<code>strs</code>是否为真，消除了上述错误。这至少可以防止我们在运行代码时出现可怕的错误，例如：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">TypeError: null is not iterable</span><br></pre></td></tr></table></figure><p>但请记住，对原语的真值检查通常容易出错。例如，考虑改写<code>printAll</code>:</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">printAll</span>(<span class="params">strs: <span class="built_in">string</span> | <span class="built_in">string</span>[] | <span class="literal">null</span></span>) &#123;</span><br><span class="line">  <span class="comment">// !!!!!!!!!!!!!!!!</span></span><br><span class="line">  <span class="comment">//  别这样!</span></span><br><span class="line">  <span class="comment">//  原因在下边</span></span><br><span class="line">  <span class="comment">// !!!!!!!!!!!!!!!!</span></span><br><span class="line">  <span class="keyword">if</span> (strs) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> strs === <span class="string">&quot;object&quot;</span>) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">const</span> s <span class="keyword">of</span> strs) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(s);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> strs === <span class="string">&quot;string&quot;</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(strs);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们将整个函数体包装在一个真实的检查中，但这有一个小的缺点：我们可能不再正确处理空字符串的情况。</p><p>TypeScript 在这里根本不会报错，但是如果你不太熟悉 JavaScript，这是值得注意的行为。TypeScript 通常可以帮助你及早发现错误，但是如果你选择对某个值不做<em>任何</em>处理，那么它可以做的就只有这么多，而不会考虑过多的逻辑方面的问题。如果需要，你可以确保使用 linter（程序规范性） 处理此类情况。</p><p>关于通过真实性缩小范围的最后一点，是通过布尔否定<code>!</code>把逻辑从否定分支中过滤掉。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">multiplyAll</span>(<span class="params"></span></span><br><span class="line"><span class="params">  values: <span class="built_in">number</span>[] | <span class="literal">undefined</span>,</span></span><br><span class="line"><span class="params">  factor: <span class="built_in">number</span>,</span></span><br><span class="line"><span class="params"></span>): <span class="built_in">number</span>[] | <span class="literal">undefined</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (!values) &#123;</span><br><span class="line">    <span class="keyword">return</span> values;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> values.<span class="title function_">map</span>(<span class="function">(<span class="params">x</span>) =&gt;</span> x * factor);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-3-等值缩小"><a href="#4-3-等值缩小" class="headerlink" title="4.3 等值缩小"></a>4.3 等值缩小</h2><p>typescript 也使用分支语句做<code>===</code>，<code>!==</code>，<code>==</code>，和<code>!=</code>等值检查，来实现类型缩小。例如：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">example</span>(<span class="params">x: <span class="built_in">string</span> | <span class="built_in">number</span>, y: <span class="built_in">string</span> | <span class="built_in">boolean</span></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (x === y) &#123;</span><br><span class="line">    <span class="comment">// 现在可以在x,y上调用字符串类型的方法了</span></span><br><span class="line">    x.<span class="title function_">toUpperCase</span>();</span><br><span class="line">    y.<span class="title function_">toLowerCase</span>();</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(x);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(y);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当我们在上面的示例中检查<code>x</code>和<code>y</code>是否相等时，TypeScript 知道它们的类型也必须相等。由于<code>string</code>是<code>x</code>和<code>y</code>都可以采用的唯一常见类型，因此TypeScript 知道<code>x</code>、<code>y</code>如果都是<code>string</code>，则程序走第一个分支中 。</p><p>检查特定的字面量值（而不是变量）也有效。在我们关于真值缩小的部分中，我们编写了一个<code>printAll</code>容易出错的函数，因为它没有正确处理空字符串。相反，我们可以做一个特定的检查来阻止<code>null</code>，并且 TypeScript 仍然正确地从<code>strs</code>里移除<code>null</code>。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">printAll</span>(<span class="params">strs: <span class="built_in">string</span> | <span class="built_in">string</span>[] | <span class="literal">null</span></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (strs !== <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> strs === <span class="string">&quot;object&quot;</span>) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">const</span> s <span class="keyword">of</span> strs) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(s);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> strs === <span class="string">&quot;string&quot;</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(strs);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>JavaScript 更宽松的相等性检查<code>==</code>和<code>!=</code>，也能被正确缩小。如果你不熟悉，如何检查某个变量是否<code>== null</code>，因为有时不仅要检查它是否是特定的值<code>null</code>，还要检查它是否可能是<code>undefined</code>。这同样适用于<code>== undefined</code>：它检查一个值是否为<code>null</code>或<code>undefined</code>。现在你只需要这个 <code>==</code>和<code>!=</code>就可以搞定了。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Container</span> &#123;</span><br><span class="line">  <span class="attr">value</span>: <span class="built_in">number</span> | <span class="literal">null</span> | <span class="literal">undefined</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">multiplyValue</span>(<span class="params">container: Container, factor: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">  <span class="comment">// 从类型中排除了undefined 和 null</span></span><br><span class="line">  <span class="keyword">if</span> (container.<span class="property">value</span> != <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(container.<span class="property">value</span>);</span><br><span class="line">    <span class="comment">// 现在我们可以安全地乘以“container.value”了</span></span><br><span class="line">    container.<span class="property">value</span> *= factor;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://s2.loli.net/2022/02/22/tkwKocVjWeRn3XN.png" alt="image-20211115154532180" style="zoom:50%;" /><p>前三个打印是通过的，第四个有问题了。</p><h2 id="4-4-in操作符缩小"><a href="#4-4-in操作符缩小" class="headerlink" title="4.4 in操作符缩小"></a>4.4 <code>in</code>操作符缩小</h2><p>JavaScript 有一个运算符，用于确定对象是否具有某个名称的属性：<code>in</code>运算符。TypeScript 考虑到了这一点，以此来缩小潜在类型的范围。</p><p>例如，使用代码：<code>&quot;value&quot; in x</code>。这里的 <code>&quot;value&quot;</code>是字符串文字，<code>x</code>是联合类型。值为“true”的分支缩小，需要<code>x</code>具有可选或必需属性的类型的值；值为 “false” 的分支缩小，需要具有可选或缺失属性的类型的值。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Fish</span> = &#123; <span class="attr">swim</span>: <span class="function">() =&gt;</span> <span class="built_in">void</span> &#125;;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Bird</span> = &#123; <span class="attr">fly</span>: <span class="function">() =&gt;</span> <span class="built_in">void</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">move</span>(<span class="params">animal: Fish | Bird</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="string">&quot;swim&quot;</span> <span class="keyword">in</span> animal) &#123;</span><br><span class="line">    <span class="keyword">return</span> animal.<span class="title function_">swim</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> animal.<span class="title function_">fly</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另外，可选属性还将存在于缩小的两侧，例如，人类可以游泳和飞行（使用正确的设备），因此应该出现在<code>in</code>检查的两侧：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Fish</span> = &#123; <span class="attr">swim</span>: <span class="function">() =&gt;</span> <span class="built_in">void</span> &#125;;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Bird</span> = &#123; <span class="attr">fly</span>: <span class="function">() =&gt;</span> <span class="built_in">void</span> &#125;;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Human</span> = &#123; swim?: <span class="function">() =&gt;</span> <span class="built_in">void</span>; fly?: <span class="function">() =&gt;</span> <span class="built_in">void</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">move</span>(<span class="params">animal: Fish | Bird | Human</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="string">&quot;swim&quot;</span> <span class="keyword">in</span> animal) &#123;</span><br><span class="line">    <span class="comment">// animal: Fish | Human</span></span><br><span class="line">    animal;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// animal: Bird | Human</span></span><br><span class="line">    animal;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-5-instanceof操作符缩小"><a href="#4-5-instanceof操作符缩小" class="headerlink" title="4.5 instanceof操作符缩小"></a>4.5 <code>instanceof</code>操作符缩小</h2><p>JavaScript 有一个运算符来 <code>instanceof</code> 检查一个值是否是另一个值的“实例”。更具体地，在JavaScript中<code>x instanceof Foo</code> 检查<code>x</code>的<em>原型链</em>是否含有<code>Foo.prototype</code>。虽然我们不会在这里深入探讨，当我们进入 <code>类(class)</code>学习时，你会看到更多这样的内容，它们大多数可以使用<code>new</code>关键字实例化。 正如你可能已经猜到的那样，<code>instanceof</code>也是一个类型保护，TypeScript 在由<code>instanceof</code>保护的分支中实现缩小。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">logValue</span>(<span class="params">x: <span class="built_in">Date</span> | <span class="built_in">string</span></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (x <span class="keyword">instanceof</span> <span class="title class_">Date</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(x.<span class="title function_">toUTCString</span>());</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(x.<span class="title function_">toUpperCase</span>());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">logValue</span>(<span class="keyword">new</span> <span class="title class_">Date</span>()); <span class="comment">// Mon, 15 Nov 2021 22:34:37 GMT</span></span><br><span class="line"><span class="title function_">logValue</span>(<span class="string">&quot;hello ts&quot;</span>); <span class="comment">// HELLO TS</span></span><br></pre></td></tr></table></figure><h2 id="4-6-分配缩小"><a href="#4-6-分配缩小" class="headerlink" title="4.6 分配缩小"></a>4.6 分配缩小</h2><p>正如我们之前提到的，当我们为任何变量赋值时，TypeScript 会查看赋值的右侧并适当缩小左侧。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// let x: string | number</span></span><br><span class="line"><span class="keyword">let</span> x = <span class="title class_">Math</span>.<span class="title function_">random</span>() &lt; <span class="number">0.5</span> ? <span class="number">10</span> : <span class="string">&quot;hello world!&quot;</span>;</span><br><span class="line"></span><br><span class="line">x = <span class="number">1</span>;</span><br><span class="line"><span class="comment">// let x: number</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x);</span><br><span class="line"></span><br><span class="line">x = <span class="string">&quot;goodbye!&quot;</span>;</span><br><span class="line"><span class="comment">// let x: string</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x);</span><br></pre></td></tr></table></figure><p>请注意，这些分配中的每一个都是有效的。即使在我们第一次赋值后观察到的类型<code>x</code>更改为 <code>number</code>，我们仍然可以将<code>string</code>赋值给<code>x</code>。这是因为<em>声明类型</em>的<code>x</code>-该类型<code>x</code>开始是<code>string | number</code>。</p><p>如果我们分配了一个<code>boolean</code>给 <code>x</code>，我们就会看到一个错误，因为它不是声明类型的一部分。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> x = <span class="title class_">Math</span>.<span class="title function_">random</span>() &lt; <span class="number">0.5</span> ? <span class="number">10</span> : <span class="string">&quot;hello world!&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// let x: string | number</span></span><br><span class="line">x = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// let x: number</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 出错了！</span></span><br><span class="line">x = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// let x: string | number</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x);</span><br></pre></td></tr></table></figure><img src="https://s2.loli.net/2022/02/22/iZFWjN4BkfKbdr2.png" alt="image-20211116065026159" style="zoom: 50%;" /><h2 id="4-7-控制流分析"><a href="#4-7-控制流分析" class="headerlink" title="4.7 控制流分析"></a>4.7 控制流分析</h2><p>到目前为止，我们已经通过一些基本示例来说明 TypeScript 如何在特定分支中缩小范围。但是除了从每个变量中走出来，并在<code>if</code>、<code>while</code>、条件等中寻找类型保护之外，还有更多的事情要做。例如：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">padLeft</span>(<span class="params">padding: <span class="built_in">number</span> | <span class="built_in">string</span>, input: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> padding === <span class="string">&quot;number&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Array</span>(padding + <span class="number">1</span>).<span class="title function_">join</span>(<span class="string">&quot; &quot;</span>) + input;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> padding + input;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>padLeft</code>从其第一个 <code>if</code>块中返回。TypeScript 能够分析这段代码，并看到在 padding 是数字的情况下，主体的其余部分（<code>return padding + input;</code>）是不可达的。因此，它能够将数字从 <code>padding</code> 的类型中移除（从字符串|数字缩小到字符串），用于该函数的其余部分。</p><p>这种基于可达性的代码分析被称为控制流分析，TypeScript使用这种流分析来缩小类型，因为它遇到了类型守卫和赋值。当一个变量被分析时，控制流可以一次又一次地分裂和重新合并，该变量可以被观察到在每个点上有不同的类型。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">example</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> <span class="attr">x</span>: <span class="built_in">string</span> | <span class="built_in">number</span> | <span class="built_in">boolean</span>;</span><br><span class="line"></span><br><span class="line">  x = <span class="title class_">Math</span>.<span class="title function_">random</span>() &lt; <span class="number">0.5</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// let x: boolean</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(x);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="title class_">Math</span>.<span class="title function_">random</span>() &lt; <span class="number">0.5</span>) &#123;</span><br><span class="line">    x = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    <span class="comment">// let x: string</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(x);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    x = <span class="number">100</span>;</span><br><span class="line">    <span class="comment">// let x: number</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(x);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// let x: string | number</span></span><br><span class="line">  <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> x = <span class="title function_">example</span>();</span><br><span class="line">x = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">x = <span class="number">100</span>;</span><br><span class="line">x = <span class="literal">true</span>; <span class="comment">// error</span></span><br></pre></td></tr></table></figure><img src="https://s2.loli.net/2022/02/22/hA2aRrP93TIBuOG.png" alt="image-20211117203742503" style="zoom:50%;" /><h2 id="4-8-使用类型谓词"><a href="#4-8-使用类型谓词" class="headerlink" title="4.8 使用类型谓词"></a>4.8 使用类型谓词</h2><p>到目前为止，我们已经用现有的JavaScript结构来处理窄化问题，然而有时你想更直接地控制整个代码中的类型变化。</p><p>为了定义一个用户定义的类型保护，我们只需要定义一个函数，其返回类型是一个类型谓词。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Fish</span> = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">swim</span>: <span class="function">() =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Bird</span> = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">fly</span>: <span class="function">() =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">isFish</span>(<span class="params">pet: Fish | Bird</span>): pet is <span class="title class_">Fish</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> (pet <span class="keyword">as</span> <span class="title class_">Fish</span>).<span class="property">swim</span> !== <span class="literal">undefined</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个例子中，<code>pet is Fish</code> 是我们的类型谓词。谓词的形式是 <code>parameterName is Type</code>，其中 <code>parameterName</code> 必须是当前函数签名中的参数名称。</p><p>任何时候 <code>isFish</code> 被调用时，如果原始类型是兼容的，TypeScript将把该变量缩小到该特定类型。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getSmallPet</span>(<span class="params"></span>): <span class="title class_">Fish</span> | <span class="title class_">Bird</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> <span class="attr">fish</span>: <span class="title class_">Fish</span> = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;gold fish&quot;</span>,</span><br><span class="line">    <span class="attr">swim</span>: <span class="function">() =&gt;</span> &#123;&#125;,</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> <span class="attr">bird</span>: <span class="title class_">Bird</span> = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;sparrow&quot;</span>,</span><br><span class="line">    <span class="attr">fly</span>: <span class="function">() =&gt;</span> &#123;&#125;,</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span> ? bird : fish;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里 pet 的 swim 和 fly 都可以访问了</span></span><br><span class="line"><span class="keyword">let</span> pet = <span class="title function_">getSmallPet</span>();</span><br><span class="line"><span class="keyword">if</span> (<span class="title function_">isFish</span>(pet)) &#123;</span><br><span class="line">  pet.<span class="title function_">swim</span>();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  pet.<span class="title function_">fly</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意，TypeScript不仅知道 <code>pet</code> 在 <code>if</code> 分支中是一条鱼；它还知道在 <code>else</code> 分支中，你没有一条 <code>Fish</code>，所以你一定有一只 <code>Bird</code>。</p><p>你可以使用类型守卫 <code>isFish</code> 来过滤 <code>Fish | Bird</code> 的数组，获得 <code>Fish</code> 的数组。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="attr">zoo</span>: (<span class="title class_">Fish</span> | <span class="title class_">Bird</span>)[] = [<span class="title function_">getSmallPet</span>(), <span class="title function_">getSmallPet</span>(), <span class="title function_">getSmallPet</span>()];</span><br><span class="line"><span class="keyword">const</span> <span class="attr">underWater1</span>: <span class="title class_">Fish</span>[] = zoo.<span class="title function_">filter</span>(isFish);</span><br><span class="line"><span class="comment">// 或者，等同于</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">underWater2</span>: <span class="title class_">Fish</span>[] = zoo.<span class="title function_">filter</span>(isFish) <span class="keyword">as</span> <span class="title class_">Fish</span>[];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对于更复杂的例子，该谓词可能需要重复使用</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">underWatch3</span>: <span class="title class_">Fish</span>[] = zoo.<span class="title function_">filter</span>((pet): pet is <span class="title class_">Fish</span> =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (pet.<span class="property">name</span> === <span class="string">&quot;frog&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">isFish</span>(pet);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="4-9-受歧视的-unions"><a href="#4-9-受歧视的-unions" class="headerlink" title="4.9 受歧视的 unions"></a>4.9 受歧视的 <code>unions</code></h2><p>到目前为止，我们所看的大多数例子都是围绕着用简单的类型（如<code>string</code>、<code>boolean</code>和<code>number</code>）来缩小单个变量。虽然这很常见，但在JavaScript中，大多数时候我们要处理的是稍微复杂的结构。</p><p>为了激发灵感，让我们想象一下，我们正试图对圆形和方形等形状进行编码。圆记录了它们的半径，方记录了它们的边长。我们将使用一个叫做 <code>kind</code> 的字段来告诉我们正在处理的是哪种形状。这里是定义 <code>Shape</code> 的第一个尝试。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">  <span class="attr">kind</span>: <span class="string">&quot;circle&quot;</span> | <span class="string">&quot;square&quot;</span>;</span><br><span class="line">  radius?: <span class="built_in">number</span>;</span><br><span class="line">  sideLength?: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意，我们使用的是字符串字面类型的联合。<code>&quot;circle &quot;</code>和<code> &quot;square &quot;</code>分别告诉我们应该把这个形状当作一个圆形还是方形。通过使用 <code>&quot;circle&quot; | &quot;square &quot;</code> 而不是 <code>string</code>，我们可以避免拼写错误的问题。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">handleShape</span>(<span class="params">shape: Shape</span>) &#123;</span><br><span class="line">  <span class="comment">// oops!</span></span><br><span class="line">  <span class="keyword">if</span> (shape.<span class="property">kind</span> === <span class="string">&quot;rect&quot;</span>) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://s2.loli.net/2022/02/22/gN6Arztw5S2kFJm.png" alt="image-20211118090404099" style="zoom:50%;" /><p>我们可以编写一个 <code>getArea</code> 函数，根据它处理的是圆形还是方形来应用正确的逻辑。我们首先尝试处理圆形。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getArea</span>(<span class="params">shape: Shape</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="property">PI</span> * shape.<span class="property">radius</span> ** <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://s2.loli.net/2022/02/22/fNEWpy8i3GdxTLO.png" alt="image-20211118091637002" style="zoom:50%;" /><p>在 <code>strictNullChecks</code> 下，这给了我们一个错误——这是很恰当的，因为 <code>radius</code> 可能没有被定义。但是如果我们对 <code>kind</code> 属性进行适当的检查呢？</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getArea</span>(<span class="params">shape: Shape</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (shape.<span class="property">kind</span> === <span class="string">&quot;circle&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="property">PI</span> * shape.<span class="property">radius</span> ** <span class="number">2</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://s2.loli.net/2022/02/22/T76rqcQbF2utN4U.png" alt="image-20211118093134890" style="zoom:50%;" /><p>嗯，TypeScript 仍然不知道该怎么做。我们遇到了一个问题，即我们对我们的值比类型检查器知道的更多。我们可以尝试使用一个非空的断言 (<code>radius</code> 后面的那个叹号<code>!</code> ) 来说明 <code>radius</code> 肯定存在。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getArea</span>(<span class="params">shape: Shape</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (shape.<span class="property">kind</span> === <span class="string">&quot;circle&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="property">PI</span> * shape.<span class="property">radius</span>! ** <span class="number">2</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但这感觉并不理想。我们不得不用那些非空的断言对类型检查器声明一个叹号（<code>！</code>），以说服它相信<code>shape.radius</code> 是被定义的，但是如果我们开始移动代码，这些断言就容易出错。此外，在 <code>strictNullChecks</code> 之外，我们也可以意外地访问这些字段（因为在读取这些字段时，可选属性被认为总是存在的）。我们绝对可以做得更好。</p><p><code>Shape</code> 的这种编码的问题是，类型检查器没有办法根据种类属性知道 <code>radius</code> 或 <code>sideLength</code> 是否存在。我们需要把我们知道的东西传达给类型检查器。考虑到这一点，让我们再来定义一下Shape。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Circle</span> &#123;</span><br><span class="line">  <span class="attr">kind</span>: <span class="string">&quot;circle&quot;</span>;</span><br><span class="line">  <span class="attr">radius</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Square</span> &#123;</span><br><span class="line">  <span class="attr">kind</span>: <span class="string">&quot;square&quot;</span>;</span><br><span class="line">  <span class="attr">sideLength</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Shape</span> = <span class="title class_">Circle</span> | <span class="title class_">Square</span>;</span><br></pre></td></tr></table></figure><p>在这里，我们正确地将 <code>Shape</code> 分成了两种类型，为 <code>kind</code> 属性设置了不同的值，但是 <code>radius</code> 和 <code>sideLength</code> 在它们各自的类型中被声明为必需的属性。</p><p>让我们看看当我们试图访问 <code>Shape</code> 的半径时会发生什么。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getArea</span>(<span class="params">shape: Shape</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="property">PI</span> * shape.<span class="property">radius</span> ** <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://s2.loli.net/2022/02/22/ws1RYKDjvnQNxlC.png" alt="image-20211118180452972" style="zoom:50%;" /><p>就像我们对 <code>Shape</code> 的第一个定义一样，这仍然是一个错误。当半径是可选的时候，我们得到了一个错误（仅在<code>strictNullChecks</code> 中），因为 TypeScript 无法判断该属性是否存在。现在 <code>Shape</code> 是一个联合体，TypeScript 告诉我们 <code>shape</code> 可能是一个 <code>Square</code> ，而Square并没有定义半径 <code>radius</code>。 这两种解释都是正确的，但只有我们对 <code>Shape</code> 的新编码仍然在 <code>strictNullChecks</code> 之外导致错误。</p><p>但是，如果我们再次尝试检查kind属性呢？</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getArea</span>(<span class="params">shape: Shape</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (shape.<span class="property">kind</span> === <span class="string">&quot;circle&quot;</span>) &#123;</span><br><span class="line">    <span class="comment">// shape: Circle</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="property">PI</span> * shape.<span class="property">radius</span> ** <span class="number">2</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这就摆脱了错误! 当 <code>union</code> 中的每个类型都包含一个与字面类型相同的属性时，TypeScript 认为这是一个有区别的 <code>union</code> ，并且可以缩小 <code>union</code> 的成员。</p><p>在这种情况下，<code>kind</code> 就是那个共同属性（这就是 <code>Shape</code> 的判别属性）。检查 <code>kind</code> 属性是否为 <code>&quot;circle&quot;</code>，就可以剔除 <code>Shape</code> 中所有没有<code> &quot;circle&quot;</code> 类型属性的类型。这就把 <code>Shape</code> 的范围缩小到了<code>Circle</code>这个类型。</p><p>同样的检查方法也适用于 <code>switch</code> 语句。现在我们可以试着编写完整的 <code>getArea</code>，而不需要任何讨厌的叹号 <code>！</code>非空的断言。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getArea</span>(<span class="params">shape: Shape</span>) &#123;</span><br><span class="line">  <span class="keyword">switch</span> (shape.<span class="property">kind</span>) &#123;</span><br><span class="line">    <span class="comment">// shape: Circle</span></span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;circle&quot;</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="property">PI</span> * shape.<span class="property">radius</span> ** <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// shape: Square</span></span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;square&quot;</span>:</span><br><span class="line">      <span class="keyword">return</span> shape.<span class="property">sideLength</span> ** <span class="number">2</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里最重要的是 <code>Shape</code> 的编码。向 TypeScript 传达正确的信息是至关重要的，这个信息就是 <code>Circle</code>和<code>Square</code>实际上是具有特定种类字段的两个独立类型。这样做让我们写出类型安全的TypeScript代码，看起来与我们本来要写的JavaScript没有区别。从那里，类型系统能够做 “正确 “的事情，并找出我们 <code>switch</code>语句的每个分支中的类型。</p><blockquote><p>作为一个旁观者，试着玩一玩上面的例子，去掉一些返回关键词。你会发现，类型检查可以帮助避免在switch语句中不小心落入不同子句的bug。</p></blockquote><p>辨证的联合体不仅仅适用于谈论圆形和方形。它们适合于在JavaScript中表示任何类型的消息传递方案，比如在网络上发送消息（<code>client/server</code>通信），或者在状态管理框架中编码突变。</p><h2 id="4-10-never类型与穷尽性检查"><a href="#4-10-never类型与穷尽性检查" class="headerlink" title="4.10 never类型与穷尽性检查"></a>4.10 <code>never</code>类型与穷尽性检查</h2><p>在缩小范围时，你可以将一个联合体的选项减少到你已经删除了所有的可能性并且什么都不剩的程度。在这些情况下，TypeScript将使用一个<code>never</code>类型来代表一个不应该存在的状态。</p><p><code>never</code> 类型可以分配给每个类型；但是，没有任何类型可以分配给never（除了never本身）。这意味着你可以使用缩小并依靠<code>never</code>的出现在 <code>switch</code> 语句中做详尽的检查。</p><p>例如，在我们的<code>getArea</code>函数中添加一个默认值，试图将形状分配给<code>never</code>，当每个可能的情况都没有被处理时，就会引发。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Shape</span> = <span class="title class_">Circle</span> | <span class="title class_">Square</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getArea</span>(<span class="params">shape: Shape</span>) &#123;</span><br><span class="line">  <span class="keyword">switch</span> (shape.<span class="property">kind</span>) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;circle&quot;</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="property">PI</span> * shape.<span class="property">radius</span> ** <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;square&quot;</span>:</span><br><span class="line">      <span class="keyword">return</span> shape.<span class="property">sideLength</span> ** <span class="number">2</span>;</span><br><span class="line">    <span class="attr">default</span>:</span><br><span class="line">      <span class="keyword">const</span> <span class="attr">_exhaustiveCheck</span>: <span class="built_in">never</span> = shape;</span><br><span class="line">      <span class="keyword">return</span> _exhaustiveCheck;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 <code>Shape</code> 联盟中添加一个新成员，将导致TypeScript错误。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Triangle</span> &#123;</span><br><span class="line">  <span class="attr">kind</span>: <span class="string">&quot;triangle&quot;</span>;</span><br><span class="line">  <span class="attr">sideLength</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Shape</span> = <span class="title class_">Circle</span> | <span class="title class_">Square</span> | <span class="title class_">Triangle</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getArea</span>(<span class="params">shape: Shape</span>) &#123;</span><br><span class="line">  <span class="keyword">switch</span> (shape.<span class="property">kind</span>) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;circle&quot;</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="property">PI</span> * shape.<span class="property">radius</span> ** <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;square&quot;</span>:</span><br><span class="line">      <span class="keyword">return</span> shape.<span class="property">sideLength</span> ** <span class="number">2</span>;</span><br><span class="line">    <span class="attr">default</span>:</span><br><span class="line">      <span class="keyword">const</span> <span class="attr">_exhaustiveCheck</span>: <span class="built_in">never</span> = shape;</span><br><span class="line">      <span class="keyword">return</span> _exhaustiveCheck;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://s2.loli.net/2022/02/22/mPEYDNGbXZxzIy9.png" alt="image-20211118183410201" style="zoom:50%;" /><h3 id="特别声明-本文转自-古艺散人老师-，如有需要可前往原文预览查看。"><a href="#特别声明-本文转自-古艺散人老师-，如有需要可前往原文预览查看。" class="headerlink" title="特别声明: 本文转自  古艺散人老师 ，如有需要可前往原文预览查看。"></a>特别声明: 本文转自 <a href="https://github.com/lurongtao/TypeScript"> 古艺散人老师 </a>，如有需要可前往原文预览查看。</h3>]]></content>
      
      
      <categories>
          
          <category> TypeScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> TypeScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1-3、基础篇：常用类型</title>
      <link href="/article/19978/"/>
      <url>/article/19978/</url>
      
        <content type="html"><![CDATA[<h1 id="三、常用类型"><a href="#三、常用类型" class="headerlink" title="三、常用类型"></a>三、常用类型</h1><p>在本章中，我们将介绍一些在 JavaScript 代码中最常见的值类型，并解释在 TypeScript 中描述这些类型的相应方法。这不是一个详尽的列表，未来的章节将描述命名和使用其他类型的更多方法。</p><p>类型还可以出现在更多的<em>地方，</em>而不仅仅是类型注释。当我们了解类型本身时，我们还将了解可以引用这些类型以形成新结构的地方。</p><p>我们将首先回顾你在编写 JavaScript 或 TypeScript 代码时，可能遇到的最基本和最常见的类型，它是形成更复杂类型的核心构建块。</p><h2 id="3-0-TypeScript配置文件"><a href="#3-0-TypeScript配置文件" class="headerlink" title="3.0 TypeScript配置文件"></a>3.0 TypeScript配置文件</h2><p>为了方便学习，我们可以在一个单独的配置文件中保存命令行中的参数，应用 <code>tsc</code> 生成配置文件：</p><img src="https://s2.loli.net/2022/02/22/1dAfz2imrs3CMbL.png" alt="image-20211113170722654" style="zoom: 50%;"/><p>在项目根目录下生成了一个配置文件 <code>tsconfig.json</code>。这里给出我们自己的配置：</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="comment">/* Language and Environment */</span></span><br><span class="line">    <span class="attr">&quot;target&quot;</span><span class="punctuation">:</span> <span class="string">&quot;es6&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">/* Modules */</span></span><br><span class="line">    <span class="attr">&quot;rootDir&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./src&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">/* Emit */</span></span><br><span class="line">    <span class="attr">&quot;outDir&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./dist&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">/* Type Checking */</span></span><br><span class="line">    <span class="attr">&quot;strict&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="3-1-基元类型string-number-和boolean"><a href="#3-1-基元类型string-number-和boolean" class="headerlink" title="3.1 基元类型string,number, 和boolean"></a>3.1 基元类型<code>string</code>,<code>number</code>, 和<code>boolean</code></h2><p>JavaScript有三个非常常用的<a href="https://developer.mozilla.org/en-US/docs/Glossary/Primitive">原语</a>：<code>string</code>，<code>number</code>，和<code>boolean</code>。每个在 TypeScript 中都有对应的类型。我们发现，这些名称与我们在 JavaScript 应用<code>typeof</code>返回的类型的名称相同：</p><ul><li><code>string</code> 表示字符串值，如 <code>&quot;Hello, world&quot;</code></li><li><code>number</code>表示数字值，如 <code>42</code>。JavaScript 没有一个特殊的整数运行时值，所以没有等价于<code>int</code>或 <code>float</code>类型， 一切都只是<code>number</code></li><li><code>boolean</code>只有两个值<code>true</code>和<code>false</code></li></ul><blockquote><p>类型名称<code>String</code>, <code>Number</code>, 和<code>Boolean</code>（以大写字母开头）是合法的，但指的是一些很少出现在代码中的特殊内置类型。对于类型，<em>始终</em>使用<code>string</code>, <code>number</code>, 或<code>boolean</code>。</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">str</span>: string = <span class="string">&#x27;hello typescript&#x27;</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">num</span>: number = <span class="number">100</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">bool</span>: boolean = <span class="literal">true</span></span><br></pre></td></tr></table></figure><h2 id="3-2-数组"><a href="#3-2-数组" class="headerlink" title="3.2 数组"></a>3.2 数组</h2><p>数组是指定形如<code>[1, 2, 3]</code>数据，可以使用语法<code>number[]</code>来定义; 此语法适用于任何类型（例如<code>string[]</code>，字符串数组等）。</p><p>你也可以写成<code>Array&lt;number&gt;</code>。<code>T&lt;U&gt;</code>当介绍<em>泛型</em>时，我们将了解更多有关这个语法的更多信息。</p><p><strong>02-everyday-types&#x2F;src&#x2F;02-array.ts</strong></p><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">arr</span>: <span class="built_in">number</span>[] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> <span class="attr">arr2</span>: <span class="title class_">Array</span>&lt;<span class="built_in">number</span>&gt; = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br></pre></td></tr></table></figure><h2 id="3-3-any"><a href="#3-3-any" class="headerlink" title="3.3 any"></a>3.3 any</h2><p>TypeScript 还有一个特殊类型 <code>any</code>，当你不希望某个特定值导致类型检查错误时，可以使用它。</p><p>当一个值的类型是<code>any</code>时，可以访问它的任何属性，将它分配给任何类型的值，或者几乎任何其他语法上的东西都合法的：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">obj</span>: <span class="built_in">any</span> = &#123; <span class="attr">x</span>: <span class="number">0</span> &#125;;</span><br><span class="line"><span class="comment">// 以下代码行都不会抛出编译器错误。</span></span><br><span class="line"><span class="comment">// 使用&#x27;any&#x27;将禁用所有进一步的类型检查</span></span><br><span class="line">obj.<span class="title function_">foo</span>();</span><br><span class="line"><span class="title function_">obj</span>();</span><br><span class="line">obj.<span class="property">bar</span> = <span class="number">100</span>;</span><br><span class="line">obj = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">n</span>: <span class="built_in">number</span> = obj;</span><br></pre></td></tr></table></figure><p>但在运行环境下执行代码可能是错误的：</p><img src="/img/TypeScript/03-02.png" alt="image-20211113182543401" style="zoom:50%;" /><p>进入到 <code>dist</code>目录中，在 node 环境里运行代码，果然报错了。</p><p>当你不想写出长类型只是为了让 TypeScript 相信特定的代码行没问题时，<code>any</code>类型很有用。</p><ul><li><strong>noImplicitAny</strong></li></ul><p>当不指定类型时，并且 TypeScript 无法从上下文推断它时，编译器通常会默认为<code>any</code>.</p><p>但是，您通常希望避免这种情况，因为<code>any</code>没有进行类型检查。使用编译器标志<a href="https://www.typescriptlang.org/tsconfig#noImplicitAny"><code>noImplicitAny</code></a>将任何隐式标记<code>any</code>为错误。这个配置我们在前面讲到过。</p><h2 id="3-4-变量上的类型注释"><a href="#3-4-变量上的类型注释" class="headerlink" title="3.4 变量上的类型注释"></a>3.4 变量上的类型注释</h2><p>当你使用<code>const</code>, <code>var</code>, 或声明变量时<code>let</code>，可以选择添加类型注释来显式指定变量的类型：</p><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">myName</span>: <span class="built_in">string</span> = <span class="string">&quot;Felixlu&quot;</span>;</span><br></pre></td></tr></table></figure><blockquote><p>TypeScript 不使用“左边的类型”风格的声明，比如<code>int x = 0;</code> 类型注解总是<em>在</em>被输入的东西<em>之后</em>。</p></blockquote><p>但是，在大多数情况下，这不是必需的。只要有可能，TypeScript 就会尝试自动<em>推断</em>代码中的类型。例如，变量的类型是根据其初始化器的类型推断出来的：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 不需要类型定义--“myName”推断为类型“string”</span></span><br><span class="line"><span class="keyword">let</span> myName = <span class="string">&quot;Felixlu&quot;</span>;</span><br></pre></td></tr></table></figure><p>大多数情况下，不需要明确学习推理规则。如果你刚开始，请尝试使用比你想象的更少的类型注释 - 你可能会惊讶——TypeScript 完全了解正在发生的事情。</p><h2 id="3-5-函数"><a href="#3-5-函数" class="headerlink" title="3.5 函数"></a>3.5 函数</h2><p>函数是在 JavaScript 中传递数据的主要方式。TypeScript 允许您指定函数的输入和输出值的类型。</p><ul><li>参数类型注释</li></ul><p>声明函数时，可以在每个参数后添加类型注解，以声明函数接受的参数类型。参数类型注释位于参数名称之后：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 参数类型定义</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">greet</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hello, &quot;</span> + name.<span class="title function_">toUpperCase</span>() + <span class="string">&quot;!!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当参数具有类型注释时，将检查该函数的参数：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 如果执行，将是一个运行时错误！</span></span><br><span class="line"><span class="title function_">greet</span>(<span class="number">42</span>);</span><br></pre></td></tr></table></figure><img src="https://s2.loli.net/2022/02/22/SR9okXs1ez7ThC6.png" alt="image-20211114072314780" style="zoom: 50%;" /><blockquote><p>即使您的参数上没有类型注释，TypeScript 仍会检查您是否传递了正确数量的参数。</p></blockquote><ul><li>返回类型注释</li></ul><p>你还可以添加返回类型注释。返回类型注释出现在参数列表之后：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getFavoriteNumber</span>(<span class="params"></span>): <span class="built_in">number</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">26</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>与变量类型注释非常相似，通常不需要返回类型注释，因为 TypeScript 会根据其<code>return</code>语句推断函数的返回类型。上面例子中的类型注释不会改变任何东西。某些代码库会出于文档目的明确指定返回类型，以防止意外更改或仅出于个人偏好。</p><ul><li>匿名函数</li></ul><p>匿名函数与函数声明有点不同。当一个函数出现在 TypeScript 可以确定它将如何被调用的地方时，该函数的参数会自动指定类型。</p><p>下面是一个例子：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 这里没有类型注释，但是TypeScript可以发现错误</span></span><br><span class="line"><span class="keyword">const</span> names = [<span class="string">&quot;Alice&quot;</span>, <span class="string">&quot;Bob&quot;</span>, <span class="string">&quot;Eve&quot;</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数上下文类型</span></span><br><span class="line">names.<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">s</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(s.<span class="title function_">toUppercase</span>());</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 上下文类型也适用于箭头函数</span></span><br><span class="line">names.<span class="title function_">forEach</span>(<span class="function">(<span class="params">s</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(s.<span class="title function_">toUppercase</span>());</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><img src="https://s2.loli.net/2022/02/22/qMkb8YQzxUw2Xnc.png" alt="image-20211114073444596" style="zoom:50%;" /><p>即使参数<code>s</code>没有类型注释，TypeScript 也会使用<code>forEach</code>函数的类型，以及数组的推断类型来确定<code>s</code>的类型。</p><p>这个过程称为<em>上下文类型，</em>因为函数发生在其中的<em>上下文</em>通知它应该具有什么类型。</p><p>与推理规则类似，你不需要明确了解这是如何发生的，但了解它的机制<em>确实</em>可以帮助你注意何时不需要类型注释。稍后，我们将看到更多关于<em>值出现的上下文</em>如何影响其类型的示例。</p><h2 id="3-6-对象类型"><a href="#3-6-对象类型" class="headerlink" title="3.6 对象类型"></a>3.6 对象类型</h2><p>除了<code>string</code>，<code>number</code>，<code>boolean</code>类型（又称基元类型）外，你将遇到的最常见的类型是<em>对象类型</em>。这指的是任何带有属性的 JavaScript 值，几乎是所有属性！要定义对象类型，我们只需列出其属性及其类型。</p><p>例如，这是一个接受点状对象的函数：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 参数的类型注释是对象类型</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">printCoord</span>(<span class="params">pt: &#123; x: <span class="built_in">number</span>; y: <span class="built_in">number</span> &#125;</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;坐标的x值为： &quot;</span> + pt.<span class="property">x</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;坐标的y值为： &quot;</span> + pt.<span class="property">y</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">printCoord</span>(&#123; <span class="attr">x</span>: <span class="number">3</span>, <span class="attr">y</span>: <span class="number">7</span> &#125;);</span><br></pre></td></tr></table></figure><p>在这里，我们使用具有两个属性的类型注释参数 -<code>x</code>和<code>y</code>- 这两个属性都是 <code>number</code>类型。你可以以使用<code>,</code>或<code>;</code>来分隔属性，最后一个分隔符是可选的。</p><p>每个属性的类型部分也是可选的。如果你不指定类型，则将假定为<code>any</code>。</p><ul><li>可选属性</li></ul><p>对象类型还可以指定其部分或全部属性是<em>可选的</em>。为此，请在属性名称后添加一个<code>?</code>：</p><p><strong>02-everyday-types&#x2F;src&#x2F;05-object.ts</strong></p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">printName</span>(<span class="params">obj: &#123; first: <span class="built_in">string</span>; last?: <span class="built_in">string</span> &#125;</span>) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 两种传递参数都可以</span></span><br><span class="line"><span class="title function_">printName</span>(&#123; <span class="attr">first</span>: <span class="string">&quot;Felix&quot;</span> &#125;);</span><br><span class="line"><span class="title function_">printName</span>(&#123; <span class="attr">first</span>: <span class="string">&quot;Felix&quot;</span>, <span class="attr">last</span>: <span class="string">&quot;Lu&quot;</span> &#125;);</span><br></pre></td></tr></table></figure><p>在 JavaScript 中，如果访问一个不存在的属性，将获得值<code>undefined</code>而不是运行时错误。因此，当你<em>读取</em>可选属性时，必须使用它之前用<code>undefined</code>进行检查。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">printName</span>(<span class="params">obj: &#123; first: <span class="built_in">string</span>; last?: <span class="built_in">string</span> &#125;</span>) &#123;</span><br><span class="line">  <span class="comment">// 错误 - &#x27;obj.last&#x27; 可能不存在!</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">last</span>.<span class="title function_">toUpperCase</span>());</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (obj.<span class="property">last</span> !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">    <span class="comment">// 这样可以</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">last</span>.<span class="title function_">toUpperCase</span>());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 使用现代JavaScript语法的安全替代方案：</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">last</span>?.<span class="title function_">toUpperCase</span>());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-7-联合类型"><a href="#3-7-联合类型" class="headerlink" title="3.7 联合类型"></a>3.7 联合类型</h2><p>TypeScript 的类型系统允许你使用多种运算符，从现有类型中构建新类型。现在我们知道如何编写几种类型，是时候开始以有趣的方式<em>组合</em>它们了。</p><ul><li>定义联合类型</li></ul><p>第一种组合类型的方法是<em>联合</em>类型。联合类型是由两个或多个其他类型组成的类型，表示可能是这些类型中的<em>任何一种</em>的值。我们将这些类型中的每一种称为<em>联合类型的成员</em>。</p><p>让我们编写一个可以对字符串或数字进行操作的函数：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">printId</span>(<span class="params">id: <span class="built_in">number</span> | <span class="built_in">string</span></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Your ID is: &quot;</span> + id);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 正确</span></span><br><span class="line"><span class="title function_">printId</span>(<span class="number">101</span>);</span><br><span class="line"><span class="comment">// 正确</span></span><br><span class="line"><span class="title function_">printId</span>(<span class="string">&quot;202&quot;</span>);</span><br><span class="line"><span class="comment">// 错误</span></span><br><span class="line"><span class="title function_">printId</span>(&#123; <span class="attr">myID</span>: <span class="number">22342</span> &#125;);</span><br></pre></td></tr></table></figure><img src="https://s2.loli.net/2022/02/22/qkOvn9DrVdCRSBc.png" alt="image-20211114081646215" style="zoom:50%;" /><ul><li>使用联合类型</li></ul><p><em>提供</em>匹配联合类型的值很容易- 只需提供匹配任何联合成员的类型。如果你<em>有</em>一个联合类型的值，你如何使用它？</p><p>如果联合的<em>每个</em>成员都有效，TypeScript 将只允许你使用联合做一些事情。例如，如果你有联合类型 <code>string | number</code>，则不能只使用一种类型的操作，比如<code>string</code>：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">printId</span>(<span class="params">id: <span class="built_in">number</span> | <span class="built_in">string</span></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(id.<span class="title function_">toUpperCase</span>());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://s2.loli.net/2022/02/22/TnuapbGVlOE2BYw.png" alt="image-20211114085508715" style="zoom:50%;" /><p>解决方案是用代码<em>缩小</em>联合，就像在没有类型注释的 JavaScript 中一样。 当 TypeScript 可以根据代码结构为值推断出更具体的类型时，就会发生<em>缩小</em>。</p><p>例如，TypeScript 知道只有一个<code>string</code>值才会有一个<code>typeof</code>值<code>&quot;string&quot;</code>：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">printId</span>(<span class="params">id: <span class="built_in">number</span> | <span class="built_in">string</span></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> id === <span class="string">&quot;string&quot;</span>) &#123;</span><br><span class="line">    <span class="comment">// 在此分支中，id的类型为“string”</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(id.<span class="title function_">toUpperCase</span>());</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 此处，id的类型为“number”</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(id);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另一个例子是使用如下函数<code>Array.isArray</code>：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">welcomePeople</span>(<span class="params">x: <span class="built_in">string</span>[] | <span class="built_in">string</span></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="title class_">Array</span>.<span class="title function_">isArray</span>(x)) &#123;</span><br><span class="line">    <span class="comment">// 此处: &#x27;x&#x27; 的类型是 &#x27;string[]&#x27;</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hello, &quot;</span> + x.<span class="title function_">join</span>(<span class="string">&quot; and &quot;</span>));</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 此处: &#x27;x&#x27; 的类型是 &#x27;string&#x27;</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Welcome lone traveler &quot;</span> + x);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>请注意，在<code>else</code>分支中，我们不需要做任何特别的事情——如果<code>x</code>不是 <code>string[]</code>，那么它一定是 <code>string</code>。</p><p>有时你会有一个 <code>union</code>，所有成员都有一些共同点。例如，数组和字符串都有一个<code>slice</code>方法。如果联合中的每个成员都有一个共同的属性，则可以使用该属性而不会缩小范围：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 返回类型推断为 number[] | string</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getFirstThree</span>(<span class="params">x: <span class="built_in">number</span>[] | <span class="built_in">string</span></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> x.<span class="title function_">slice</span>(<span class="number">0</span>, <span class="number">3</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-8-类型别名"><a href="#3-8-类型别名" class="headerlink" title="3.8 类型别名"></a>3.8 类型别名</h2><p>我们一直在通过直接在类型注释中编写对象类型和联合类型来使用它们。这很方便，但是想要多次使用同一个类型，并用一个名称来引用它是很常见的。</p><p>一个<em>类型别名</em>正是一个<em>名称</em>为任何<em>类型</em>的定义。类型别名的语法是：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Point</span> = &#123;</span><br><span class="line">  <span class="attr">x</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">y</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 与前面的示例完全相同</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">printCoord</span>(<span class="params">pt: Point</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;坐标x的值是： &quot;</span> + pt.<span class="property">x</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;坐标y的值是： &quot;</span> + pt.<span class="property">y</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">printCoord</span>(&#123; <span class="attr">x</span>: <span class="number">100</span>, <span class="attr">y</span>: <span class="number">100</span> &#125;);</span><br></pre></td></tr></table></figure><p>实际上，你可以使用类型别名为任何类型命名，而不仅仅是对象类型。例如，类型别名可以命名联合类型：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="variable constant_">ID</span> = <span class="built_in">number</span> | <span class="built_in">string</span>;</span><br></pre></td></tr></table></figure><p>请注意，别名<em>只是</em>别名 - 你不能使用类型别名来创建相同类型的不同“版本”。当你使用别名时，就像你编写了别名类型一样。换句话说，这段代码可能<em>看起来不</em>合法，但根据 TypeScript 是可以的，因为这两种类型都是同一类型的别名：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">UserInputSanitizedString</span> = <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sanitizeInput</span>(<span class="params">str: <span class="built_in">string</span></span>): <span class="title class_">UserInputSanitizedString</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> str.<span class="title function_">slice</span>(<span class="number">0</span>, <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建经过 sanitize 的输入</span></span><br><span class="line"><span class="keyword">let</span> userInput = <span class="title function_">sanitizeInput</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 但仍可以使用字符串重新分配值</span></span><br><span class="line">userInput = <span class="string">&quot;new input&quot;</span>;</span><br></pre></td></tr></table></figure><h2 id="3-9-接口"><a href="#3-9-接口" class="headerlink" title="3.9 接口"></a>3.9 接口</h2><p>一个<em>接口声明</em>是另一种方式来命名对象类型：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Point</span> &#123;</span><br><span class="line">  <span class="attr">x</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">y</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">printCoord</span>(<span class="params">pt: Point</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;坐标x的值是： &quot;</span> + pt.<span class="property">x</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;坐标y的值是： &quot;</span> + pt.<span class="property">y</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">printCoord</span>(&#123; <span class="attr">x</span>: <span class="number">100</span>, <span class="attr">y</span>: <span class="number">100</span> &#125;);</span><br></pre></td></tr></table></figure><p>就像我们在上面使用类型别名时一样，该示例就像我们使用了匿名对象类型一样工作。TypeScript 只关心我们传递给的值的<em>结构</em><code>printCoord</code>——它只关心它是否具有预期的属性。只关心类型的结构和功能，是我们将 TypeScript 称为<em>结构类型</em>类型系统的原因。</p><ul><li>类型别名和接口之间的差异</li></ul><p>类型别名和接口非常相似，在很多情况下你可以自由选择它们。几乎所有的功能都在<code>interface</code>中可用<code>type</code>，关键区别在于扩展新类型的方式不同：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 扩展接口</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Bear</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">  <span class="attr">honey</span>: <span class="built_in">boolean</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">bear</span>: <span class="title class_">Bear</span> = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;winnie&quot;</span>,</span><br><span class="line">  <span class="attr">honey</span>: <span class="literal">true</span>,</span><br><span class="line">&#125;;</span><br><span class="line">bear.<span class="property">name</span>;</span><br><span class="line">bear.<span class="property">honey</span>;</span><br></pre></td></tr></table></figure><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 通过交叉点扩展类型</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Animal</span> = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Bear</span> = <span class="title class_">Animal</span> &amp; &#123;</span><br><span class="line">  <span class="attr">honey</span>: <span class="built_in">boolean</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">bear</span>: <span class="title class_">Bear</span> = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;winnie&quot;</span>,</span><br><span class="line">  <span class="attr">honey</span>: <span class="literal">true</span>,</span><br><span class="line">&#125;;</span><br><span class="line">bear.<span class="property">name</span>;</span><br><span class="line">bear.<span class="property">honey</span>;</span><br></pre></td></tr></table></figure><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 向现有接口添加新字段</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">MyWindow</span> &#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">MyWindow</span> &#123;</span><br><span class="line">  <span class="attr">count</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">w</span>: <span class="title class_">MyWindow</span> = &#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="string">&quot;hello ts&quot;</span>,</span><br><span class="line">  <span class="attr">count</span>: <span class="number">100</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 类型创建后不可更改</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">MyWindow</span> = &#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">MyWindow</span> = &#123;</span><br><span class="line">  <span class="attr">count</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><img src="/img/TypeScript/03-07.png" alt="image-20211114094240585" style="zoom:50%;" /><blockquote><ul><li>在 TypeScript 4.2 版之前，类型别名<a href="https://www.typescriptlang.org/play#code/PTAEGEHsFsAcEsA2BTATqNrLusgzngIYDm+oA7koqIYuYQJ56gCueyoAUCKAC4AWHAHaFcoSADMaQ0PCG80EwgGNkALk6c5C1EtWgAsqOi1QAb06groEbjWg8vVHOKcAvpokshy3vEgyyMr8kEbQJogAFND2YREAlOaW1soBeJAoAHSIkMTRmbbI8e6aPMiZxJmgACqCGKhY6ABGyDnkFFQ0dIzMbBwCwqIccabcYLyQoKjIEmh8kwN8DLAc5PzwwbLMyAAeK77IACYaQSEjUWZWhfYAjABMAMwALA+gbsVjoADqgjKESytQPxCHghAByXigYgBfr8LAsYj8aQMUASbDQcRSExCeCwFiIQh+AKfAYyBiQFgOPyIaikSGLQo0Zj-aazaY+dSaXjLDgAGXgAC9CKhDqAALxJaw2Ib2RzOISuDycLw+ImBYKQflCkWRRD2LXCw6JCxS1JCdJZHJ5RAFIbFJU8ADKC3WzEcnVZaGYE1ABpFnFOmsFhsil2uoHuzwArO9SmAAEIsSFrZB-GgAjjA5gtVN8VCEc1o1C4Q4AGlR2AwO1EsBQoAAbvB-gJ4HhPgB5aDwem-Ph1TCV3AEEirTp4ELtRbTPD4vwKjOfAuioSQHuDXBcnmgACC+eCONFEs73YAPGGZVT5cRyyhiHh7AAON7lsG3vBggB8XGV3l8-nVISOgghxoLq9i7io-AHsayRWGaFrlFauq2rg9qaIGQHwCBqChtKdgRo8TxRjeyB3o+7xAA"><em>可能</em>出现在错误消息中</a>，有时会代替等效的匿名类型（这可能是可取的，也可能是不可取的）。接口将始终在错误消息中命名。</li><li>类型别名可能不参与<a href="https://www.typescriptlang.org/play#code/PTAEEEDtQS0gXApgJwGYEMDGjSfdAIx2UQFoB7AB0UkQBMAoEUfO0Wgd1ADd0AbAK6IAzizp16ALgYM4SNFhwBZdAFtV-UAG8GoPaADmNAcMmhh8ZHAMMAvjLkoM2UCvWad+0ARL0A-GYWVpA29gyY5JAWLJAwGnxmbvGgALzauvpGkCZmAEQAjABMAMwALLkANBl6zABi6DB8okR4Jjg+iPSgABboovDk3jjo5pbW1d6+dGb5djLwAJ7UoABKiJTwjThpnpnGpqPBoTLMAJrkArj4kOTwYmycPOhW6AR8IrDQ8N04wmo4HHQCwYi2Waw2W1S6S8HX8gTGITsQA">声明合并，但接口可以</a>。</li><li>接口只能用于<a href="https://www.typescriptlang.org/play#code/PTAEAkFMCdIcgM6gC4HcD2pIA8CGBbABwBtIl0AzUAKBFAFcEBLAOwHMUBPQs0XFgCahWyGBVwBjMrTDJMAshOhMARpD4tQ6FQCtIE5DWoixk9QEEWAeV37kARlABvaqDegAbrmL1IALlAEZGV2agBfampkbgtrWwMAJlAAXmdXdy8ff0Dg1jZwyLoAVWZ2Lh5QVHUJflAlSFxROsY5fFAWAmk6CnRoLGwmILzQQmV8JmQmDzI-SOiKgGV+CaYAL0gBBdyy1KCQ-Pn1AFFplgA5enw1PtSWS+vCsAAVAAtB4QQWOEMKBuYVUiVCYvYQsUTQcRSBDGMGmKSgAAa-VEgiQe2GLgKQA">声明对象的形状，不能重命名基元</a>。</li><li>接口名称将<a href="https://www.typescriptlang.org/play#code/PTAEGEHsFsAcEsA2BTATqNrLusgzngIYDm+oA7koqIYuYQJ56gCueyoAUCKAC4AWHAHaFcoSADMaQ0PCG80EwgGNkALk6c5C1EtWgAsqOi1QAb06groEbjWg8vVHOKcAvpokshy3vEgyyMr8kEbQJogAFND2YREAlOaW1soBeJAoAHSIkMTRmbbI8e6aPMiZxJmgACqCGKhY6ABGyDnkFFQ0dIzMbBwCwqIccabcYLyQoKjIEmh8kwN8DLAc5PzwwbLMyAAeK77IACYaQSEjUWY2Q-YAjABMAMwALA+gbsVjNXW8yxySoAADaAA0CCaZbPh1XYqXgOIY0ZgmcK0AA0nyaLFhhGY8F4AHJmEJILCWsgZId4NNfIgGFdcIcUTVfgBlZTOWC8T7kAJ42G4eT+GS42QyRaYbCgXAEEguTzeXyCjDBSAAQSE8Ai0Xsl0K9kcziExDeiQs1lAqSE6SyOTy0AKQ2KHk4p1V6s1OuuoHuzwArMagA"><em>始终</em>以其原始形式出现在</a>错误消息中，但<em>仅</em>当它们按名称使用时。</li></ul><p>大多数情况下，你可以根据个人喜好进行选择，TypeScript 会告诉你是否需要其他类型的声明。如果您想要启发式，请使用<code>interface</code>，然后在需要时使用<code>type</code>。</p></blockquote><h2 id="3-10-类型断言"><a href="#3-10-类型断言" class="headerlink" title="3.10 类型断言"></a>3.10 类型断言</h2><p>有时，你会获得有关 TypeScript 不知道的值类型的信息。</p><p>例如，如果你正在使用<code>document.getElementById</code>，TypeScript 只知道这将返回<em>某种</em>类型的<code>HTMLElement</code>，但你可能知道你的页面将始终具有<code>HTMLCanvasElement</code>给定 ID 的值 。</p><p>在这种情况下，你可以使用<em>类型断言</em>来指定更具体的类型：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> myCanvas = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;main_canvas&quot;</span>) <span class="keyword">as</span> <span class="title class_">HTMLCanvasElement</span>;</span><br></pre></td></tr></table></figure><p>与类型注释一样，类型断言由编译器删除，不会影响代码的运行时行为。</p><p>还可以使用尖括号语法（除非代码在<code>.tsx</code>文件中），它是等效的：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> myCanvas = &lt;<span class="title class_">HTMLCanvasElement</span>&gt;<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;main_canvas&quot;</span>);</span><br></pre></td></tr></table></figure><blockquote><p>提醒：因为类型断言在编译时被移除，所以没有与类型断言相关联的运行时检查。<code>null</code>如果类型断言错误，则不会出现异常。</p></blockquote><p>TypeScript 只允许类型断言转换为<em>更具体</em>或<em>不太具体</em>的类型版本。此规则可防止“不可能”的强制，例如：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> x = <span class="string">&quot;hello&quot;</span> <span class="keyword">as</span> <span class="built_in">number</span>;</span><br></pre></td></tr></table></figure><img src="https://s2.loli.net/2022/02/22/qNWktG6hBmzVZaC.png" alt="image-20211114095324614" style="zoom:50%;" /><p>将类型<code>string</code>转换为类型<code>number</code>可能是错误的，因为两种类型都没有充分重叠。如果这是有意的，请先将表达式转换为 <code>any</code> 或 <code>unknown</code>（<code>unknown</code>，我们将在后面介绍），然后是所需的类型：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> x = <span class="string">&quot;hello&quot;</span> <span class="keyword">as</span> <span class="built_in">unknown</span> <span class="keyword">as</span> <span class="built_in">number</span>;</span><br></pre></td></tr></table></figure><h2 id="3-11-文字类型"><a href="#3-11-文字类型" class="headerlink" title="3.11 文字类型"></a>3.11 文字类型</h2><p>除了一般类型<code>string</code>和<code>number</code>，我们可以在类型位置引用<em>特定的</em>字符串和数字。</p><p>一种方法是考虑 JavaScript 如何以不同的方式声明变量。<code>var</code>而<code>let</code>两者都允许更改变量中保存的内容，<code>const</code>不允许，这反映在 TypeScript 如何为文字创建类型上。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> testString = <span class="string">&quot;Hello World&quot;</span>;</span><br><span class="line">testString = <span class="string">&quot;Olá Mundo&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//&#x27;testString&#x27;可以表示任何可能的字符串，那</span></span><br><span class="line"><span class="comment">//TypeScript是如何在类型系统中描述它的</span></span><br><span class="line">testString;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> constantString = <span class="string">&quot;Hello World&quot;</span>;</span><br><span class="line"><span class="comment">//因为&#x27;constantString&#x27;只能表示1个可能的字符串，所以</span></span><br><span class="line"><span class="comment">//具有文本类型表示</span></span><br><span class="line">constantString;</span><br></pre></td></tr></table></figure><p>就其本身而言，文字类型并不是很有价值：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">x</span>: <span class="string">&quot;hello&quot;</span> = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="comment">// 正确</span></span><br><span class="line">x = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="comment">// 错误</span></span><br><span class="line">x = <span class="string">&quot;howdy&quot;</span>;</span><br></pre></td></tr></table></figure><img src="https://s2.loli.net/2022/02/22/kcOHJ74TKSvuq1h.png" alt="image-20211114102648519" style="zoom:50%;" /><p>拥有一个只能有一个值的变量并没有多大用处！</p><p>但是通过<em>将</em>文字<em>组合</em>成联合，你可以表达一个更有用的概念——例如，只接受一组特定已知值的函数：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">printText</span>(<span class="params">s: <span class="built_in">string</span>, alignment: <span class="string">&quot;left&quot;</span> | <span class="string">&quot;right&quot;</span> | <span class="string">&quot;center&quot;</span></span>) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">printText</span>(<span class="string">&quot;Hello, world&quot;</span>, <span class="string">&quot;left&quot;</span>);</span><br><span class="line"><span class="title function_">printText</span>(<span class="string">&quot;G&#x27;day, mate&quot;</span>, <span class="string">&quot;centre&quot;</span>);</span><br></pre></td></tr></table></figure><img src="https://s2.loli.net/2022/02/22/SrcPeBsQvOUkDfw.png" alt="image-20211114103049870" style="zoom:50%;" /><p>数字文字类型的工作方式相同：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">compare</span>(<span class="params">a: <span class="built_in">string</span>, b: <span class="built_in">string</span></span>): -<span class="number">1</span> | <span class="number">0</span> | <span class="number">1</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> a === b ? <span class="number">0</span> : a &gt; b ? <span class="number">1</span> : -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然，你可以将这些与非文字类型结合使用：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Options</span> &#123;</span><br><span class="line">  <span class="attr">width</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">configure</span>(<span class="params">x: Options | <span class="string">&quot;auto&quot;</span></span>) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">configure</span>(&#123; <span class="attr">width</span>: <span class="number">100</span> &#125;);</span><br><span class="line"><span class="title function_">configure</span>(<span class="string">&quot;auto&quot;</span>);</span><br><span class="line"><span class="title function_">configure</span>(<span class="string">&quot;automatic&quot;</span>);</span><br></pre></td></tr></table></figure><img src="https://s2.loli.net/2022/02/22/YZQwUvRlCtkzcTL.png" alt="image-20211114103530209" style="zoom:50%;" /><p>还有一种文字类型：布尔文字。只有两种布尔文字类型，它们是类型<code>true</code>和<code>false</code>。类型<code>boolean</code>本身实际上只是联合类型 <code>union</code> 的别名<code>true | false</code>。</p><ul><li>文字推理</li></ul><p>当你使用对象初始化变量时，TypeScript 假定该对象的属性稍后可能会更改值。例如，如果你写了这样的代码：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">counter</span>: <span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">if</span> (someCondition) &#123;</span><br><span class="line">  obj.<span class="property">counter</span> = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>TypeScript 不假定先前具有的字段值<code>0</code>，后又分配<code>1</code>是错误的。另一种说法是<code>obj.counter</code>必须有 <code>number</code>属性， 而非是 <code>0</code>，因为类型用于确定<em>读取</em>和<em>写入</em>行为。</p><p>这同样适用于字符串：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">handleRequest</span>(<span class="params">url: <span class="built_in">string</span>, method: <span class="string">&quot;GET&quot;</span> | <span class="string">&quot;POST&quot;</span> | <span class="string">&quot;GUESS&quot;</span></span>) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> req = &#123; <span class="attr">url</span>: <span class="string">&quot;https://example.com&quot;</span>, <span class="attr">method</span>: <span class="string">&quot;GET&quot;</span> &#125;;</span><br><span class="line"><span class="title function_">handleRequest</span>(req.<span class="property">url</span>, req.<span class="property">method</span>);</span><br></pre></td></tr></table></figure><img src="https://s2.loli.net/2022/02/22/hmLQKWoi4kVtBFD.png" alt="image-20211114105814002" style="zoom:50%;" /><p>在上面的例子<code>req.method</code>中推断是<code>string</code>，不是<code>&quot;GET&quot;</code>。因为代码可以在创建<code>req</code>和调用之间进行评估，TypeScript 认为这段代码有错误。</p><p>有两种方法可以解决这个问题。</p><p><strong>1. 可以通过在任一位置添加类型断言来更改推理：</strong></p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 方案 1:</span></span><br><span class="line"><span class="keyword">const</span> req = &#123; <span class="attr">url</span>: <span class="string">&quot;https://example.com&quot;</span>, <span class="attr">method</span>: <span class="string">&quot;GET&quot;</span> <span class="keyword">as</span> <span class="string">&quot;GET&quot;</span> &#125;;</span><br><span class="line"><span class="comment">// 方案 2</span></span><br><span class="line"><span class="title function_">handleRequest</span>(req.<span class="property">url</span>, req.<span class="property">method</span> <span class="keyword">as</span> <span class="string">&quot;GET&quot;</span>);</span><br></pre></td></tr></table></figure><p>方案 1 表示“我打算<code>req.method</code>始终拥有<em>文字类型</em> <code>&quot;GET&quot;</code>”，从而防止之后可能分配<code>&quot;GUESS&quot;</code>给该字段。</p><p>方案 2 的意思是“我知道其他原因<code>req.method</code>具有<code>&quot;GET&quot;</code>值”。</p><p><strong>2. 可以使用<code>as const</code>将整个对象转换为类型文字：</strong></p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> req = &#123; <span class="attr">url</span>: <span class="string">&quot;https://example.com&quot;</span>, <span class="attr">method</span>: <span class="string">&quot;GET&quot;</span> &#125; <span class="keyword">as</span> <span class="keyword">const</span>;</span><br><span class="line"><span class="title function_">handleRequest</span>(req.<span class="property">url</span>, req.<span class="property">method</span>);</span><br></pre></td></tr></table></figure><p>该<code>as const</code>后缀就像<code>const</code>定义，确保所有属性分配的文本类型，而不是一个更一般的<code>string</code>或<code>number</code>。</p><h2 id="3-12-null-和-undefined"><a href="#3-12-null-和-undefined" class="headerlink" title="3.12 null 和 undefined"></a>3.12 <code>null</code> 和 <code>undefined</code></h2><p>JavaScript 有两个原始值用于表示不存在或未初始化的值：<code>null</code>和<code>undefined</code>.</p><p>TypeScript 有两个对应的同名<em>类型</em>。这些类型的行为取决于您是否设置<a href="https://www.typescriptlang.org/tsconfig#strictNullChecks"><code>strictNullChecks</code></a>选择。</p><ul><li><code>strictNullChecks</code> 关闭</li></ul><p>使用<em>false</em>，仍然可以正常访问的值，并且可以将值分配给任何类型的属性。这类似于没有空检查的语言（例如 C#、Java）的行为方式。缺乏对这些值的检查往往是错误的主要来源；如果在他们的代码库中这样做可行，我们总是建议大家打开。</p><ul><li><code>strictNullChecks</code> 打开</li></ul><p>使用<em>true</em>，你需要在对该值使用方法或属性之前测试这些值。就像在使用可选属性之前检查一样，我们可以使用<em>缩小</em>来检查可能的值：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">doSomething</span>(<span class="params">x: <span class="built_in">string</span> | <span class="literal">null</span></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (x === <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="comment">// 做一些事</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hello, &quot;</span> + x.<span class="title function_">toUpperCase</span>());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>非空断言运算符（<code>!</code>后缀）</li></ul><p>TypeScript 也有一种特殊的语法<code>null</code>，<code>undefined</code>，可以在不进行任何显式检查的情况下，从类型中移除和移除类型。<code>!</code>在任何表达式之后写入实际上是一种类型断言，即该值不是<code>null</code>or <code>undefined</code>：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">liveDangerously</span>(<span class="params">x?: <span class="built_in">number</span> | <span class="literal">null</span></span>) &#123;</span><br><span class="line">  <span class="comment">// 正确</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(x!.<span class="title function_">toFixed</span>());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就像其他类型断言一样，这不会更改代码的运行时行为，因此仅<code>!</code>当你知道该值<em>不能</em>是<code>null</code>或 <code>undefined</code>时使用才是重要的。</p><h2 id="3-13-枚举"><a href="#3-13-枚举" class="headerlink" title="3.13 枚举"></a>3.13 枚举</h2><p>枚举是 TypeScript 添加到 JavaScript 的一项功能，它允许描述一个值，该值可能是一组可能的命名常量之一。与大多数 TypeScript 功能不同，这<em>不是</em>JavaScript 的类型级别的添加，而是添加到语言和运行时的内容。因此，你确定你确实需要枚举在做些事情，否则请不要使用。可以在<a href="https://www.typescriptlang.org/docs/handbook/enums.html">Enum 参考页 中</a>阅读有关枚举的更多信息。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ts源码</span></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">Direction</span> &#123;</span><br><span class="line">  <span class="title class_">Up</span> = <span class="number">1</span>,</span><br><span class="line">  <span class="title class_">Down</span>,</span><br><span class="line">  <span class="title class_">Left</span>,</span><br><span class="line">  <span class="title class_">Right</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Direction</span>.<span class="property">Up</span>); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 编译后的js代码</span></span><br><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> <span class="title class_">Direction</span>;</span><br><span class="line">(<span class="keyword">function</span> (<span class="params">Direction</span>) &#123;</span><br><span class="line">  <span class="title class_">Direction</span>[(<span class="title class_">Direction</span>[<span class="string">&quot;Up&quot;</span>] = <span class="number">1</span>)] = <span class="string">&quot;Up&quot;</span>;</span><br><span class="line">  <span class="title class_">Direction</span>[(<span class="title class_">Direction</span>[<span class="string">&quot;Down&quot;</span>] = <span class="number">2</span>)] = <span class="string">&quot;Down&quot;</span>;</span><br><span class="line">  <span class="title class_">Direction</span>[(<span class="title class_">Direction</span>[<span class="string">&quot;Left&quot;</span>] = <span class="number">3</span>)] = <span class="string">&quot;Left&quot;</span>;</span><br><span class="line">  <span class="title class_">Direction</span>[(<span class="title class_">Direction</span>[<span class="string">&quot;Right&quot;</span>] = <span class="number">4</span>)] = <span class="string">&quot;Right&quot;</span>;</span><br><span class="line">&#125;)(<span class="title class_">Direction</span> || (<span class="title class_">Direction</span> = &#123;&#125;));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Direction</span>.<span class="property">Up</span>);</span><br></pre></td></tr></table></figure><img src="https://s2.loli.net/2022/02/22/dvthyFIPKAuBR1s.png" alt="image-20211114112554381" style="zoom:33%;" /><h2 id="3-14-不太常见的原语"><a href="#3-14-不太常见的原语" class="headerlink" title="3.14 不太常见的原语"></a>3.14 不太常见的原语</h2><p>值得一提的是 JavaScript 中一些较新的原语，它们在 TypeScript 类型系统中也实现了。我们先简单的看两个例子：</p><ul><li><h4 id="bigint"><a href="#bigint" class="headerlink" title="bigint"></a><code>bigint</code></h4></li></ul><p>从 ES2020 开始，JavaScript 中有一个用于非常大的整数的原语<code>BigInt</code>：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 通过bigint函数创建bigint</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">oneHundred</span>: <span class="built_in">bigint</span> = <span class="title class_">BigInt</span>(<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过文本语法创建BigInt</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">anotherHundred</span>: <span class="built_in">bigint</span> = <span class="number">100n</span>;</span><br></pre></td></tr></table></figure><p>你可以在<a href="https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-2.html#bigint">TypeScript 3.2 发行说明 中</a>了解有关 BigInt 的更多信息。</p><ul><li><h4 id="symbol"><a href="#symbol" class="headerlink" title="symbol"></a><code>symbol</code></h4></li></ul><p>JavaScript 中有一个原语<code>Symbol()</code>，用于通过函数创建全局唯一引用：</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> firstName = <span class="title class_">Symbol</span>(<span class="string">&quot;name&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> secondName = <span class="title class_">Symbol</span>(<span class="string">&quot;name&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (firstName === secondName) &#123;</span><br><span class="line">  <span class="comment">// 这里的代码不可能执行</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://s2.loli.net/2022/02/22/ORATaxUgEjrPL9V.png" alt="image-20211114113536948" style="zoom:40%;" /><p>此条件将始终返回 <code>false</code>，因为类型 <code>typeof firstName</code>和<code>typeof secondName</code>没有重叠。</p><h3 id="特别声明-本文转自-古艺散人老师-，如有需要可前往原文预览查看。"><a href="#特别声明-本文转自-古艺散人老师-，如有需要可前往原文预览查看。" class="headerlink" title="特别声明: 本文转自  古艺散人老师 ，如有需要可前往原文预览查看。"></a>特别声明: 本文转自 <a href="https://github.com/lurongtao/TypeScript"> 古艺散人老师 </a>，如有需要可前往原文预览查看。</h3>]]></content>
      
      
      <categories>
          
          <category> TypeScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> TypeScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1-2、基础篇：TypeScript入门</title>
      <link href="/article/20247/"/>
      <url>/article/20247/</url>
      
        <content type="html"><![CDATA[<h1 id="二、TypeScript入门"><a href="#二、TypeScript入门" class="headerlink" title="二、TypeScript入门"></a>二、TypeScript入门</h1><h2 id="2-1-发现问题"><a href="#2-1-发现问题" class="headerlink" title="2.1 发现问题"></a>2.1 发现问题</h2><p>JavaScript 中的每个值都有一组行为，您可以通过运行不同的操作来观察。这听起来很抽象，我们来举一个简单的例子，考虑我们可能对名为<code>message</code>的变量运行的一些操作：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在 &#x27;message&#x27; 上访问属性 &#x27;toLowerCase&#x27;，并调用它</span></span><br><span class="line">message.<span class="title function_">toLowerCase</span>();</span><br><span class="line"><span class="comment">// 调用 &#x27;message&#x27;</span></span><br><span class="line"><span class="title function_">message</span>();</span><br></pre></td></tr></table></figure><p>如果我们分解它，第一行可运行的代码访问一个属性<code>toLowerCase</code>，然后调用它。第二个尝试 <code>message</code> 直接调用。</p><p>但是假设我们不知道<code>message</code>。这很常见——我们无法可靠地说出尝试运行任何这些代码会得到什么结果。每个操作的行为完全取决于我们最初给<code>message</code>的赋值。</p><ul><li>可以调用<code>message</code>吗？</li><li>它有<code>toLowerCase</code>这个属性吗？</li><li>如果能，<code>toLowerCase</code>可以调用吗？</li><li>如果这两个值都是可调用的，它们返回什么？</li></ul><p>这些问题的答案通常是我们在编写 JavaScript 时牢记在心的东西，我们必须希望所有细节都正确。</p><p>假设<code>message</code>按以下方式定义：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> message = <span class="string">&quot;Hello World!&quot;</span>;</span><br></pre></td></tr></table></figure><p>正如您可能猜到的，如果我们尝试运行<code>message.toLowerCase()</code>，我们只会得到相同的小写字符串。</p><p>那第二行代码呢？如果您熟悉 JavaScript，您就会知道这会失败并出现异常：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">TypeError: message is not a function</span><br></pre></td></tr></table></figure><p>如果我们能避免这样的错误，那就太好了。</p><p>当我们运行我们的代码时，我们的 JavaScript 运行时选择做什么的方式是通过确定值的<em>类型</em>——它具有什么样的行为和功能。这<code>TypeError</code>就是暗指的一部分- 它说字符串<code>&quot;Hello World!&quot;</code>不能作为函数调用。</p><p>对于某些值，例如基本类型<code>string</code>和<code>number</code>，我们可以在运行时使用<code>typeof</code>运算符识别它们的类型。但是对于函数之类的其他东西，没有相应的运行时机制来识别它们的类型。例如，考虑这个函数：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">x</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> x.<span class="title function_">flip</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以通过阅读代码<em>观察</em>到这个函数只有在给定一个具有可调用<code>flip</code>属性的对象时才能工作，但是 JavaScript 并没有以我们可以在代码运行时检查的方式来显示这些信息。在纯 JavaScript 中，告诉<code>fn</code>特定值做什么的<strong>唯一方法</strong>是调用它并查看会发生什么。这种行为使得在运行之前很难预测代码会做什么，这意味着在编写代码时更难知道代码会做什么。</p><p>这样看来，<em>类型</em>是描述可以传递给<code>fn</code>哪些值会崩溃的概念。JavaScript 只真正提供<em>动态</em>类型——运行代码看看会发生什么。</p><p>另一种方法是使用<em>静态</em>类型系统<em>在</em>运行<em>之前</em>预测预期的代码。</p><h2 id="2-2-静态类型检查"><a href="#2-2-静态类型检查" class="headerlink" title="2.2 静态类型检查"></a>2.2 <strong>静态类型检查</strong></h2><p>回想一下<code>TypeError</code>我们之前尝试将 <code>string</code>作为函数调用的情况。 <em>大多数人</em>不喜欢在运行他们的代码时出现任何类型的错误 - 这些被认为是错误！当我们编写新代码时，我们会尽量避免引入新的错误。</p><p>理想情况下，我们可以有一个工具来帮助我们<em>在</em>代码运行<em>之前</em>发现这些错误。这就是像 TypeScript 这样的静态类型检查器所做的。 <em>静态类型系统</em>描述了当我们运行程序时我们的值的形状和行为。像 TypeScript 这样的类型检查器，告诉我们什么时候事情可能会出轨。</p><img src="https://s2.loli.net/2022/02/22/5yhsbTCF7cqVGNQ.png" alt="image-20211109134610557" style="zoom:50%;" align="left" /><p>在我们运行代码之前，使用 TypeScript 运行最后一个示例会给我们一条错误消息。</p><h2 id="2-3-非异常故障"><a href="#2-3-非异常故障" class="headerlink" title="2.3 非异常故障"></a>2.3 <strong>非异常故障</strong></h2><p>到目前为止，我们一直在讨论运行时错误——JavaScript 运行时告诉我们它认为某些东西是无意义的情况。出现这些情况是因为<a href="https://tc39.github.io/ecma262/">ECMAScript 规范</a>明确说明了语言在遇到意外情况时应该如何表现。</p><p>例如，规范说尝试调用不可调用的东西应该抛出错误。也许这听起来像是“明显的行为”，但您可以想象访问对象上不存在的属性也应该抛出错误。相反，JavaScript 给了我们不同的行为并返回值<code>undefined</code>：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> user = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;小千&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">26</span>,</span><br><span class="line">&#125;;</span><br><span class="line">user.<span class="property">location</span>; <span class="comment">// 返回 undefined</span></span><br></pre></td></tr></table></figure><p>最终，静态类型系统要求必须调用哪些代码，应该在其系统中标记，即使它是不会立即抛出错误的“有效”JavaScript。比如：在 TypeScript 中，以下代码会产生关于<code>location</code>未定义的错误：</p><img src="https://s2.loli.net/2022/02/22/Qqo8BZmtJnGC1D4.png" alt="image-20211109141050215" style="zoom:50%;" /><p>TypeScript 可以在我们的程序中捕获<em>很多</em>合法的错误。例如：</p><ul><li>错别字<br><img src="/img/TypeScript/01-04.png"></li><li>未调用的函数</li></ul><img src="https://s2.loli.net/2022/02/22/U1MmrPyjdbkueRC.png" alt="image-20211109142053954" style="zoom:50%;" align="left" /><ul><li>或基本逻辑错误</li></ul><p><img src="/img/TypeScript/01-06.png"></p><h2 id="2-4-使用工具"><a href="#2-4-使用工具" class="headerlink" title="2.4 使用工具"></a>2.4 <strong>使用工具</strong></h2><p>当我们在代码中出错时，TypeScript 可以捕获错误。这很好，但 TypeScript 也<em>可以首先</em>防止我们犯这些错误。</p><p>类型检查器有能力帮助我们来检查，诸如是否正在访问变量和其他属性的正确属性。一旦有了这些信息，它还可以开始<em>建议</em>您可能想要使用的属性。</p><p>这意味着当利用工具来编辑 TypeScript 代码，核心类型检查器可以在编辑器中键入代码时，提供错误消息和代码完成。这是我们在谈论 TypeScript 中的工具时经常提到的部分内容。</p><img src="https://s2.loli.net/2022/02/22/qolAfbMnVIcXvys.png" alt="image-20211113085757666" style="zoom: 25%;" align="left" /><p>TypeScript 非常重视工具。支持 TypeScript 的编辑器可以提供“快速修复”以自动修复错误、重构以轻松重新组织代码的能力，以及用于跳转到变量定义或查找给定变量的所有引用的有用导航功能。所有这些都建立在类型检查器之上，并且是完全跨平台的，因此<a href="https://github.com/Microsoft/TypeScript/wiki/TypeScript-Editor-Support">您最喜欢的编辑器</a>可能<a href="https://github.com/Microsoft/TypeScript/wiki/TypeScript-Editor-Support">具有可用的 TypeScript 支持</a>。</p><h2 id="2-5-tsc编译器"><a href="#2-5-tsc编译器" class="headerlink" title="2.5 tsc编译器"></a>2.5 <code>tsc</code>编译器</h2><p>我们一直在谈论类型检查，但我们还没有使用我们的类型<em>检查器</em>。让我们认识一下我们的新朋友<code>tsc</code>TypeScript 编译器。首先，我们需要通过 npm 获取它。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install -g typescript</span><br></pre></td></tr></table></figure><p>这将全局安装 TypeScript 编译器。</p><p>现在让我们移动到一个空文件夹，并尝试编写我们的第一个 TypeScript 程序<code>hello.ts</code>：</p><p><strong>01-ts-basics&#x2F;hello.ts</strong></p><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 你好，世界</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hello World&quot;</span>);</span><br></pre></td></tr></table></figure><p>注意这里没有多余的装饰；这个“hello world”程序看起来与您在 JavaScript 中为“hello world”程序编写的程序相同。现在让我们通过运行<code>tsc</code>由<code>typescript</code>包为我们打包编译它：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[felix] 01-ts-basics $ tsc hello.ts</span><br></pre></td></tr></table></figure><p>我们跑了<code>tsc</code>，什么也没发生！嗯，没有类型错误，所以我们没有在控制台中得到任何输出，因为没有什么可报告的。</p><img src="https://s2.loli.net/2022/02/22/APiNb5FzvuwGlZk.png" alt="image-20211113093244339" style="zoom: 50%;" align="left"/><p>但是再检查一下 - 我们得到了一些<em>文件</em>输出。如果我们查看当前目录，我们会发现有两个文件<code>hello.js</code>在<code>hello.ts</code>. 这是我们的<code>hello.ts</code>文件在<code>tsc</code> <em>编译</em>或<em>转换</em>为纯 JavaScript 文件后的输出。</p><img src="https://s2.loli.net/2022/02/22/ctI9MPpSY1y8uLr.png" alt="image-20211113093559374" style="zoom: 50%;" align="left" /><p>如果我们检查<code>hello.js</code>，我们将看到 TypeScript 在处理<code>.ts</code>文件后吐出的内容：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 你好，世界</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hello World&quot;</span>);</span><br></pre></td></tr></table></figure><p>在这种情况下，TypeScript 几乎没有要转换的内容，因此它看起来与我们编写的内容相同。编译器会尝试编译出清晰可读的代码，看起来像一个人写的东西。注释也给我们保留下来。</p><p>如果我们<em>确实</em>引入了类型检查错误呢？让我们重写<code>hello.ts</code>：</p><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">greet</span>(<span class="params">person, date</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Hello <span class="subst">$&#123;person&#125;</span>, today is <span class="subst">$&#123;date&#125;</span>!`</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">greet</span>(<span class="string">&quot;小千&quot;</span>);</span><br></pre></td></tr></table></figure><p>如果我们<code>tsc hello.ts</code>再次运行，我们在命令行上收到了错误！</p><img src="https://s2.loli.net/2022/02/22/QNL3DlBHYUbxu9Z.png" alt="image-20211113095515775" style="zoom:50%;" align="left"/><p>TypeScript 告诉我们忘记将参数传递给<code>greet</code>函数，这是理所当然的。到目前为止，我们只编写了标准的 JavaScript，但是类型检查仍然能够发现我们代码的其他问题。感谢TypeScript！</p><h2 id="2-6-发出错误"><a href="#2-6-发出错误" class="headerlink" title="2.6 发出错误"></a>2.6 发出错误</h2><p>从上一个示例中，你可能没有注意到的一件事，就是是我们的<code>hello.js</code>文件再次更改。如果我们打开该文件，那么我们会看到内容仍然与我们的输入文件基本相同。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 你好，世界</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hello World&quot;</span>);</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">greet</span>(<span class="params">person, date</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hello &quot;</span> + person + <span class="string">&quot;, today is &quot;</span> + date + <span class="string">&quot;!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">greet</span>(<span class="string">&quot;小千&quot;</span>);</span><br></pre></td></tr></table></figure><p>鉴于<code>tsc</code>报告了有关我们代码的错误这一事实，这可能有点令人惊讶，但这是基于 TypeScript 的核心价值观之一：大多数情况下，<em>你</em>会比 TypeScript 更了解发生了什么。</p><p>再回顾一下前面的内容，类型检查代码限制了我们可以运行的程序种类，因此需要权衡类型检查器认为可接受的类型。大多数情况下这没问题，但在某些情况下，这些检查会妨碍到我们。例如，想象自己将 JavaScript 代码迁移到 TypeScript 并引入类型检查错误。最终，你将开始为类型检查器进行代码清理，但原始 JavaScript 代码已经可以运行了！为什么非要将我们的JS代码转换为 TypeScript 代码，来去阻止运行它呢？</p><p>所以 TypeScript 默认不会妨碍我们代码的运行，因为这些JS在宿主环境里运行时没有问题的。当然，随着时间的推移，我们可能希望对错误更加防御，并使 TypeScript 的行为更加严格。在这种情况下，我们可以使用<a href="https://www.typescriptlang.org/tsconfig#noEmitOnError"><code>noEmitOnError</code></a>编译器选项。尝试更改我们的<code>hello.ts</code>文件，并<code>tsc</code>使用该选项重新编译：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tsc --noEmitOnError hello.ts</span><br></pre></td></tr></table></figure><p><img src="/img/TypeScript/02-04.png"></p><p>你会注意到<code>hello.js</code>永远不会更新。</p><h2 id="2-7-显式类型"><a href="#2-7-显式类型" class="headerlink" title="2.7 显式类型"></a>2.7 显式类型</h2><p>到现在为止，我们还没有告诉 typescript <code>person</code>或者<code>date</code>是什么类型。当我们编辑代码时会告诉 TypeScript <code>person</code>是一个<code>string</code>，那<code>date</code>应该是一个<code>Date</code>对象。</p><p>有了这个，TypeScript 可以告诉我们其他<code>greet</code>可能被错误调用的情况。例如修改一下 <code>hello.ts</code>代码：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">greet</span>(<span class="params">person: string, date: <span class="built_in">Date</span></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Hello <span class="subst">$&#123;person&#125;</span>, today is <span class="subst">$&#123;date.toDateString()&#125;</span>!`</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/img/TypeScript/02-05.png"></p><p>嗯？TypeScript 在我们的第二个参数上报告了一个错误，这是为什么呢？</p><p>也许令人惊讶的是，<code>Date()</code>在 JavaScript 中调用会返回一个<code>string</code>。可以使用<code>new Date()</code>满足我们的期望,快速修复错误：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">greet</span>(<span class="params">person: string, date: <span class="built_in">Date</span></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Hello <span class="subst">$&#123;person&#125;</span>, today is <span class="subst">$&#123;date.toDateString()&#125;</span>!`</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">greet</span>(<span class="string">&quot;小锋&quot;</span>, <span class="keyword">new</span> <span class="title class_">Date</span>());</span><br></pre></td></tr></table></figure><p><img src="/img/TypeScript/02-06.png"></p><p>成功的编译输出了 <code>hello.js</code>。</p><p>请记住，我们并不总是必须给变量编写明确的类型注释。在许多情况下，TypeScript 可以为我们自动<em>推断</em>（或“找出”）类型，即使我们忽略定义这些类型。比如：</p><img src="https://s2.loli.net/2022/02/22/N2pXBbY6LRwoaC1.png" alt="image-20211113111924590" style="zoom:50%;" align="left" /><p>这里没有给 msg 指定具体的类型，typescript 会根据函数的实参来自动推断类型。这是一个特性，当类型系统最终会推断出相同的类型时，最好不要添加类型注释。</p><h2 id="2-8-擦除类型"><a href="#2-8-擦除类型" class="headerlink" title="2.8 擦除类型"></a>2.8 擦除类型</h2><p>让我们来仔细看看，当我们 <code>tsc</code>编译上面的代码会输出的什么样的JavaScript，观察 <code>hello.js</code></p><p><img src="/img/TypeScript/02-08.png"></p><p>这里要注意两点：</p><ol><li>我们的<code>person</code>和<code>date</code>参数不再有类型注释。</li><li>我们的“模板字符串” - 使用反引号（&#96;字符）的字符串 - 被转换为带有连接 ( + ) 的纯字符串。</li></ol><p>稍后会详细介绍第二点，现在让我们专注于第一点。类型注释不是 JavaScript 的一部分（或者说 ECMAScript 是落后的），因此实际上没有任何浏览器，或其他运行时可以不加修改地运行 TypeScript。这就是 TypeScript 首先需要编译器的原因——它需要某种方式来剥离或转换任何特定于 TypeScript 的代码，以便我们可以运行它。大多数 TypeScript 特定的代码都被删除了。</p><blockquote><p><strong>请记住</strong>：类型注释永远不会改变程序的运行时行为。</p></blockquote><h2 id="2-9-降级编译"><a href="#2-9-降级编译" class="headerlink" title="2.9 降级编译"></a>2.9 降级编译</h2><p>与上面的另一个区别是我们的模板字符串是从：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">`Hello <span class="subst">$&#123;person&#125;</span>, today is <span class="subst">$&#123;date.toDateString()&#125;</span>!`</span>;</span><br></pre></td></tr></table></figure><p>到：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;Hello &quot;</span> + person + <span class="string">&quot;, today is &quot;</span> + date.<span class="title function_">toDateString</span>() + <span class="string">&quot;!&quot;</span>;</span><br></pre></td></tr></table></figure><p>为什么会这样？</p><p>模板字符串是 ECMAScript 版本的一个特性，称为 ECMAScript 2015（又名 ECMAScript 6、ES2015、ES6 等）。TypeScript 能够将代码从较新版本的 ECMAScript 重写为旧版本，例如 ECMAScript 3 或 ECMAScript 5（又名 ES3 和 ES5）。这种从更新或“更高”版本的 ECMAScript ，向下移动到旧版本或“更低”版本的过程有时称为<em>降级</em>。</p><p>默认情况下，TypeScript 以 ES3 为目标，这是一个非常旧的 ECMAScript 版本。通过使用<a href="https://www.typescriptlang.org/tsconfig#target"><code>target</code></a>选项，我们可以选择更新一些的内容。运行<code>--target es2015</code>TypeScript 以针对 ECMAScript 2015进行更改，这意味着代码应该能够在支持 ECMAScript 2015 的任何地方运行。所以运行<code>tsc --target es2015 hello.ts</code>会给我们以下输出：</p><img src="https://s2.loli.net/2022/02/22/3BbKfisq9htp4nr.png" alt="image-20211113113644658" style="zoom:33%;" /><blockquote><p>虽然默认目标是 ES3，但当前绝大多数浏览器都支持 ES2015。因此，大多数开发人员可以安全地将 ES2015 或更高版本指定为目标，除非考虑与某些旧浏览器的兼容性。</p></blockquote><h2 id="2-10-严格模式"><a href="#2-10-严格模式" class="headerlink" title="2.10 严格模式"></a>2.10 严格模式</h2><p>不同的用户使用 TypeScript 在类型检查器中，希望检查的严格程度不同。有些人正在寻找更宽松的验证体验，它可以帮助仅验证其程序的某些部分，并且仍然拥有不错的工具。这是 TypeScript 的默认体验，其中类型是可选的，推理采用最宽松的类型，并且不检查潜在的<code>null</code>&#x2F;<code>undefined</code>值，就像<code>tsc</code>面对错误时如何编译生成JS文件一样。如果你要迁移现有的 JavaScript，这可能是理想的第一步。</p><p>相比之下，许多用户更喜欢让 TypeScript 尽可能多地立即验证，这就是该语言也提供严格性设置的原因。这些严格性设置将静态类型检查，从开关（无论您的代码是否被检查）转变为更接近于拨号的东西。你把这个拨盘调得越远，TypeScript 就会为你检查越多。这可能需要一些额外的工作，但总的来说，从长远来看，它是物有所值的，并且可以实现更彻底的检查和更准确的工具。如果可能，新的代码库应该始终打开这些严格性检查。</p><p>TypeScript 有几个可以打开或关闭的类型检查严格标志，除非另有说明，否则我们所有的示例都将在启用所有这些标志的情况下编写。在命令行里设置<a href="https://www.typescriptlang.org/tsconfig#strict"><code>strict</code></a> ，或在<a href="https://www.typescriptlang.org/docs/handbook/tsconfig-json.html"><code>tsconfig.json</code></a>中配置<code>&quot;strict&quot;: true</code> 将它打开。</p><p><img src="/img/TypeScript/02-10.png"></p><p><img src="/img/TypeScript/02-11.png"></p><p>以上两个案例错误是因为我们配置了 <code>--strict true</code>。</p><p>同时我们可以单独选择配置它们。我们应该知道的最典型的两个是<a href="https://www.typescriptlang.org/tsconfig#noImplicitAny"><code>noImplicitAny</code></a>和<a href="https://www.typescriptlang.org/tsconfig#strictNullChecks"><code>strictNullChecks</code></a>。</p><ul><li><strong><code>noImplicitAny</code></strong></li></ul><p>回想一下，在某些地方，TypeScript 不会尝试为我们推断类型，而是退回到最宽松的类型：<code>any</code>。这并不是可能发生的最糟糕的事情——毕竟，<code>any</code>无论如何，都能退回到普通的 JavaScript 体验。</p><p>但是，使用<code>any</code>通常首先会破坏使用 TypeScript 的目的。你的程序类型越多，你获得的验证和工具就越多，这意味着你在编写代码时会遇到更少的错误。打开该<a href="https://www.typescriptlang.org/tsconfig#noImplicitAny"><code>noImplicitAny</code></a>标志将对类型隐式推断为，当任何变量发出错误时都应用 <code>any</code> 类型。</p><img src="https://s2.loli.net/2022/02/22/Ir7T4vckJMsSnuK.png" alt="image-20211113122642576" style="zoom:40%;" /><ul><li><strong><code>strictNullChecks</code></strong></li></ul><p>默认情况下，值为<code>null</code>和<code>undefined</code>可分配给任何其他类型。这可以使编写一些代码更容易，但忘记处理<code>null</code>并且<code>undefined</code>是你代码无数错误的元凶 - 有些人认为这是一个<a href="https://www.youtube.com/watch?v=ybrQvs4x0Ps">十亿美元的错误</a>！该<a href="https://www.typescriptlang.org/tsconfig#strictNullChecks"><code>strictNullChecks</code></a>标志，使得操作<code>null</code>和<code>undefined</code>更加明确，它使我们不用担心是否<em>忘记</em>处理<code>null</code>和<code>undefined</code>。</p><img src="https://s2.loli.net/2022/02/22/wRlPY8gO9v1zkZa.png" alt="image-20211113122914750" style="zoom:50%;" /><h3 id="特别声明-本文转自-古艺散人老师-，如有需要可前往原文预览查看。"><a href="#特别声明-本文转自-古艺散人老师-，如有需要可前往原文预览查看。" class="headerlink" title="特别声明: 本文转自  古艺散人老师 ，如有需要可前往原文预览查看。"></a>特别声明: 本文转自 <a href="https://github.com/lurongtao/TypeScript"> 古艺散人老师 </a>，如有需要可前往原文预览查看。</h3>]]></content>
      
      
      <categories>
          
          <category> TypeScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> TypeScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1-1、基础篇：TypeScript介绍</title>
      <link href="/article/8074/"/>
      <url>/article/8074/</url>
      
        <content type="html"><![CDATA[<h1 id="（基础篇）一、TypeScript介绍"><a href="#（基础篇）一、TypeScript介绍" class="headerlink" title="（基础篇）一、TypeScript介绍"></a>（基础篇）一、TypeScript介绍</h1><h2 id="1-1-什么是TypeScript"><a href="#1-1-什么是TypeScript" class="headerlink" title="1.1 什么是TypeScript"></a>1.1 什么是TypeScript</h2><p>在引入编程社区 20 多年后，JavaScript 现在已成为有史以来应用最广泛的跨平台语言之一。JavaScript 最初是一种用于向网页添加微不足道的交互性的小型脚本语言，现已发展成为各种规模的前端和后端应用程序的首选语言。虽然用 JavaScript 编写的程序的大小、范围和复杂性呈指数级增长，但 JavaScript 语言表达不同代码单元之间关系的能力却没有。结合 JavaScript 相当奇特的运行时语义，语言和程序复杂性之间的这种不匹配使得 JavaScript 开发成为一项难以大规模管理的任务。</p><p>程序员编写的最常见的错误类型可以描述为类型错误：在预期不同类型的值的地方使用了某种类型的值。这可能是由于简单的拼写错误、无法理解库的 API 表面、对运行时行为的错误假设或其他错误。TypeScript 的目标是成为 JavaScript 程序的静态类型检查器——换句话说，是一个在代码运行之前运行的工具（静态）并确保程序的类型正确（类型检查）。</p><p>TypeScript 是一种由微软开发的自由和开源的编程语言。它是 JavaScript 的一个超集，而且本质上向这个语言添加了可选的静态类型和基于类的面向对象编程。</p><p>TypeScript 是一种非常受欢迎的 JavaScript 语言扩展。它在现有的 JavaScript 语法之上加入了一层类型层，而这一层即使被删除，也丝毫不会影响运行时的原有表现。许多人认为 TypeScript “只是一个编译器”，但更好的理解其实是把 TypeScript 看作两个独立的系统：编译器（即处理语法的部分）和语言工具（即处理与编辑器集成的部分）。通过独立看待这两个系统，就可以得到能够解释我们之前所做决策的两个重要视角。</p><p>在 <strong>npm</strong>[3] 上，TypeScript 的下载量每年都在翻倍。截止2021 年 12 月 1 日，它的每周下载量超过为 2200 万次。而在去年 12 月，这一数字约为 1200 万次。它仍保持着高速增长的趋势，没有任何放缓的迹象。</p><p>从 2.0 版本开始，TypeScript 每两月定期发布一个 release。但是现在放缓了发布的节奏，改为每三个月发布一次。其中会花一个月编写新 features 并发布 beta 版本，剩下两个月对 beta 版进行测试和 bug 修复，这使得后续的发布更加稳定。</p><h2 id="1-2-JS-ES-TS的关系"><a href="#1-2-JS-ES-TS的关系" class="headerlink" title="1.2 JS,ES,TS的关系"></a>1.2 <code>JS</code>,<code>ES</code>,<code>TS</code>的关系</h2><ul><li><strong>1995年：JavaScript</strong></li></ul><p>当时的网景公司正凭借其Navigator浏览器成为Web时代开启时最著名的第一代互联网公司。</p><p>由于网景公司希望能在静态HTML页面上添加一些动态效果，于是 <code>Brendan Eich</code> 在两周之内设计出了JavaScript语言。</p><p>为什么起名叫JavaScript？原因是当时Java语言非常红火，所以网景公司希望借Java的名气来推广，但事实上JavaScript除了语法上有点像Java，其他部分基本上没啥关系。</p><ul><li><strong>1997年：ECMAScript</strong></li></ul><p>因为网景开发了JavaScript，一年后微软又模仿JavaScript开发了JScript，为了让JavaScript成为全球标准，几个公司联合ECMA（European Computer Manufacturers Association）（欧洲计算机制造商协会）组织制定了JavaScript 语言的标准，被称为ECMAScript标准。</p><table><thead><tr><th>版本</th><th>发布时间</th><th>一般称呼</th><th>简称</th></tr></thead><tbody><tr><td>第1版</td><td>1997年6月</td><td>ECMAScript 1</td><td>ES1</td></tr><tr><td>第2版</td><td>1998年4月</td><td>ECMAScript 2</td><td>ES2</td></tr><tr><td>第3版</td><td>1999年12月</td><td>ECMAScript 3</td><td>ES3</td></tr><tr><td>第4版</td><td>2007年10月草案</td><td>ECMAScript 4</td><td>ES4</td></tr><tr><td>第5版</td><td>2009年12月</td><td>ECMAScript 5</td><td>ES5</td></tr><tr><td>第6版</td><td>2015年6月</td><td>ECMAScript 2015</td><td>ES6</td></tr><tr><td>第7版</td><td>2016年6月</td><td>ECMAScript 2016</td><td>ES7</td></tr><tr><td>第8版</td><td>2017年6月</td><td>ECMAScript 2017</td><td>ES8</td></tr><tr><td>第9版</td><td>2018年6月</td><td>ECMAScript 2018</td><td>ES9</td></tr><tr><td>第10版</td><td>2019年6月</td><td>ECMAScript 2019</td><td>ES10</td></tr><tr><td>第11版</td><td>2020年6月</td><td>ECMAScript 2020</td><td>ES11</td></tr><tr><td>第12版</td><td>2021年6月</td><td>ECMAScript 2021</td><td>ES12</td></tr></tbody></table><ul><li><strong>2015年：TypeScript</strong></li></ul><p>TypeScript 是 JavaScript 的超集，即包含JavaScript 的所有元素，能运行JavaScript 的代码，并扩展了JavaScript 的语法。相比于JavaScript ，它还增加了静态类型、类、模块、接口和类型注解方面的功能，更易于大项目的开发。</p><p>TypeScript 提供最新的和不断发展的 JavaScript 特性，包括那些来自 2015 年的 ECMAScript 和未来的提案中的特性，比如异步功能和 Decorators，以帮助建立健壮的组件。下图显示了 TypeScript 与 ES5、ES2015+ 之间的关系：</p><img src="https://s2.loli.net/2022/02/22/KVoCdwp5rB31zxm.png" alt="image-20211109122048861" style="zoom:50%;" /><h2 id="1-3-TypeScript-与-JavaScript-的区别"><a href="#1-3-TypeScript-与-JavaScript-的区别" class="headerlink" title="1.3 TypeScript 与 JavaScript 的区别"></a>1.3 TypeScript 与 JavaScript 的区别</h2><table><thead><tr><th>TypeScript</th><th>JavaScript</th></tr></thead><tbody><tr><td>JavaScript 的超集用于解决大型项目的代码复杂性</td><td>一种脚本语言，用于创建动态网页</td></tr><tr><td>可以在编译期间发现并纠正错误</td><td>作为一种解释型语言，只能在运行时发现错误</td></tr><tr><td>强类型，支持静态和动态类型</td><td>弱类型，没有静态类型选项</td></tr><tr><td>最终被编译成 JavaScript 代码，使浏览器可以理解</td><td>可以直接在浏览器中使用</td></tr><tr><td>支持模块、泛型和接口</td><td>不支持模块、泛型或接口</td></tr><tr><td>支持 ES3，ES4，ES5 和 ES6+功能</td><td>不支持编译其他 ES3，ES4，ES5 或 ES6+ 功能</td></tr><tr><td>社区的支持仍在增长，而且还不是很大</td><td>大量的社区支持以及大量文档和解决问题的支持</td></tr></tbody></table><h2 id="1-4-TypeScript-的竞争者有哪些？"><a href="#1-4-TypeScript-的竞争者有哪些？" class="headerlink" title="1.4 TypeScript 的竞争者有哪些？"></a>1.4 TypeScript 的竞争者有哪些？</h2><p>TypeScript 的目标是为人们提供编写大型 JavaScript 项目并对后期维护有信心的工具。JavaScript 本身没有的语法支持表示每个标识符的类型，除非运行 JavaScript 并在运行时进行检测。为了解决这个问题，TypeScript 添加了额外的语法。</p><p>所以，如果说我们的目标是作为工具提供支持，那么在这个领域有少数几个竞争者是 TypeScript 无法与之竞争的：</p><ul><li>ESLint 和 TSLint：与 TypeScript 的定位相同，它们都是用来突出代码中可能出现的错误，只是没有为检查过程添加新的语法。两者都不打算作为 IDE 集成的工具运行，而且 TS 和 TS&#x2F;ESLint 经常会说那些对项目没有意义的特性“是对方的领域”。在现代代码中，TS&#x2F;ESLint 的存在使得 TypeScript 可以做更少的检查，这些检查并不适用于所有代码库。虽然有一些功能重叠了，但可以把它们作为很好的补充工具。</li><li>CoffeeScript：嘿，TypeScript 是 2012 年发布的！CoffeeScript 和 TypeScript 的区别在于 CoffeeScript 想要改进 JavaScript 语言，比如给 JavaScript 添加一些特性。这意味着要了解 CoffeeScript 与其输出的 JavaScript 的区别。随着时间推移，CoffeeScript 的最佳理念反而将其变成了另一个 JavaScript，人们为几乎成为了 JavaScript 的 CoffeeScript 感到困扰。</li><li>Flow：这是 Facebook 的 JavaScript 类型检查工具和 IDE 工具语言。就像 TypeScript 一样，Flow 为 JavaScript 添加了一些额外的语法支持，让你拥有了一个更加丰富的类型系统，然后在编译时再将其删除。当我刚开始写 JavaScript 时，Flow 是我最先使用的工具，因为它更接近标准的 JavaScript。Flow 是一个很棒的类型系统，它与 TypeScript 有着不同的目标。任何看不见的类型层系统都必须不断做出“正确”或者“感觉足够正确”的决定，Flow 的目标是“正确”（译者注：Flow 偏向于 <strong>soundness</strong>[6]，在类型判断中更加悲观），而 TypeScript 的目标是“感觉上大部分情况都是正确的”（译者注：而 TS 官方声称 <strong>TS 不是类型完备的</strong>[7]，允许 unsound 行为，偏向于 completeness，在类型判断中更加乐观）。鱼和熊掌不可兼得，完备的类型推导、良好的开发体验和完美的 JS 协同（Perfect JavaScript Interop）只能取其二。</li></ul><p>那么，为什么大多数开源 Flow 代码库最终都迁移到了 TypeScript 呢？在我看来，很大程度上是由两个团队不同的侧重点决定。Flow 是为了维护 Facebook 的代码库而建立的，而 TypeScript 是作为一种独立的语言建立的。这里有两个证据可以证明：</p><ol><li>Facebook 的代码库是一个不能被分割的巨大的 monorepo，而 Flow 团队为了使类型运行在这样的<strong>大代码库</strong>[8]下做了<strong>大量令人难以置信的工作</strong>[9]。另一方面，TypeScript 可以说是“为构建小代码库服务（use projects to make sets of smaller codebases）”，因为这符合人们在开源社区中编写 JavaScript 模块的方式。我认为这么说很合理，TypeScript 不能像 Flow 一样运行在 Facebook 的代码库上，它要么需要大量重写 Facebook 的代码来构建项目，要么需要对 TypeScript 进行大量修改，这可能会影响到 TypeScript 整体开发者的体验。</li><li>对比 DefinitelyTyped 和 Flow 对类型的做法，TypeScript 团队会轮值一名编译器工程师为 DefinitelyTyped 支持我们的构建工具，并帮助管理社区。而 Flow，它几乎完全由社区维护。DT 现在规模更大了，因为它们一直致力于非 Facebook 代码的开发，这将很难获得 Flow 团队的资金支持。</li></ol><p>微软给 TypeScript 在内部创造的独立环境让它可以自由专注于工具开发和整个生态系统的维护，而不是只专注于解决某个特别困难的问题。这让 TypeScript 团队能够与许多人合作，不断发布社区想要的功能。随着时间的推移，我猜想因为外部的需求增长放缓，Flow 团队越来越难为社区工作分配时间。这就形成了一个恶性循环。这使得 Flow 今天不再是 TypeScript 的直接“竞争者”，而是一个关于如何从不同的角度，使用不同的约束去解决类似的问题的有趣视角。</p><h2 id="1-5-TypeScript的未来"><a href="#1-5-TypeScript的未来" class="headerlink" title="1.5 TypeScript的未来"></a>1.5 TypeScript的未来</h2><h3 id="1-5-1-对-TypeScript-的未来怎么看？"><a href="#1-5-1-对-TypeScript-的未来怎么看？" class="headerlink" title="1.5.1 对 TypeScript 的未来怎么看？"></a>1.5.1 <strong>对 TypeScript 的未来怎么看？</strong></h3><p>目前阻碍人们使用 TypeScript 的最大障碍是它需要构建工具。我认为类型语法不太可能被加入 JavaScript 中，但是在 JavaScript 中“用注释的方式定义类型”的可能性非常大。</p><p>这个想法是为 TypeScript 这样的类型系统创建一套语法，但是不定义 JS 运行时会发生什么。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="attr">a</span>: <span class="built_in">string</span> = <span class="string">&quot;1234&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将会变成这样</span></span><br><span class="line"><span class="keyword">const</span> a <span class="comment">/*: string */</span> = <span class="string">&quot;1234&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 传入 JS 引擎</span></span><br></pre></td></tr></table></figure><p>在这个例子中，JS 引擎会知道 : string 是一个类型注释，在 &#x3D; 处结尾。这实际的工作方式是复杂的，需要时间来弄清楚。然而，让 TypeScript 能在 JavaScript 中“原生地”运行将降低它被使用的障碍。它会像 Babel 添加 TypeScript 支持时一样对 TypeScript 施加一些约束。但我觉得这是值得的。</p><p>Deno 是一个消除所有 TS 障碍的关键例子，它通过运行一个 Rust 编写的工具，能够非常快速地将 TS 编译到 JS，模拟了当前 JavaScript 引擎对原生 TypeScript 的支持。</p><h3 id="1-5-2-如今的竞争者"><a href="#1-5-2-如今的竞争者" class="headerlink" title="1.5.2 如今的竞争者"></a>1.5.2 如今的竞争者</h3><ul><li>JetBrains WebStorm - 这是一个有高级 JavaScript 工具支持的 IDE。他们有自己的引擎用于重构、代码流分析并对 JavaScript 语法进行检查。这很好，JetBrains 在他们所有的 IDE 上都做了扎实的工作。我过去经常使用 AppCode 处理 iOS 的工作。当你有一个 TypeScript 项目时，WebStorm 会将 TypeScript 的语言工具和自己的工具混合在一起，这对你来说是双赢的。</li><li>编译到 JS 的语言 - 目前的例子有 Elm，ReScript，KotlinScript，这些语言的核心目标是与 JavaScript 交互。对于 TypeScript 来说，这些都是很有趣的语言，它们有一个干净的环境来实现类型系统 —— 也就是，没有 JS 包袱。作为竞争对手，它们倾向于更细分的市场，因为它们的核心不是 JavaScript ，并且社区也被从 CoffeeScript 迁移所困扰过。</li><li>WASM - 我听到 WASM 作为 TypeScript 竞争者的观点是，WASM 可以作为语言取代 JS 控制浏览器 DOM。反对这一观点的人普遍认为，WASM 没有 DOM 绑定，而且可能永远不会有。TypeScript 包含了 JavaScript 的缺点，如果你在 JavaScript 运行时中加入过 WASM 的话，你几乎总是会更加喜欢它。也就是说，AssemblyScript 在这方面做了一些很好的工作。也许把 WASM 想成 JSON 会更好，它是另一个组成项目的工具，不太可能成为 JavaScript 的竞争者，除非 WASM 和 DOM 的交互方式有所改变。</li><li>编译到 WASM 的语言 - 比如 Rust，Go，Swift，等其它可以编译到 WASM 的语言。这些语言都可能占据 TypeScript 目前作为工具和 web 核心构建模块的位置，不过世事难料，谁知道会怎么样呢？这些语言能够提供各种不同的基本类型，并且基于不同的目标从头构建。如果 WASM 和 WASI 最终获得成功，那么我认为将会与平台相关（想想 apps 等功能实现），看看它们的发展方向会很有趣。说心里话，它们不会是 TypeScript 的竞争者，而是 JavaScript 的。</li></ul><h3 id="1-5-3-TypeScript-怎么看它在生态中的位置？"><a href="#1-5-3-TypeScript-怎么看它在生态中的位置？" class="headerlink" title="1.5.3 TypeScript 怎么看它在生态中的位置？"></a>1.5.3 TypeScript 怎么看它在生态中的位置？</h3><p>TypeScript 希望在类型系统和编辑器工具领域进行创新。我们拥有在主流编程语言中表达能力最强的类型系统之一。</p><p>TypeScript 最初被创建时，对 JavaScript 进行修改的流程和现在非常不同，所以 TypeScript 中有一些特性实际上是 TC39 的领域，但仍然需要向后兼容。这些特性可能在 JavaScript 中存在很多年，并且经过了多次迭代，这意味着 TypeScript 必须维护一个特定语言特性的两种版本。</p><p>所以我们的目标是成为 TC39 JavaScript 语言委员会的优秀成员，就编辑器支持的语言特性进行反馈，支持 TypeScript 用户想要看到的特性。通过这种协作方式，TC39 控制了 JavaScript，TypeScript 也支持他们。</p><h3 id="1-5-4-TypeScript-怎么看它的受众？"><a href="#1-5-4-TypeScript-怎么看它的受众？" class="headerlink" title="1.5.4 TypeScript 怎么看它的受众？"></a>1.5.4 TypeScript 怎么看它的受众？</h3><p>TypeScript 的受众主要有:</p><ul><li>JavaScript 用户（作为语言工具）</li><li>JS + JSDoc 用户（作为语言工具）</li><li>TypeScript 用户（作为编译器，语言工具）</li><li>TypeScript 严格模式（作为编译器，语言工具）</li></ul><p>虽然项目使用 babel &#x2F; swc &#x2F; sucrase &#x2F; esbuild 等工具构建时，tsc 是可选的，但是上面的几种受众仍然可以在每次或至少每两次 TS 版本发布中获得新特性（译者注：babel、esbuild 等会更新支持 TS 新特性。可能是 TS 团队直接去这些项目里做，也可能会在没有 tsc 的情况下为这些项目提供特性，比如通过 vscode。在 <strong>TS roadmap</strong>[10] 中可以了解更多发布计划）。</p><h3 id="1-5-5-TypeScript-是如何跟踪-JS-生态的？"><a href="#1-5-5-TypeScript-是如何跟踪-JS-生态的？" class="headerlink" title="1.5.5 TypeScript 是如何跟踪 JS 生态的？"></a>1.5.5 TypeScript 是如何跟踪 JS 生态的？</h3><p>团队从以下几个方式听取反馈：</p><ul><li>GitHub issues 有持续不断的评论洪流</li><li>微软内部团队要求提供特性，或者要求我们帮忙调试他们缓慢的代码库</li><li>通过 Gitter 或者 TypeScript 社区的 Discord 与社区建立联系</li><li>通过微团的内部工具对想法 &#x2F; 设计进行用户测试</li><li>与 VS Code 有着非常紧密的联系，许多语言工具的反馈都来自于他们</li><li>我们会阅读每一条 @ TypeScript 团队的推特</li><li>我们会跟踪迁移到 TypeScript 和从 TypeScript 迁走的博客文章</li><li>我们会跟踪行业调查和编程语言概述</li></ul><h3 id="特别声明-本文转自-古艺散人老师-，如有需要可前往原文预览查看。"><a href="#特别声明-本文转自-古艺散人老师-，如有需要可前往原文预览查看。" class="headerlink" title="特别声明: 本文转自  古艺散人老师 ，如有需要可前往原文预览查看。"></a>特别声明: 本文转自 <a href="https://github.com/lurongtao/TypeScript"> 古艺散人老师 </a>，如有需要可前往原文预览查看。</h3>]]></content>
      
      
      <categories>
          
          <category> TypeScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> TypeScript </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
